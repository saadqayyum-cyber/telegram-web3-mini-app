{"version":3,"file":"static/js/5074.5931cfe1.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/wallets/evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.browser.esm.js","../node_modules/@thirdweb-dev/wallets/dist/normalizeChainId-1fb9aedf.browser.esm.js"],"sourcesContent":["import { _ as _defineProperty } from '../../../../dist/defineProperty-350fc508.browser.esm.js';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-1fb9aedf.browser.esm.js';\nimport { C as Connector } from '../../../../dist/connector-05689d68.browser.esm.js';\nimport { getDefaultGasOverrides, getChainProvider } from '@thirdweb-dev/sdk';\nimport { Signer } from 'ethers';\nimport { defineReadOnly } from 'ethers/lib/utils';\nimport 'eventemitter3';\n\nclass WrappedSigner extends Signer {\n  constructor(signer) {\n    super();\n    this.signer = signer;\n    defineReadOnly(this, \"provider\", signer.provider);\n  }\n  async getAddress() {\n    return await this.signer.getAddress();\n  }\n  async signMessage(message) {\n    return await this.signer.signMessage(message);\n  }\n  async signTransaction(transaction) {\n    return await this.signer.signTransaction(transaction);\n  }\n  connect(provider) {\n    return new WrappedSigner(this.signer.connect(provider));\n  }\n  _signTypedData(domain, types, value) {\n    return this.signer._signTypedData(domain, types, value);\n  }\n  async sendTransaction(transaction) {\n    if (!this.provider) {\n      throw new Error(\"Provider not found\");\n    }\n    const gas = await getDefaultGasOverrides(this.provider);\n    const txWithGas = {\n      ...gas,\n      ...transaction\n    };\n    return await this.signer.sendTransaction(txWithGas);\n  }\n}\n\nclass LocalWalletConnector extends Connector {\n  constructor(options) {\n    super();\n    _defineProperty(this, \"id\", \"local_wallet\");\n    _defineProperty(this, \"name\", \"Local Wallet\");\n    _defineProperty(this, \"shimDisconnectKey\", \"localWallet.shimDisconnect\");\n    _defineProperty(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = !this.options.chains.find(c => c.chainId === id);\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    this.options = options;\n  }\n  async connect(args) {\n    if (args.chainId) {\n      this.switchChain(args.chainId);\n    }\n    const signer = await this.getSigner();\n    const address = await signer.getAddress();\n    return address;\n  }\n  async disconnect() {\n    this._provider = undefined;\n    this._signer = undefined;\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    if (!signer) {\n      throw new Error(\"No signer found\");\n    }\n    return await signer.getAddress();\n  }\n  async isConnected() {\n    try {\n      const addr = await this.getAddress();\n      return !!addr;\n    } catch {\n      return false;\n    }\n  }\n  async getProvider() {\n    if (!this._provider) {\n      this._provider = getChainProvider(this.options.chain, {\n        clientId: this.options.clientId,\n        secretKey: this.options.secretKey\n      });\n    }\n    return this._provider;\n  }\n  async getSigner() {\n    if (!this._signer) {\n      const provider = await this.getProvider();\n      this._signer = getSignerFromEthersWallet(this.options.ethersWallet, provider);\n    }\n    return this._signer;\n  }\n  async switchChain(chainId) {\n    const chain = this.options.chains.find(c => c.chainId === chainId);\n    if (!chain) {\n      throw new Error(`Chain not found for chainId ${chainId}, please add it to the chains property when creating this wallet`);\n    }\n    this._provider = getChainProvider(chain, {\n      clientId: this.options.clientId,\n      secretKey: this.options.secretKey\n    });\n    this._signer = getSignerFromEthersWallet(this.options.ethersWallet, this._provider);\n    this.onChainChanged(chainId);\n  }\n  async setupListeners() {}\n  updateChains(chains) {\n    this.options.chains = chains;\n  }\n}\nfunction getSignerFromEthersWallet(ethersWallet, provider) {\n  let signer = ethersWallet;\n  if (provider) {\n    signer = ethersWallet.connect(provider);\n  }\n  return new WrappedSigner(signer);\n}\n\nexport { LocalWalletConnector };\n","/**\n * @internal\n */\nfunction normalizeChainId(chainId) {\n  if (typeof chainId === \"string\") {\n    return Number.parseInt(chainId, chainId.trim().substring(0, 2) === \"0x\" ? 16 : 10);\n  }\n  if (typeof chainId === \"bigint\") {\n    return Number(chainId);\n  }\n  return chainId;\n}\n\nexport { normalizeChainId as n };\n"],"names":["WrappedSigner","Signer","constructor","signer","super","this","defineReadOnly","provider","getAddress","signMessage","message","signTransaction","transaction","connect","_signTypedData","domain","types","value","sendTransaction","Error","txWithGas","getDefaultGasOverrides","LocalWalletConnector","Connector","options","_defineProperty","chainId","id","normalizeChainId","unsupported","chains","find","c","emit","chain","args","switchChain","getSigner","disconnect","_provider","undefined","_signer","isConnected","getProvider","getChainProvider","clientId","secretKey","getSignerFromEthersWallet","ethersWallet","onChainChanged","setupListeners","updateChains","Number","parseInt","trim","substring"],"sourceRoot":""}