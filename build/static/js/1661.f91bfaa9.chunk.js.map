{"version":3,"file":"static/js/1661.f91bfaa9.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/wallets/evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.browser.esm.js","../node_modules/@thirdweb-dev/wallets/dist/http-rpc-client-0a079e80.browser.esm.js"],"sourcesContent":["import { C as Connector } from '../../../../dist/connector-05689d68.browser.esm.js';\nimport { h as hexlifyUserOp, D as DEBUG, r as randomNonce, H as HttpRpcClient, g as getUserOpHashV06 } from '../../../../dist/http-rpc-client-0a079e80.browser.esm.js';\nimport { i as isTwUrl } from '../../../../dist/url-a45219bd.browser.esm.js';\nimport { s as setAnalyticsHeaders } from '../../../../dist/headers-733a8199.browser.esm.js';\nimport { EntryPoint__factory } from '@account-abstraction/contracts';\nimport { utils, Signer, ethers, providers, Contract, BigNumber, constants } from 'ethers';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-350fc508.browser.esm.js';\nimport { signTypedDataInternal, getDynamicFeeData, ThirdwebSDK, LOCAL_NODE_PKEY, getChainProvider, getGasPrice } from '@thirdweb-dev/sdk';\nimport { chainIdToThirdwebRpc } from '../../../wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js';\nimport { c as checkContractWalletSignature, A as ACCOUNT_CORE_ABI, f as ENTRYPOINT_ADDRESS, D as DEFAULT_FACTORY_ADDRESS } from '../../../../dist/utils-f58e7acc.browser.esm.js';\nimport { Celo, CeloAlfajoresTestnet, CeloBaklavaTestnet } from '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\n\n/**\n * an API to external a UserOperation with paymaster info\n */\nclass PaymasterAPI {}\n\nclass VerifyingPaymasterAPI extends PaymasterAPI {\n  constructor(paymasterUrl, entryPoint, clientId, secretKey) {\n    super();\n    this.paymasterUrl = paymasterUrl;\n    this.entryPoint = entryPoint;\n    this.clientId = clientId;\n    this.secretKey = secretKey;\n  }\n  async getPaymasterAndData(userOp) {\n    const headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    if (isTwUrl(this.paymasterUrl)) {\n      if (this.secretKey && this.clientId) {\n        throw new Error(\"Cannot use both secret key and client ID. Please use secretKey for server-side applications and clientId for client-side applications.\");\n      }\n      if (this.secretKey) {\n        headers[\"x-secret-key\"] = this.secretKey;\n      } else if (this.clientId) {\n        headers[\"x-client-id\"] = this.clientId;\n        const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n        if (bundleId) {\n          headers[\"x-bundle-id\"] = bundleId;\n        }\n      }\n\n      // Dashboard token.\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token.\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      setAnalyticsHeaders(headers);\n    }\n\n    // Ask the paymaster to sign the transaction and return a valid paymasterAndData value.\n    const response = await fetch(this.paymasterUrl, {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify({\n        jsonrpc: \"2.0\",\n        id: 1,\n        method: \"pm_sponsorUserOperation\",\n        params: [await hexlifyUserOp(userOp), this.entryPoint]\n      })\n    });\n    const res = await response.json();\n    if (!response.ok) {\n      const error = res.error || response.statusText;\n      const code = res.code || \"UNKNOWN\";\n      throw new Error(`Paymaster error: ${error}\nStatus: ${response.status}\nCode: ${code}`);\n    }\n    if (DEBUG) {\n      console.debug(\"Paymaster result:\", res);\n    }\n    if (res.result) {\n      // some paymasters return a string, some return an object with more data\n      if (typeof res.result === \"string\") {\n        return {\n          paymasterAndData: res.result\n        };\n      } else {\n        return res.result;\n      }\n    } else {\n      const error = res.error?.message || res.error || response.statusText || \"unknown error\";\n      throw new Error(`Paymaster error from ${this.paymasterUrl}: ${error}`);\n    }\n  }\n}\nconst getVerifyingPaymaster = (paymasterUrl, entryPoint, clientId, secretKey) => new VerifyingPaymasterAPI(paymasterUrl, entryPoint, clientId, secretKey);\n\n/**\n * This class encapsulates Ethers.js listener function and necessary UserOperation details to\n * discover a TransactionReceipt for the operation.\n *\n * TODO refactor this to a simple event listener on the entry point\n */\nclass UserOperationEventListener {\n  constructor(resolve, reject, entryPoint, sender, userOpHash, nonce, timeout) {\n    this.resolve = resolve;\n    this.reject = reject;\n    this.entryPoint = entryPoint;\n    this.sender = sender;\n    this.userOpHash = userOpHash;\n    this.nonce = nonce;\n    this.timeout = timeout;\n    _defineProperty(this, \"resolved\", false);\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.boundLisener = this.listenerCallback.bind(this);\n  }\n  start() {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    const filter = this.entryPoint.filters.UserOperationEvent(this.userOpHash);\n    // listener takes time... first query directly:\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    setTimeout(async () => {\n      const res = await this.entryPoint.queryFilter(filter, -10); // look at last 10 blocks\n      if (res.length > 0) {\n        void this.listenerCallback(res[0]);\n      } else {\n        this.entryPoint.once(filter, this.boundLisener);\n      }\n    }, 100);\n  }\n  stop() {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.entryPoint.off(\"UserOperationEvent\", this.boundLisener);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async listenerCallback() {\n    for (var _len = arguments.length, param = new Array(_len), _key = 0; _key < _len; _key++) {\n      param[_key] = arguments[_key];\n    }\n    // TODO clean this up..\n    // eslint-disable-next-line prefer-rest-params\n    const event = arguments[arguments.length - 1];\n    if (!event.args) {\n      console.error(\"got event without args\", event);\n      return;\n    }\n    // TODO: can this happen? we register to event by userOpHash..\n    if (event.args.userOpHash !== this.userOpHash) {\n      console.log(`== event with wrong userOpHash: sender/nonce: event.${event.args.sender}@${event.args.nonce.toString()}!= userOp.${this.sender}@${parseInt(this.nonce?.toString())}`);\n      return;\n    }\n    const transactionReceipt = await event.getTransactionReceipt();\n\n    // before returning the receipt, update the status from the event.\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (!event.args.success) {\n      await this.extractFailureReason(transactionReceipt);\n    }\n    this.stop();\n    this.resolve(transactionReceipt);\n    this.resolved = true;\n  }\n  async extractFailureReason(receipt) {\n    receipt.status = 0;\n    const revertReasonEvents = await this.entryPoint.queryFilter(this.entryPoint.filters.UserOperationRevertReason(this.userOpHash, this.sender), receipt.blockHash);\n    if (revertReasonEvents[0]) {\n      let message = revertReasonEvents[0].args.revertReason;\n      if (message.startsWith(\"0x08c379a0\")) {\n        // Error(string)\n        message = utils.defaultAbiCoder.decode([\"string\"], \"0x\" + message.substring(10)).toString();\n      }\n      this.reject(new Error(`UserOp failed with reason: ${message}`));\n    }\n  }\n}\n\nclass ERC4337EthersSigner extends Signer {\n  // TODO: we have 'erc4337provider', remove shared dependencies or avoid two-way reference\n  constructor(config, originalSigner, erc4337provider, httpRpcClient, smartAccountAPI) {\n    super();\n    utils.defineReadOnly(this, \"provider\", erc4337provider);\n    this.config = config;\n    this.originalSigner = originalSigner;\n    this.erc4337provider = erc4337provider;\n    this.httpRpcClient = httpRpcClient;\n    this.smartAccountAPI = smartAccountAPI;\n    this.approving = false;\n  }\n  // This one is called by Contract. It signs the request and passes in to Provider to be sent.\n  async sendTransaction(transaction, options) {\n    if (!this.approving) {\n      this.approving = true;\n      const tx = await this.smartAccountAPI.createApproveTx();\n      if (tx) {\n        await (await this.sendTransaction(tx)).wait();\n      }\n      this.approving = false;\n    }\n    const tx = await ethers.utils.resolveProperties(transaction);\n    await this.verifyAllNecessaryFields(tx);\n    const multidimensionalNonce = randomNonce();\n    const unsigned = await this.smartAccountAPI.createUnsignedUserOp(this.httpRpcClient, {\n      target: tx.to || \"\",\n      data: tx.data?.toString() || \"0x\",\n      value: tx.value,\n      gasLimit: tx.gasLimit,\n      nonce: multidimensionalNonce,\n      maxFeePerGas: tx.maxFeePerGas,\n      maxPriorityFeePerGas: tx.maxPriorityFeePerGas\n    }, options);\n    const userOperation = await this.smartAccountAPI.signUserOp(unsigned);\n    const transactionResponse = await this.erc4337provider.constructUserOpTransactionResponse(userOperation);\n    try {\n      await this.httpRpcClient.sendUserOpToBundler(userOperation);\n    } catch (error) {\n      throw this.unwrapError(error);\n    }\n    // TODO: handle errors - transaction that is \"rejected\" by bundler is _not likely_ to ever resolve its \"wait()\"\n    return transactionResponse;\n  }\n  unwrapError(errorIn) {\n    try {\n      let errorMsg = \"Unknown Error\";\n      if (errorIn.error) {\n        errorMsg = `The bundler has failed to include UserOperation in a batch: ${errorIn.error}`;\n      } else if (errorIn.body && typeof errorIn.body === \"string\") {\n        const errorBody = JSON.parse(errorIn.body);\n        const errorStatus = errorIn.status || \"UNKNOWN\";\n        const errorCode = errorBody?.code || \"UNKNOWN\";\n        let failedOpMessage = errorBody?.error?.message || errorBody?.error?.data || errorBody?.error || errorIn.reason;\n        if (failedOpMessage?.includes(\"FailedOp\")) {\n          let paymasterInfo = \"\";\n          // TODO: better error extraction methods will be needed\n          const matched = failedOpMessage.match(/FailedOp\\((.*)\\)/);\n          if (matched) {\n            const split = matched[1].split(\",\");\n            paymasterInfo = `(paymaster address: ${split[1]})`;\n            failedOpMessage = split[2];\n          }\n          errorMsg = `The bundler has failed to include UserOperation in a batch: ${failedOpMessage} ${paymasterInfo}`;\n        } else {\n          errorMsg = `RPC error: ${failedOpMessage}\nStatus: ${errorStatus}\nCode: ${errorCode}`;\n        }\n      }\n      const error = new Error(errorMsg);\n      error.stack = errorIn.stack;\n      return error;\n    } catch (error) {}\n    return errorIn;\n  }\n  async verifyAllNecessaryFields(transactionRequest) {\n    if (!transactionRequest.to) {\n      throw new Error(\"Missing call target\");\n    }\n    if (!transactionRequest.data && !transactionRequest.value) {\n      // TBD: banning no-op UserOps seems to make sense on provider level\n      throw new Error(\"Missing call data or value\");\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  connect(provider) {\n    throw new Error(\"changing providers is not supported\");\n  }\n  async getAddress() {\n    if (!this.address) {\n      this.address = await this.erc4337provider.getSenderAccountAddress();\n    }\n    return this.address;\n  }\n\n  /**\n   * Sign a message and return the signature\n   */\n  async signMessage(message) {\n    // Deploy smart wallet if needed\n    const isNotDeployed = await this.smartAccountAPI.checkAccountPhantom();\n    if (isNotDeployed) {\n      console.log(\"Account contract not deployed yet. Deploying account before signing message\");\n      const tx = await this.sendTransaction({\n        to: await this.getAddress(),\n        data: \"0x\"\n      });\n      await tx.wait();\n    }\n    const [chainId, address] = await Promise.all([this.getChainId(), this.getAddress()]);\n    const originalMsgHash = utils.hashMessage(message);\n    let factorySupports712;\n    let signature;\n    const rpcUrl = chainIdToThirdwebRpc(chainId, this.config.clientId);\n    const headers = {};\n    if (isTwUrl(rpcUrl)) {\n      const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n      if (this.config.secretKey) {\n        headers[\"x-secret-key\"] = this.config.secretKey;\n      } else if (this.config.clientId) {\n        headers[\"x-client-id\"] = this.config.clientId;\n        if (bundleId) {\n          headers[\"x-bundle-id\"] = bundleId;\n        }\n      }\n\n      // Dashboard token\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      setAnalyticsHeaders(headers);\n    }\n    try {\n      const provider = new providers.StaticJsonRpcProvider({\n        url: rpcUrl,\n        headers\n      }, chainId);\n      const walletContract = new Contract(address, [\"function getMessageHash(bytes32 _hash) public view returns (bytes32)\"], provider);\n      // if this fails it's a pre 712 factory\n      await walletContract.getMessageHash(originalMsgHash);\n      factorySupports712 = true;\n    } catch {\n      factorySupports712 = false;\n    }\n    if (factorySupports712) {\n      const result = await signTypedDataInternal(this, {\n        name: \"Account\",\n        version: \"1\",\n        chainId,\n        verifyingContract: address\n      }, {\n        AccountMessage: [{\n          name: \"message\",\n          type: \"bytes\"\n        }]\n      }, {\n        message: utils.defaultAbiCoder.encode([\"bytes32\"], [originalMsgHash])\n      });\n      signature = result.signature;\n    } else {\n      signature = await this.originalSigner.signMessage(message);\n    }\n    const isValid = await checkContractWalletSignature(message, signature, address, chainId, this.config.clientId, this.config.secretKey);\n    if (isValid) {\n      return signature;\n    } else {\n      throw new Error(\"Unable to verify signature on smart account, please make sure the smart account is deployed and the signature is valid.\");\n    }\n  }\n  async signTransaction(transaction, options) {\n    const tx = await ethers.utils.resolveProperties(transaction);\n    await this.verifyAllNecessaryFields(tx);\n    const multidimensionalNonce = randomNonce();\n    const unsigned = await this.smartAccountAPI.createUnsignedUserOp(this.httpRpcClient, {\n      target: tx.to || \"\",\n      data: tx.data?.toString() || \"0x\",\n      value: tx.value,\n      gasLimit: tx.gasLimit,\n      nonce: multidimensionalNonce\n    }, options);\n    const userOperation = await this.smartAccountAPI.signUserOp(unsigned);\n    const userOpString = JSON.stringify(await hexlifyUserOp(userOperation));\n    return userOpString;\n  }\n}\n\nclass ERC4337EthersProvider extends providers.BaseProvider {\n  constructor(chainId, config, originalSigner, originalProvider, httpRpcClient, entryPoint, smartAccountAPI) {\n    super({\n      name: \"ERC-4337 Custom Network\",\n      chainId\n    });\n    this.chainId = chainId;\n    this.config = config;\n    this.originalSigner = originalSigner;\n    this.originalProvider = originalProvider;\n    this.httpRpcClient = httpRpcClient;\n    this.entryPoint = entryPoint;\n    this.smartAccountAPI = smartAccountAPI;\n    this.signer = new ERC4337EthersSigner(config, originalSigner, this, httpRpcClient, smartAccountAPI);\n  }\n  getSigner() {\n    return this.signer;\n  }\n  async perform(method, params) {\n    if (method === \"sendTransaction\" || method === \"getTransactionReceipt\") {\n      // TODO: do we need 'perform' method to be available at all?\n      // there is nobody out there to use it for ERC-4337 methods yet, we have nothing to override in fact.\n      throw new Error(\"Should not get here. Investigate.\");\n    }\n    if (method === \"estimateGas\") {\n      // gas estimation does nothing at this layer, sendTransaction will do the gas estimation for the userOp\n      return BigNumber.from(500000);\n    }\n    return await this.originalProvider.perform(method, params);\n  }\n  async getTransaction(transactionHash) {\n    // TODO\n    return await super.getTransaction(transactionHash);\n  }\n  async getTransactionReceipt(transactionHash) {\n    const userOpHash = await transactionHash;\n    const sender = await this.getSenderAccountAddress();\n    return await new Promise((resolve, reject) => {\n      new UserOperationEventListener(resolve, reject, this.entryPoint, sender, userOpHash).start();\n    });\n  }\n  async getSenderAccountAddress() {\n    return await this.smartAccountAPI.getAccountAddress();\n  }\n  async waitForTransaction(transactionHash, confirmations, timeout) {\n    const sender = await this.getSenderAccountAddress();\n    return await new Promise((resolve, reject) => {\n      const listener = new UserOperationEventListener(resolve, reject, this.entryPoint, sender, transactionHash, undefined, timeout);\n      listener.start();\n    });\n  }\n\n  // fabricate a response in a format usable by ethers users...\n  async constructUserOpTransactionResponse(userOp1) {\n    const userOp = await utils.resolveProperties(userOp1);\n    const userOpHash = await this.smartAccountAPI.getUserOpHash(userOp);\n    return {\n      hash: userOpHash,\n      confirmations: 0,\n      from: userOp.sender,\n      nonce: 0,\n      // not the real nonce, but good enough for this purpose\n      gasLimit: BigNumber.from(userOp.callGasLimit),\n      // ??\n      value: BigNumber.from(0),\n      data: utils.hexValue(userOp.callData),\n      // should extract the actual called method from this \"execFromEntryPoint()\" call\n      chainId: this.chainId,\n      wait: async confirmations => {\n        const transactionReceipt = await this.smartAccountAPI.getUserOpReceipt(this.httpRpcClient, userOpHash);\n        if (userOp.initCode.length !== 0) {\n          // checking if the wallet has been deployed by the transaction; it must be if we are here\n          await this.smartAccountAPI.checkAccountPhantom();\n        }\n        return transactionReceipt;\n      }\n    };\n  }\n  async detectNetwork() {\n    return this.originalProvider.detectNetwork();\n  }\n}\n\n/**\n * wrap an existing provider to tunnel requests through Account Abstraction.\n * @param originalProvider - The normal provider\n * @param config - see {@link ClientConfig} for more info\n * @param originalSigner - use this signer as the owner. of this wallet. By default, use the provider's signer\n */\nfunction create4337Provider(config, accountApi, originalProvider, chainId) {\n  const entryPoint = EntryPoint__factory.connect(config.entryPointAddress, originalProvider);\n  const httpRpcClient = new HttpRpcClient(config.bundlerUrl, config.entryPointAddress, chainId, config.clientId, config.secretKey);\n  return new ERC4337EthersProvider(chainId, config, config.localSigner, originalProvider, httpRpcClient, entryPoint, accountApi);\n}\n\nconst DUMMY_SIGNATURE = \"0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c\";\n\n/**\n * Base class for all Smart Wallet ERC-4337 Clients to implement.\n * Subclass should inherit 5 methods to support a specific wallet contract:\n *\n * - getAccountInitCode - return the value to put into the \"initCode\" field, if the account is not yet deployed. should create the account instance using a factory contract.\n * - getNonce - return current account's nonce value\n * - encodeExecute - encode the call from entryPoint through our account to the target contract.\n * - signUserOpHash - sign the hash of a UserOp.\n *\n * The user can use the following APIs:\n * - createUnsignedUserOp - given \"target\" and \"calldata\", fill userOp to perform that operation from the account.\n * - createSignedUserOp - helper to call the above createUnsignedUserOp, and then extract the userOpHash and sign it\n */\nclass BaseAccountAPI {\n  // entryPoint connected to \"zero\" address. allowed to make static calls (e.g. to getSenderAddress)\n\n  /**\n   * base constructor.\n   * subclass SHOULD add parameters that define the owner (signer) of this wallet\n   */\n  constructor(params) {\n    _defineProperty(this, \"isPhantom\", true);\n    this.provider = params.provider;\n    this.entryPointAddress = params.entryPointAddress;\n    this.accountAddress = params.accountAddress;\n    this.paymasterAPI = params.paymasterAPI;\n    this.gasless = params.gasless;\n    this.erc20PaymasterAddress = params.erc20PaymasterAddress;\n    this.erc20TokenAddress = params.erc20TokenAddress;\n\n    // factory \"connect\" define the contract address. the contract \"connect\" defines the \"from\" address.\n    this.entryPointView = EntryPoint__factory.connect(params.entryPointAddress, params.provider).connect(ethers.constants.AddressZero);\n  }\n\n  /**\n   * return the value to put into the \"initCode\" field, if the contract is not yet deployed.\n   * this value holds the \"factory\" address, followed by this account's information\n   */\n\n  /**\n   * return current account's nonce.\n   */\n\n  /**\n   * encode the call from entryPoint through our account to the target contract.\n   * @param target - The target contract address\n   * @param value - The value to send to the target contract\n   * @param data - The calldata to send to the target contract\n   */\n\n  /**\n   * sign a userOp's hash (userOpHash).\n   * @param userOpHash - The hash to sign\n   */\n\n  /**\n   * calculate the account address even before it is deployed\n   */\n\n  /**\n   * check if the contract is already deployed.\n   */\n  async checkAccountPhantom() {\n    if (!this.isPhantom) {\n      // already deployed. no need to check anymore.\n      return this.isPhantom;\n    }\n    const senderAddressCode = await this.provider.getCode(this.getAccountAddress());\n    if (senderAddressCode.length > 2) {\n      this.isPhantom = false;\n    }\n    return this.isPhantom;\n  }\n  /**\n   * return initCode value to into the UserOp.\n   * (either deployment code, or empty hex if contract already deployed)\n   */\n  async getInitCode() {\n    if (await this.checkAccountPhantom()) {\n      return await this.getAccountInitCode();\n    }\n    return \"0x\";\n  }\n\n  /**\n   * return maximum gas used for verification.\n   * NOTE: createUnsignedUserOp will add to this value the cost of creation, if the contract is not yet created.\n   */\n  async getVerificationGasLimit() {\n    return 100000;\n  }\n\n  /**\n   * return userOpHash for signing.\n   * This value matches entryPoint.getUserOpHash (calculated off-chain, to avoid a view call)\n   * @param userOp - userOperation, (signature field ignored)\n   */\n  async getUserOpHash(userOp) {\n    const chainId = await this.provider.getNetwork().then(net => net.chainId);\n    return getUserOpHashV06(userOp, this.entryPointAddress, chainId);\n  }\n\n  /**\n   * return the account's address.\n   * this value is valid even before deploying the contract.\n   */\n  async getAccountAddress() {\n    if (!this.senderAddress) {\n      if (this.accountAddress) {\n        this.senderAddress = this.accountAddress;\n      } else {\n        this.senderAddress = await this.getCounterFactualAddress();\n      }\n    }\n    return this.senderAddress;\n  }\n  async estimateCreationGas(initCode) {\n    if (!initCode || initCode === \"0x\") {\n      return 0;\n    }\n    const deployerAddress = initCode.substring(0, 42);\n    const deployerCallData = \"0x\" + initCode.substring(42);\n    return await this.provider.estimateGas({\n      to: deployerAddress,\n      data: deployerCallData\n    });\n  }\n  async createUnsignedUserOp(httpRpcClient, info, options) {\n    let {\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    } = info;\n    // get fees from bundler if available\n    if (isTwUrl(httpRpcClient.bundlerUrl)) {\n      const bundlerFeeData = await httpRpcClient.getUserOperationGasPrice();\n      maxFeePerGas = BigNumber.from(bundlerFeeData.maxFeePerGas);\n      maxPriorityFeePerGas = BigNumber.from(bundlerFeeData.maxPriorityFeePerGas);\n    } else {\n      // if bundler is not available, try to get fees from the network if not passed explicitly\n      if (!maxFeePerGas || !maxPriorityFeePerGas) {\n        const feeData = await getDynamicFeeData(this.provider);\n        if (!maxPriorityFeePerGas) {\n          maxPriorityFeePerGas = feeData.maxPriorityFeePerGas ?? undefined;\n        }\n        if (!maxFeePerGas) {\n          maxFeePerGas = feeData.maxFeePerGas ?? undefined;\n          const network = await this.provider.getNetwork();\n          const chainId = network.chainId;\n          if (chainId === Celo.chainId || chainId === CeloAlfajoresTestnet.chainId || chainId === CeloBaklavaTestnet.chainId) {\n            maxPriorityFeePerGas = maxFeePerGas;\n          }\n        }\n      }\n    }\n    if (!maxFeePerGas || !maxPriorityFeePerGas) {\n      throw new Error(\"maxFeePerGas or maxPriorityFeePerGas could not be calculated, please pass them explicitely\");\n    }\n    const [sender, nonce] = await Promise.all([this.getAccountAddress(), info.nonce ? Promise.resolve(info.nonce) : this.getNonce()]);\n    const initCode = await this.getInitCode();\n    const value = parseNumber(info.value) ?? BigNumber.from(0);\n    const callData = options?.batchData ? info.data : await this.prepareExecute(info.target, value, info.data).then(async tx => {\n      if (!info.gasLimit) {\n        // estimate gas on the inner transactions to simulate\n        // bundler would not revert otherwise\n        await this.provider.estimateGas({\n          from: sender,\n          to: info.target,\n          data: info.data,\n          value: value\n        });\n      }\n      return tx.encode();\n    });\n    const partialOp = {\n      sender,\n      nonce,\n      initCode,\n      callData,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      callGasLimit: BigNumber.from(1000000),\n      verificationGasLimit: BigNumber.from(1000000),\n      preVerificationGas: BigNumber.from(1000000),\n      paymasterAndData: \"0x\",\n      signature: DUMMY_SIGNATURE\n    };\n\n    // paymaster data + maybe used for estimation as well\n    const gasless = options?.gasless !== undefined ? options.gasless : this.gasless;\n    const useErc20Paymaster = this.erc20PaymasterAddress && this.erc20TokenAddress && (await this.isAccountApproved());\n    if (useErc20Paymaster) {\n      partialOp.paymasterAndData = this.erc20PaymasterAddress;\n      let estimates;\n      try {\n        estimates = await httpRpcClient.estimateUserOpGas(partialOp);\n      } catch (error) {\n        throw this.unwrapBundlerError(error);\n      }\n      partialOp.callGasLimit = estimates.callGasLimit;\n      partialOp.verificationGasLimit = estimates.verificationGasLimit;\n      partialOp.preVerificationGas = estimates.preVerificationGas;\n    } else if (gasless) {\n      const paymasterResult = await this.paymasterAPI.getPaymasterAndData(partialOp);\n      const paymasterAndData = paymasterResult.paymasterAndData;\n      if (paymasterAndData && paymasterAndData !== \"0x\") {\n        partialOp.paymasterAndData = paymasterAndData;\n      }\n      // paymaster can have the gas limits in the response\n      if (paymasterResult.callGasLimit && paymasterResult.verificationGasLimit && paymasterResult.preVerificationGas) {\n        partialOp.callGasLimit = BigNumber.from(paymasterResult.callGasLimit);\n        partialOp.verificationGasLimit = BigNumber.from(paymasterResult.verificationGasLimit);\n        partialOp.preVerificationGas = BigNumber.from(paymasterResult.preVerificationGas);\n      } else {\n        // otherwise fallback to bundler for gas limits\n        let estimates;\n        try {\n          estimates = await httpRpcClient.estimateUserOpGas(partialOp);\n        } catch (error) {\n          throw this.unwrapBundlerError(error);\n        }\n        partialOp.callGasLimit = estimates.callGasLimit;\n        partialOp.verificationGasLimit = estimates.verificationGasLimit;\n        partialOp.preVerificationGas = estimates.preVerificationGas;\n        // need paymaster to re-sign after estimates\n        if (paymasterAndData && paymasterAndData !== \"0x\") {\n          const paymasterResult2 = await this.paymasterAPI.getPaymasterAndData(partialOp);\n          if (paymasterResult2.paymasterAndData && paymasterResult2.paymasterAndData !== \"0x\") {\n            partialOp.paymasterAndData = paymasterResult2.paymasterAndData;\n          }\n        }\n      }\n    } else {\n      // query bundler for gas limits\n      let estimates;\n      try {\n        estimates = await httpRpcClient.estimateUserOpGas(partialOp);\n      } catch (error) {\n        throw this.unwrapBundlerError(error);\n      }\n      partialOp.callGasLimit = estimates.callGasLimit;\n      partialOp.verificationGasLimit = estimates.verificationGasLimit;\n      partialOp.preVerificationGas = estimates.preVerificationGas;\n    }\n    return {\n      ...partialOp,\n      signature: \"\"\n    };\n  }\n\n  /**\n   * Sign the filled userOp.\n   * @param userOp - The UserOperation to sign (with signature field ignored)\n   */\n  async signUserOp(userOp) {\n    const userOpHash = await this.getUserOpHash(userOp);\n    const signature = await this.signUserOpHash(userOpHash);\n    return {\n      ...userOp,\n      signature\n    };\n  }\n\n  /**\n   * get the transaction that has this userOpHash mined, or throws if not found\n   * @param userOpHash - returned by sendUserOpToBundler (or by getUserOpHash..)\n   * @param timeout - stop waiting after this timeout\n   * @param interval - time to wait between polls.\n   * @returns The transaction receipt, or an error if timed out.\n   */\n  async getUserOpReceipt(httpRpcClient, userOpHash) {\n    let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 120000;\n    let interval = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1000;\n    const endtime = Date.now() + timeout;\n    while (Date.now() < endtime) {\n      const userOpReceipt = await httpRpcClient.getUserOperationReceipt(userOpHash);\n      if (userOpReceipt) {\n        // avoid desync with current provider state\n        return await this.provider.waitForTransaction(userOpReceipt.receipt.transactionHash);\n      }\n      await new Promise(resolve => setTimeout(resolve, interval));\n    }\n    throw new Error(\"Timeout waiting for userOp to be mined\");\n  }\n  unwrapBundlerError(error) {\n    const message = error?.error?.message || error.error || error.message || error;\n    return new Error(message);\n  }\n}\nfunction parseNumber(a) {\n  if (!a || a === \"\") {\n    return null;\n  }\n  return BigNumber.from(a.toString());\n}\n\nclass AccountAPI extends BaseAccountAPI {\n  constructor(params, originalProvider) {\n    super({\n      ...params,\n      provider: originalProvider\n    });\n    this.params = params;\n    // Technically dont need the signer here, but we need to encode/estimate gas with it so a signer is required\n    // We don't want to use the localSigner directly since it might be connected to another chain\n    // so we just use the public hardhat pkey instead\n    this.sdk = ThirdwebSDK.fromPrivateKey(LOCAL_NODE_PKEY, params.chain, {\n      clientId: params.clientId,\n      secretKey: params.secretKey,\n      // @ts-expect-error expected chain type error\n      supportedChains: typeof params.chain === \"object\" ? [params.chain] : undefined\n    });\n  }\n  async getChainId() {\n    return await this.provider.getNetwork().then(n => n.chainId);\n  }\n  async getAccountContract() {\n    if (!this.accountContract) {\n      if (this.params.accountInfo?.abi) {\n        this.accountContract = await this.sdk.getContract(await this.getAccountAddress(), this.params.accountInfo.abi);\n      } else {\n        this.accountContract = await this.sdk.getContract(await this.getAccountAddress(), ACCOUNT_CORE_ABI);\n      }\n    }\n    return this.accountContract;\n  }\n  async getAccountInitCode() {\n    const factory = await this.getFactoryContract();\n    const localSigner = await this.params.localSigner.getAddress();\n    const tx = await this.params.factoryInfo.createAccount(factory, localSigner);\n    return utils.hexConcat([factory.getAddress(), tx.encode()]);\n  }\n  async getFactoryContract() {\n    if (this.factoryContract) {\n      return this.factoryContract;\n    }\n    if (this.params.factoryInfo?.abi) {\n      this.factoryContract = await this.sdk.getContract(this.params.factoryAddress, this.params.factoryInfo.abi);\n    } else {\n      this.factoryContract = await this.sdk.getContract(this.params.factoryAddress);\n    }\n    return this.factoryContract;\n  }\n  async getCounterFactualAddress() {\n    if (this.params.accountAddress) {\n      return this.params.accountAddress;\n    }\n    const factory = await this.getFactoryContract();\n    const localSigner = await this.params.localSigner.getAddress();\n    return this.params.factoryInfo.getAccountAddress(factory, localSigner);\n  }\n  async getNonce() {\n    if (await this.checkAccountPhantom()) {\n      return BigNumber.from(0);\n    }\n    const accountContract = await this.getAccountContract();\n    return this.params.accountInfo.getNonce(accountContract);\n  }\n  async prepareExecute(target, value, data) {\n    const accountContract = await this.getAccountContract();\n    return this.params.accountInfo.execute(accountContract, target, value, data);\n  }\n  async prepareExecuteBatch(targets, values, datas) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.prepare(\"executeBatch\", [targets, values, datas]);\n  }\n  async signUserOpHash(userOpHash) {\n    return await this.params.localSigner.signMessage(utils.arrayify(userOpHash));\n  }\n  async isAcountDeployed() {\n    return !(await this.checkAccountPhantom());\n  }\n  async isAccountApproved() {\n    if (!this.params.erc20PaymasterAddress || !this.params.erc20TokenAddress) {\n      return true;\n    }\n    const swAddress = await this.getCounterFactualAddress();\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n    const erc20Token = await this.sdk.getContract(this.params.erc20TokenAddress, ERC20Abi);\n    const allowance = await erc20Token.call(\"allowance\", [swAddress, this.params.erc20PaymasterAddress]);\n    return allowance.gte(BigNumber.from(2).pow(96).sub(1));\n  }\n  async createApproveTx() {\n    if (await this.isAccountApproved()) {\n      return undefined;\n    }\n    const amountToApprove = BigNumber.from(2).pow(96).sub(1);\n    const ethersSigner = new ethers.Wallet(LOCAL_NODE_PKEY, this.provider);\n    const erc20Contract = new Contract(this.params.erc20TokenAddress, [\"function approve(address spender, uint256 amount) public returns (bool)\"], ethersSigner);\n    const tx = {\n      to: this.params.erc20TokenAddress,\n      from: await this.getAccountAddress(),\n      value: 0,\n      data: erc20Contract.interface.encodeFunctionData(\"approve\", [this.params.erc20PaymasterAddress, amountToApprove])\n    };\n    return tx;\n  }\n}\n\nclass SmartWalletConnector extends Connector {\n  constructor(config) {\n    super();\n    this.config = config;\n  }\n  async initialize(params) {\n    const config = this.config;\n    const originalProvider = getChainProvider(config.chain, {\n      clientId: config.clientId,\n      secretKey: config.secretKey\n    });\n    this.chainId = (await originalProvider.getNetwork()).chainId;\n    const bundlerUrl = this.config.bundlerUrl || `https://${this.chainId}.bundler.thirdweb.com`;\n    const paymasterUrl = this.config.paymasterUrl || `https://${this.chainId}.bundler.thirdweb.com`;\n    const entryPointAddress = config.entryPointAddress || ENTRYPOINT_ADDRESS;\n    const localSigner = await params.personalWallet.getSigner();\n    const providerConfig = {\n      chain: config.chain,\n      localSigner,\n      entryPointAddress,\n      bundlerUrl,\n      paymasterAPI: this.config.paymasterAPI ? this.config.paymasterAPI : getVerifyingPaymaster(paymasterUrl, entryPointAddress, this.config.clientId, this.config.secretKey),\n      gasless: config.gasless,\n      factoryAddress: config.factoryAddress || DEFAULT_FACTORY_ADDRESS,\n      accountAddress: params.accountAddress,\n      factoryInfo: {\n        createAccount: config.factoryInfo?.createAccount || this.defaultFactoryInfo().createAccount,\n        getAccountAddress: config.factoryInfo?.getAccountAddress || this.defaultFactoryInfo().getAccountAddress,\n        abi: config.factoryInfo?.abi\n      },\n      accountInfo: {\n        execute: config.accountInfo?.execute || this.defaultAccountInfo().execute,\n        getNonce: config.accountInfo?.getNonce || this.defaultAccountInfo().getNonce,\n        abi: config.accountInfo?.abi\n      },\n      clientId: config.clientId,\n      secretKey: config.secretKey,\n      erc20PaymasterAddress: config.erc20PaymasterAddress,\n      erc20TokenAddress: config.erc20TokenAddress\n    };\n    this.personalWallet = params.personalWallet;\n    const accountApi = new AccountAPI(providerConfig, originalProvider);\n    this.aaProvider = create4337Provider(providerConfig, accountApi, originalProvider, this.chainId);\n    this.accountApi = accountApi;\n  }\n  async connect(connectionArgs) {\n    await this.initialize(connectionArgs);\n    return await this.getAddress();\n  }\n  getProvider() {\n    if (!this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return Promise.resolve(this.aaProvider);\n  }\n  async getSigner() {\n    if (!this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return Promise.resolve(this.aaProvider.getSigner());\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    return signer.getAddress();\n  }\n  async isConnected() {\n    try {\n      const address = await this.getAddress();\n      return !!address;\n    } catch (e) {\n      return false;\n    }\n  }\n  async disconnect() {\n    this.personalWallet = undefined;\n    this.aaProvider = undefined;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    const currentChainId = (await provider.getNetwork()).chainId;\n    if (currentChainId !== chainId) {\n      // only throw if actually trying to switch chains\n      throw new Error(\"Not supported.\");\n    }\n  }\n  setupListeners() {\n    return Promise.resolve();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateChains(chains) {}\n\n  /**\n   * Check whether the connected signer can execute a given transaction using the smart wallet.\n   * @param transaction - The transaction to execute using the smart wallet.\n   * @returns whether the connected signer can execute the transaction using the smart wallet.\n   */\n  async hasPermissionToExecute(transaction) {\n    const accountContract = await this.getAccountContract();\n    const signer = await this.getSigner();\n    const signerAddress = await signer.getAddress();\n    const restrictions = (await accountContract.account.getAllSigners()).filter(item => ethers.utils.getAddress(item.signer) === ethers.utils.getAddress(signerAddress))[0]?.permissions;\n    if (!restrictions) {\n      return false;\n    }\n    return restrictions.approvedCallTargets.includes(transaction.getTarget());\n  }\n\n  /// PREPARED TRANSACTIONS\n\n  /**\n   * Send a single transaction without waiting for confirmations\n   * @param transaction - the transaction to send\n   * @param config - optional the transaction configuration\n   * @returns The awaitable transaction\n   */\n  async send(transaction, options) {\n    const signer = await this.getSigner();\n    return signer.sendTransaction({\n      to: transaction.getTarget(),\n      data: transaction.encode(),\n      value: await transaction.getValue()\n    }, options);\n  }\n\n  /**\n   * Execute a single transaction (waiting for confirmations)\n   * @param transaction - The transaction to execute\n   * @returns The transaction receipt\n   */\n  async execute(transaction, options) {\n    const tx = await this.send(transaction, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n  async sendBatch(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchTx(transactions);\n    return await signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: tx.encode(),\n      value: 0\n    }, {\n      ...options,\n      batchData\n    });\n  }\n\n  /**\n   * Execute multiple transactions in a single batch\n   * @param transactions - The transactions to execute\n   * @returns The transaction receipt\n   */\n  async executeBatch(transactions, options) {\n    const tx = await this.sendBatch(transactions, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /// RAW TRANSACTIONS\n\n  async sendRaw(transaction, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    return signer.sendTransaction(transaction, options);\n  }\n  async executeRaw(transaction, options) {\n    const tx = await this.sendRaw(transaction, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n  async sendBatchRaw(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const batch = await this.prepareBatchRaw(transactions);\n    return signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: batch.tx.encode(),\n      value: 0\n    }, {\n      ...options,\n      batchData: batch.batchData // batched tx flag\n    });\n  }\n  async executeBatchRaw(transactions, options) {\n    const tx = await this.sendBatchRaw(transactions, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /// ESTIMATION\n\n  async estimate(transaction, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return this.estimateTx({\n      target: transaction.getTarget(),\n      data: transaction.encode(),\n      value: await transaction.getValue(),\n      gasLimit: await transaction.getOverrides().gasLimit,\n      maxFeePerGas: await transaction.getOverrides().maxFeePerGas,\n      maxPriorityFeePerGas: await transaction.getOverrides().maxPriorityFeePerGas,\n      nonce: await transaction.getOverrides().nonce\n    }, options);\n  }\n  async estimateRaw(transaction, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const tx = await ethers.utils.resolveProperties(transaction);\n    return this.estimateTx({\n      target: tx.to || constants.AddressZero,\n      data: tx.data?.toString() || \"\",\n      value: tx.value || BigNumber.from(0),\n      gasLimit: tx.gasLimit,\n      maxFeePerGas: tx.maxFeePerGas,\n      maxPriorityFeePerGas: tx.maxPriorityFeePerGas,\n      nonce: tx.nonce\n    }, options);\n  }\n  async estimateBatch(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchTx(transactions);\n    return this.estimateTx({\n      target: tx.getTarget(),\n      data: tx.encode(),\n      value: await tx.getValue(),\n      gasLimit: await tx.getOverrides().gasLimit,\n      maxFeePerGas: await tx.getOverrides().maxFeePerGas,\n      maxPriorityFeePerGas: await tx.getOverrides().maxPriorityFeePerGas,\n      nonce: await tx.getOverrides().nonce\n    }, {\n      ...options,\n      batchData\n    });\n  }\n  async estimateBatchRaw(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchRaw(transactions);\n    return this.estimateTx({\n      target: tx.getTarget(),\n      data: tx.encode(),\n      value: await tx.getValue(),\n      gasLimit: await tx.getOverrides().gasLimit,\n      maxFeePerGas: await tx.getOverrides().maxFeePerGas,\n      maxPriorityFeePerGas: await tx.getOverrides().maxPriorityFeePerGas,\n      nonce: await tx.getOverrides().nonce\n    }, {\n      ...options,\n      batchData\n    });\n  }\n\n  //// DEPLOYMENT\n\n  /**\n   * Manually deploy the smart wallet contract. If already deployed this will throw an error.\n   * Note that this is not necessary as the smart wallet will be deployed automatically on the first transaction the user makes.\n   * @returns The transaction receipt\n   */\n  async deploy(options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const tx = await signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: \"0x\"\n    }, {\n      ...options,\n      batchData: {\n        targets: [],\n        data: [],\n        values: []\n      } // batched tx flag to avoid hitting the Router fallback method\n    });\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /**\n   * Check if the smart wallet contract is deployed\n   * @returns true if the smart wallet contract is deployed\n   */\n  async isDeployed() {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return await this.accountApi.isAcountDeployed();\n  }\n  async deployIfNeeded(options) {\n    const isDeployed = await this.isDeployed();\n    if (!isDeployed) {\n      await this.deploy(options);\n    }\n  }\n\n  //// PERMISSIONS\n\n  async grantPermissions(target, permissions) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.grantPermissions(target, permissions);\n  }\n  async revokePermissions(target) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.revokeAccess(target);\n  }\n  async addAdmin(target) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.grantAdminPermissions(target);\n  }\n  async removeAdmin(target) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.revokeAdminPermissions(target);\n  }\n  async getAllActiveSigners() {\n    const isDeployed = await this.isDeployed();\n    if (isDeployed) {\n      const accountContract = await this.getAccountContract();\n      return accountContract.account.getAllAdminsAndSigners();\n    } else {\n      const personalWallet = await this.personalWallet?.getSigner();\n      if (!personalWallet) {\n        throw new Error(\"Personal wallet not connected\");\n      }\n      return [{\n        isAdmin: true,\n        signer: await personalWallet.getAddress(),\n        permissions: {\n          startDate: new Date(0),\n          expirationDate: new Date(0),\n          nativeTokenLimitPerTransaction: BigNumber.from(0),\n          approvedCallTargets: []\n        }\n      }];\n    }\n  }\n\n  /**\n   * Get the underlying account contract of the smart wallet.\n   * @returns The account contract of the smart wallet.\n   */\n  async getAccountContract() {\n    // getting a new instance everytime\n    // to avoid caching issues pre/post deployment\n    const sdk = ThirdwebSDK.fromSigner(await this.getSigner(), this.config.chain, {\n      clientId: this.config.clientId,\n      secretKey: this.config.secretKey\n    });\n    if (this.config.accountInfo?.abi) {\n      return sdk.getContract(await this.getAddress(), this.config.accountInfo.abi);\n    } else {\n      return sdk.getContract(await this.getAddress(), ACCOUNT_CORE_ABI);\n    }\n  }\n\n  /**\n   * Get the underlying account factory contract of the smart wallet.\n   * @returns The account factory contract.\n   */\n  async getFactoryContract() {\n    if (!this.config.factoryAddress) {\n      throw new Error(\"Factory address not set!\");\n    }\n    const sdk = ThirdwebSDK.fromSigner(await this.getSigner(), this.config.chain, {\n      clientId: this.config.clientId,\n      secretKey: this.config.secretKey\n    });\n    if (this.config.factoryInfo?.abi) {\n      return sdk.getContract(this.config.factoryAddress, this.config.factoryInfo.abi);\n    }\n    return sdk.getContract(this.config.factoryAddress);\n  }\n  defaultFactoryInfo() {\n    return {\n      createAccount: async (factory, owner) => {\n        return factory.prepare(\"createAccount\", [owner, ethers.utils.toUtf8Bytes(\"\")]);\n      },\n      getAccountAddress: async (factory, owner) => {\n        return await factory.call(\"getAddress\", [owner, ethers.utils.toUtf8Bytes(\"\")]);\n      }\n    };\n  }\n  defaultAccountInfo() {\n    return {\n      execute: async (account, target, value, data) => {\n        return account.prepare(\"execute\", [target, value, data]);\n      },\n      getNonce: async account => {\n        return account.call(\"getNonce\", []);\n      }\n    };\n  }\n\n  /// PRIVATE METHODS\n\n  async estimateTx(tx, options) {\n    if (!this.accountApi || !this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    let deployGasLimit = BigNumber.from(0);\n    const [provider, isDeployed] = await Promise.all([this.getProvider(), this.isDeployed()]);\n    if (!isDeployed) {\n      deployGasLimit = await this.estimateDeploymentGasLimit();\n    }\n    const [userOp, gasPrice] = await Promise.all([this.accountApi.createUnsignedUserOp(this.aaProvider.httpRpcClient, tx, options), getGasPrice(provider)]);\n    const resolved = await utils.resolveProperties(userOp);\n    const transactionGasLimit = BigNumber.from(resolved.callGasLimit);\n    const transactionCost = transactionGasLimit.mul(gasPrice);\n    const deployCost = deployGasLimit.mul(gasPrice);\n    const totalCost = deployCost.add(transactionCost);\n    return {\n      ether: utils.formatEther(totalCost),\n      wei: totalCost,\n      details: {\n        deployGasLimit,\n        transactionGasLimit,\n        gasPrice,\n        transactionCost,\n        deployCost,\n        totalCost\n      }\n    };\n  }\n  async estimateDeploymentGasLimit() {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const initCode = await this.accountApi.getInitCode();\n    const [initGas, verificationGasLimit] = await Promise.all([this.accountApi.estimateCreationGas(initCode), this.accountApi.getVerificationGasLimit()]);\n    return BigNumber.from(verificationGasLimit).add(initGas);\n  }\n  async prepareBatchRaw(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const resolvedTxs = await Promise.all(transactions.map(transaction => ethers.utils.resolveProperties(transaction)));\n    const targets = resolvedTxs.map(tx => tx.to || constants.AddressZero);\n    const data = resolvedTxs.map(tx => tx.data || \"0x\");\n    const values = resolvedTxs.map(tx => tx.value || BigNumber.from(0));\n    return {\n      tx: await this.accountApi.prepareExecuteBatch(targets, values, data),\n      batchData: {\n        targets,\n        data,\n        values\n      }\n    };\n  }\n  async prepareBatchTx(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const targets = transactions.map(tx => tx.getTarget());\n    const data = transactions.map(tx => tx.encode());\n    const values = await Promise.all(transactions.map(tx => tx.getValue()));\n    return {\n      tx: await this.accountApi.prepareExecuteBatch(targets, values, data),\n      batchData: {\n        targets,\n        data,\n        values\n      }\n    };\n  }\n}\n\nexport { SmartWalletConnector };\n","import { utils, BigNumber, providers } from 'ethers';\nimport { i as isTwUrl } from './url-a45219bd.browser.esm.js';\nimport { s as setAnalyticsHeaders } from './headers-733a8199.browser.esm.js';\nimport { e as isZkSyncChain, M as MANAGED_ACCOUNT_GAS_BUFFER } from './utils-f58e7acc.browser.esm.js';\n\nasync function hexlifyUserOp(\n// TODO: types\nop) {\n  const userOp = await utils.resolveProperties(op);\n  return Object.keys(userOp).map(key => {\n    let val = userOp[key];\n    if (typeof val !== \"string\" || !val.startsWith(\"0x\")) {\n      val = utils.hexValue(val);\n    }\n    return [key, val];\n  }).reduce((set, _ref) => {\n    let [k, v] = _ref;\n    return {\n      ...set,\n      [k]: v\n    };\n  }, {});\n}\n\n// v0.6 userOpHash calculation\nasync function getUserOpHashV06(userOp, entryPoint, chainId) {\n  const op = await utils.resolveProperties(userOp);\n  const hashedUserOp = {\n    sender: op.sender,\n    nonce: op.nonce,\n    initCodeHash: utils.keccak256(op.initCode),\n    callDataHash: utils.keccak256(op.callData),\n    callGasLimit: op.callGasLimit,\n    verificationGasLimit: op.verificationGasLimit,\n    preVerificationGas: op.preVerificationGas,\n    maxFeePerGas: op.maxFeePerGas,\n    maxPriorityFeePerGas: op.maxPriorityFeePerGas,\n    paymasterAndDataHash: utils.keccak256(op.paymasterAndData)\n  };\n  const userOpType = {\n    components: [{\n      type: \"address\",\n      name: \"sender\"\n    }, {\n      type: \"uint256\",\n      name: \"nonce\"\n    }, {\n      type: \"bytes32\",\n      name: \"initCodeHash\"\n    }, {\n      type: \"bytes32\",\n      name: \"callDataHash\"\n    }, {\n      type: \"uint256\",\n      name: \"callGasLimit\"\n    }, {\n      type: \"uint256\",\n      name: \"verificationGasLimit\"\n    }, {\n      type: \"uint256\",\n      name: \"preVerificationGas\"\n    }, {\n      type: \"uint256\",\n      name: \"maxFeePerGas\"\n    }, {\n      type: \"uint256\",\n      name: \"maxPriorityFeePerGas\"\n    }, {\n      type: \"bytes32\",\n      name: \"paymasterAndDataHash\"\n    }],\n    name: \"hashedUserOp\",\n    type: \"tuple\"\n  };\n  const encoded = utils.defaultAbiCoder.encode([userOpType], [{\n    ...hashedUserOp\n  }]);\n  // remove leading word (total length) and trailing word (zero-length signature)\n\n  const userOpHash = utils.keccak256(encoded);\n  const enc = utils.defaultAbiCoder.encode([\"bytes32\", \"address\", \"uint256\"], [userOpHash, entryPoint, chainId]);\n  return utils.keccak256(enc);\n}\nconst generateRandomUint192 = () => {\n  const rand1 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand2 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand3 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand4 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand5 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand6 = BigInt(Math.floor(Math.random() * 0x100000000));\n  return rand1 << BigInt(160) | rand2 << BigInt(128) | rand3 << BigInt(96) | rand4 << BigInt(64) | rand5 << BigInt(32) | rand6;\n};\nconst randomNonce = () => {\n  let hexString = generateRandomUint192().toString(16);\n  if (hexString.length % 2 !== 0) {\n    hexString = \"0\" + hexString;\n  }\n  hexString = \"0x\" + hexString;\n  return BigNumber.from(utils.concat([hexString, \"0x0000000000000000\"]));\n};\n\nconst DEBUG = false; // TODO set as public flag\n\nclass HttpRpcClient {\n  constructor(bundlerUrl, entryPointAddress, chainId, clientId, secretKey) {\n    this.bundlerUrl = bundlerUrl;\n    this.entryPointAddress = entryPointAddress;\n    this.chainId = chainId;\n    const headers = {};\n    if (isTwUrl(this.bundlerUrl)) {\n      const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n      if (secretKey) {\n        headers[\"x-secret-key\"] = secretKey;\n      } else if (clientId) {\n        headers[\"x-client-id\"] = clientId;\n        if (bundleId) {\n          headers[\"x-bundle-id\"] = bundleId;\n        }\n      }\n\n      // Dashboard token\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      setAnalyticsHeaders(headers);\n    }\n    this.userOpJsonRpcProvider = new providers.StaticJsonRpcProvider({\n      url: this.bundlerUrl,\n      headers\n    }, {\n      name: \"Connected bundler network\",\n      chainId\n    });\n    this.initializing = this.validateChainId();\n  }\n  async validateChainId() {\n    if (await isZkSyncChain(this.chainId)) {\n      return;\n    }\n    // validate chainId is in sync with expected chainid\n    const chain = await this.userOpJsonRpcProvider.send(\"eth_chainId\", []);\n    const bundlerChain = parseInt(chain);\n    if (bundlerChain !== this.chainId) {\n      throw new Error(`bundler ${this.bundlerUrl} is on chainId ${bundlerChain}, but provider is on chainId ${this.chainId}`);\n    }\n  }\n\n  /**\n   * send a UserOperation to the bundler\n   * @param userOp1 - The UserOperation to send\n   * @returns userOpHash the id of this operation, for getUserOperationTransaction\n   */\n  async sendUserOpToBundler(userOp1) {\n    await this.initializing;\n    const hexifiedUserOp = await hexlifyUserOp(userOp1);\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n    await this.printUserOperation(\"eth_sendUserOperation\", jsonRequestData);\n    return await this.userOpJsonRpcProvider.send(\"eth_sendUserOperation\", [hexifiedUserOp, this.entryPointAddress]);\n  }\n  async estimateUserOpGas(userOp) {\n    await this.initializing;\n    const hexifiedUserOp = await hexlifyUserOp(userOp);\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n    await this.printUserOperation(\"eth_estimateUserOperationGas\", jsonRequestData);\n    const data = await this.userOpJsonRpcProvider.send(\"eth_estimateUserOperationGas\", [hexifiedUserOp, this.entryPointAddress]);\n    // adds gas buffer to callGasLimit to account for ManagedAccountFactory delegate calls\n    return {\n      preVerificationGas: BigNumber.from(data.preVerificationGas),\n      verificationGas: BigNumber.from(data.verificationGas),\n      verificationGasLimit: BigNumber.from(data.verificationGasLimit),\n      callGasLimit: BigNumber.from(data.callGasLimit).add(MANAGED_ACCOUNT_GAS_BUFFER)\n    };\n  }\n  async getUserOperationGasPrice() {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"thirdweb_getUserOperationGasPrice\", []);\n  }\n  async getUserOperationReceipt(userOpHash) {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"eth_getUserOperationReceipt\", [userOpHash]);\n  }\n  async zkPaymasterData(transactionInput) {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"zk_paymasterData\", [await hexlifyUserOp({\n      ...transactionInput,\n      gas: transactionInput.gasLimit\n    })]);\n  }\n  async zkBroadcastTransaction(transactionInput) {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"zk_broadcastTransaction\", [transactionInput]);\n  }\n  async printUserOperation(method, _ref) {\n    {\n      return;\n    }\n  }\n}\n\nexport { DEBUG as D, HttpRpcClient as H, getUserOpHashV06 as g, hexlifyUserOp as h, randomNonce as r };\n"],"names":["PaymasterAPI","VerifyingPaymasterAPI","constructor","paymasterUrl","entryPoint","clientId","secretKey","super","this","getPaymasterAndData","userOp","headers","isTwUrl","Error","bundleId","globalThis","APP_BUNDLE_ID","undefined","TW_AUTH_TOKEN","TW_CLI_AUTH_TOKEN","setAnalyticsHeaders","response","fetch","method","body","JSON","stringify","jsonrpc","id","params","hexlifyUserOp","res","json","ok","error","statusText","code","status","DEBUG","console","debug","result","paymasterAndData","message","getVerifyingPaymaster","UserOperationEventListener","resolve","reject","sender","userOpHash","nonce","timeout","_defineProperty","boundLisener","listenerCallback","bind","start","filter","filters","UserOperationEvent","setTimeout","async","queryFilter","length","once","stop","off","_len","arguments","param","Array","_key","event","args","log","toString","parseInt","transactionReceipt","getTransactionReceipt","success","extractFailureReason","resolved","receipt","revertReasonEvents","UserOperationRevertReason","blockHash","revertReason","startsWith","utils","decode","substring","ERC4337EthersSigner","Signer","config","originalSigner","erc4337provider","httpRpcClient","smartAccountAPI","approving","sendTransaction","transaction","options","tx","createApproveTx","wait","ethers","verifyAllNecessaryFields","multidimensionalNonce","randomNonce","unsigned","createUnsignedUserOp","target","to","data","value","gasLimit","maxFeePerGas","maxPriorityFeePerGas","userOperation","signUserOp","transactionResponse","constructUserOpTransactionResponse","sendUserOpToBundler","unwrapError","errorIn","errorMsg","errorBody","parse","errorStatus","errorCode","failedOpMessage","reason","includes","paymasterInfo","matched","match","split","stack","transactionRequest","connect","provider","getAddress","address","getSenderAccountAddress","signMessage","checkAccountPhantom","chainId","Promise","all","getChainId","originalMsgHash","factorySupports712","signature","rpcUrl","chainIdToThirdwebRpc","providers","url","walletContract","Contract","getMessageHash","signTypedDataInternal","name","version","verifyingContract","AccountMessage","type","encode","checkContractWalletSignature","signTransaction","ERC4337EthersProvider","originalProvider","signer","getSigner","perform","BigNumber","from","getTransaction","transactionHash","getAccountAddress","waitForTransaction","confirmations","userOp1","getUserOpHash","hash","callGasLimit","callData","getUserOpReceipt","initCode","detectNetwork","BaseAccountAPI","entryPointAddress","accountAddress","paymasterAPI","gasless","erc20PaymasterAddress","erc20TokenAddress","entryPointView","EntryPoint__factory","isPhantom","getCode","getInitCode","getAccountInitCode","getVerificationGasLimit","getNetwork","then","net","getUserOpHashV06","senderAddress","getCounterFactualAddress","estimateCreationGas","deployerAddress","deployerCallData","estimateGas","info","bundlerUrl","bundlerFeeData","getUserOperationGasPrice","feeData","getDynamicFeeData","Celo","CeloAlfajoresTestnet","CeloBaklavaTestnet","getNonce","a","parseNumber","batchData","prepareExecute","partialOp","verificationGasLimit","preVerificationGas","isAccountApproved","estimates","estimateUserOpGas","unwrapBundlerError","paymasterResult","paymasterResult2","signUserOpHash","interval","endtime","Date","now","userOpReceipt","getUserOperationReceipt","AccountAPI","sdk","ThirdwebSDK","fromPrivateKey","LOCAL_NODE_PKEY","chain","supportedChains","n","getAccountContract","accountContract","accountInfo","abi","getContract","ACCOUNT_CORE_ABI","factory","getFactoryContract","localSigner","factoryInfo","createAccount","factoryContract","factoryAddress","execute","prepareExecuteBatch","targets","values","datas","prepare","isAcountDeployed","swAddress","ERC20Abi","default","erc20Token","call","gte","pow","sub","amountToApprove","ethersSigner","erc20Contract","interface","encodeFunctionData","SmartWalletConnector","Connector","initialize","getChainProvider","ENTRYPOINT_ADDRESS","personalWallet","providerConfig","DEFAULT_FACTORY_ADDRESS","defaultFactoryInfo","defaultAccountInfo","accountApi","aaProvider","HttpRpcClient","create4337Provider","connectionArgs","getProvider","isConnected","e","disconnect","switchChain","setupListeners","updateChains","chains","hasPermissionToExecute","signerAddress","restrictions","account","getAllSigners","item","permissions","approvedCallTargets","getTarget","send","getValue","sendBatch","transactions","prepareBatchTx","executeBatch","sendRaw","executeRaw","sendBatchRaw","batch","prepareBatchRaw","executeBatchRaw","estimate","estimateTx","getOverrides","estimateRaw","constants","estimateBatch","estimateBatchRaw","deploy","isDeployed","deployIfNeeded","grantPermissions","revokePermissions","revokeAccess","addAdmin","grantAdminPermissions","removeAdmin","revokeAdminPermissions","getAllActiveSigners","getAllAdminsAndSigners","isAdmin","startDate","expirationDate","nativeTokenLimitPerTransaction","fromSigner","owner","deployGasLimit","estimateDeploymentGasLimit","gasPrice","getGasPrice","transactionGasLimit","transactionCost","mul","deployCost","totalCost","add","ether","wei","details","initGas","resolvedTxs","map","op","Object","keys","key","val","reduce","set","_ref","k","v","hashedUserOp","initCodeHash","callDataHash","paymasterAndDataHash","encoded","components","enc","hexString","generateRandomUint192","rand1","BigInt","Math","floor","random","rand2","rand3","rand4","rand5","rand6","userOpJsonRpcProvider","initializing","validateChainId","isZkSyncChain","bundlerChain","hexifiedUserOp","jsonRequestData","printUserOperation","verificationGas","MANAGED_ACCOUNT_GAS_BUFFER","zkPaymasterData","transactionInput","gas","zkBroadcastTransaction"],"sourceRoot":""}