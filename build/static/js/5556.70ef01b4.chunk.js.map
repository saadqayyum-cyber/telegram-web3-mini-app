{"version":3,"file":"static/js/5556.70ef01b4.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/airdrop-erc1155-f9016b81.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/smart-contract-ac432d60.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/contract-sales-918c7cb8.browser.esm.js"],"sourcesContent":["import { cw as AmountSchema, b9 as AddressOrEnsSchema, dm as FEATURE_ACCOUNT_PERMISSIONS, cu as AddressZero, aL as resolveAddress, dn as FEATURE_ACCOUNT, dp as FEATURE_ACCOUNT_FACTORY, au as isContractDeployed, bj as AbiSchema, a0 as extractCommentFromMetadata, K as fetchContractMetadataFromAddress, a2 as extractFunctionsFromAbi, dq as FEATURE_DYNAMIC_CONTRACT, aI as fetchPublishedContractFromPolygon, aj as joinABIs, bD as CommonContractSchema, aH as THIRDWEB_DEPLOYER, dr as FEATURE_AIRDROP_ERC20, ds as FEATURE_AIRDROP_ERC721, dt as FEATURE_AIRDROP_ERC1155 } from './index-33cd3415.browser.esm.js';\nimport { T as Transaction, f as buildTransactionFunction } from './transactions-72f9603c.browser.esm.js';\nimport { BigNumber, utils } from 'ethers';\nimport invariant from 'tiny-invariant';\nimport { L as resolveOrGenerateId } from './signature-d3ea643d.browser.esm.js';\nimport { z } from 'zod';\nimport { S as StartDateSchema, E as EndDateSchema, a as assertEnabled } from './assertEnabled-d1700f0b.browser.esm.js';\nimport { d as detectContractFeature, a as ContractEvents } from './contract-appuri-5c40af52.browser.esm.js';\nimport { f as fetchSourceFilesFromMetadata } from './fetchSourceFilesFromMetadata-906c835e.browser.esm.js';\nimport { g as getDeploymentInfo, a as deployWithThrowawayDeployer, d as deployContractDeterministic, b as generateExtensionFunctions } from './deployContractDeterministic-7823c15c.browser.esm.js';\n\nlet AdminFlag = /*#__PURE__*/function (AdminFlag) {\n  AdminFlag[AdminFlag[\"None\"] = 0] = \"None\";\n  AdminFlag[AdminFlag[\"AddAdmin\"] = 1] = \"AddAdmin\";\n  AdminFlag[AdminFlag[\"RemoveAdmin\"] = 2] = \"RemoveAdmin\";\n  return AdminFlag;\n}({});\nconst DEFAULT_PERMISSIONS = {\n  // eslint-disable-next-line better-tree-shaking/no-top-level-side-effects\n  startDate: BigNumber.from(0),\n  // eslint-disable-next-line better-tree-shaking/no-top-level-side-effects\n  expirationDate: BigNumber.from(0),\n  approvedCallTargets: [],\n  nativeTokenLimitPerTransaction: \"0\"\n};\nconst SignerPermissionsSchema = /* @__PURE__ */(() => z.object({\n  startDate: StartDateSchema,\n  expirationDate: EndDateSchema,\n  nativeTokenLimitPerTransaction: AmountSchema.default(0),\n  approvedCallTargets: z.union([z.array(AddressOrEnsSchema), z.literal(\"*\")])\n}))();\nconst PermissionSnapshotSchema = /* @__PURE__ */(() => z.array(z.object({\n  signer: AddressOrEnsSchema,\n  makeAdmin: z.boolean(),\n  permissions: SignerPermissionsSchema\n})))();\nconst SignerPermissionRequestV1 = [{\n  name: \"signer\",\n  type: \"address\"\n}, {\n  name: \"approvedTargets\",\n  type: \"address[]\"\n}, {\n  name: \"nativeTokenLimitPerTransaction\",\n  type: \"uint256\"\n}, {\n  name: \"permissionStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"permissionEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"reqValidityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"reqValidityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\nconst SignerPermissionRequest = [{\n  name: \"signer\",\n  type: \"address\"\n}, {\n  name: \"isAdmin\",\n  type: \"uint8\"\n}, {\n  name: \"approvedTargets\",\n  type: \"address[]\"\n}, {\n  name: \"nativeTokenLimitPerTransaction\",\n  type: \"uint256\"\n}, {\n  name: \"permissionStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"permissionEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"reqValidityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"reqValidityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\n\nclass AccountPermissions {\n  featureName = FEATURE_ACCOUNT_PERMISSIONS.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /*********************************\n   * HELPER FUNCTIONS\n   ********************************/\n\n  hasDuplicateSigners(snapshot) {\n    const checkedSigner = {};\n    const signers = snapshot.map(item => item.signer);\n    for (const signer of signers) {\n      if (!checkedSigner[signer]) {\n        checkedSigner[signer] = true;\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Format the access restrictions for a given role\n   *\n   * @param restrictions - The access restrictions for a given role\n   * @returns formatted role restrictions\n   *\n   */\n  parseSignerPermissionsStruct(permissions) {\n    return {\n      startDate: new Date(parseInt(permissions.startTimestamp.toString()) * 1000),\n      expirationDate: new Date(parseInt(permissions.endTimestamp.toString()) * 1000),\n      nativeTokenLimitPerTransaction: BigNumber.from(permissions.nativeTokenLimitPerTransaction),\n      approvedCallTargets: permissions.approvedTargets\n    };\n  }\n  async sendSignerPermissionRequest(signerAddress, permissions, adminFlag) {\n    const {\n      payload,\n      signature\n    } = await this.generatePayload(signerAddress, permissions, adminFlag);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPermissionsForSigner\",\n      args: [payload, signature]\n    });\n  }\n\n  /**\n   * Generate and sign a payload to grant or revoke a signer's access to the account.\n   *\n   * @param signer - The address of the signer\n   * @param roleAction - The address of the signer\n   * @returns The generated payload and signature produced on signing that payload.\n   *\n   */\n  async generatePayload(signerAddress, permissions, isAdmin) {\n    // Get payload struct.\n    const payload = {\n      signer: signerAddress,\n      isAdmin: isAdmin.valueOf(),\n      approvedTargets: permissions.approvedCallTargets === \"*\" ? [AddressZero] : permissions.approvedCallTargets,\n      nativeTokenLimitPerTransaction: utils.parseEther(permissions.nativeTokenLimitPerTransaction),\n      permissionStartTimestamp: permissions.startDate,\n      permissionEndTimestamp: permissions.expirationDate,\n      reqValidityStartTimestamp: 0,\n      // Req validity ends 10 years from now.\n      reqValidityEndTimestamp: BigNumber.from(Math.floor(new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10).getTime() / 1000)),\n      uid: resolveOrGenerateId(undefined)\n    };\n\n    // Generate signature\n    const chainId = await this.contractWrapper.getChainID();\n    const connectedSigner = this.contractWrapper.getSigner();\n    invariant(connectedSigner, \"No signer available\");\n    const signature = await this.contractWrapper.signTypedData(connectedSigner, {\n      name: \"Account\",\n      version: \"1\",\n      chainId,\n      verifyingContract: this.getAddress()\n    }, {\n      SignerPermissionRequest\n    }, payload);\n    return {\n      payload,\n      signature\n    };\n  }\n  async generateLegacyPayload(signerAddress, permissions) {\n    if (permissions.approvedCallTargets === \"*\") {\n      throw new Error(\"Wildcard call targets are not supported on legacy account permissions contract, please deploy an updated contract factory.\");\n    }\n    // legacy account permissions contract\n    // admin is set only via EOA\n    // signer permissions are set via EOA or admin but no wildcard\n    const payload = {\n      signer: signerAddress,\n      approvedTargets: permissions.approvedCallTargets,\n      nativeTokenLimitPerTransaction: utils.parseEther(permissions.nativeTokenLimitPerTransaction),\n      permissionStartTimestamp: permissions.startDate,\n      permissionEndTimestamp: permissions.expirationDate,\n      reqValidityStartTimestamp: 0,\n      // Req validity ends 10 years from now.\n      reqValidityEndTimestamp: BigNumber.from(Math.floor(new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10).getTime() / 1000)),\n      uid: resolveOrGenerateId(undefined)\n    };\n    const chainId = await this.contractWrapper.getChainID();\n    const connectedSigner = this.contractWrapper.getSigner();\n    invariant(connectedSigner, \"No signer available\");\n    const signature = await this.contractWrapper.signTypedData(connectedSigner, {\n      name: \"Account\",\n      version: \"1\",\n      chainId,\n      verifyingContract: this.getAddress()\n    }, {\n      SignerPermissionRequest: SignerPermissionRequestV1\n    }, payload);\n    return {\n      payload,\n      signature\n    };\n  }\n\n  /*********************************\n   * READ FUNCTIONS\n   ********************************/\n\n  /**\n   * Get whether a signer is an admin on the account.\n   *\n   * @example\n   * ```javascript\n   * const isAdmin = await contract.account.isAdmin(signer);\n   * ```\n   * @param signer - The address of a signer of the account.\n   * @returns whether a signer is an admin on the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async isAdmin(signerAddress) {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    return await this.contractWrapper.read(\"isAdmin\", [resolvedSignerAddress]);\n  }\n\n  /**\n   * Get whether a signer has permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const isAdmin = await contract.account.isSigner(signer);\n   * ```\n   * @param signer - The address of a signer of the account.\n   * @returns whether a signer has permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async isSigner(signerAddress) {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    return await this.contractWrapper.read(\"isActiveSigner\", [resolvedSignerAddress]);\n  }\n\n  /**\n   * Get all admins of the account.\n   *\n   * @example\n   * ```javascript\n   * const allAdmins = await contract.account.getAllAdmins();\n   * ```\n   *\n   * @returns All admins of the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllAdmins() {\n    return await this.contractWrapper.read(\"getAllAdmins\", []);\n  }\n\n  /**\n   * Get all (non-admin) signers with permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const allSigners = await contract.account.getAllSigners();\n   * ```\n   *\n   * @returns All (non-admin) signers with permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllSigners() {\n    const activeSignersWithPerms = await this.contractWrapper.read(\"getAllActiveSigners\", []);\n    return await Promise.all(activeSignersWithPerms.map(async signerWithPermissions => {\n      const signer = signerWithPermissions.signer;\n      const permissions = this.parseSignerPermissionsStruct(signerWithPermissions);\n      return {\n        signer,\n        permissions\n      };\n    }));\n  }\n\n  /**\n   * Get all admins and non-admin signers with permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const allAdminsAndSigners = await contract.account.getAllAdminsAndSigners();\n   * ```\n   *\n   * @returns All admins and non-admin signers with permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllAdminsAndSigners() {\n    const allAdmins = await this.getAllAdmins();\n    const transformedAdmins = allAdmins.map(admin => {\n      return {\n        isAdmin: true,\n        signer: admin,\n        permissions: {\n          startDate: new Date(0),\n          expirationDate: new Date(0),\n          nativeTokenLimitPerTransaction: BigNumber.from(0),\n          approvedCallTargets: []\n        }\n      };\n    });\n    const allSigners = await this.getAllSigners();\n    return [...transformedAdmins, ...allSigners];\n  }\n\n  /*********************************\n   * WRITE FUNCTIONS\n   ********************************/\n\n  /**\n   * Grant an address admin access to the account.\n   *\n   * @remarks Grants an address admin access to the account. The admin will have complete authority over the account.\n   *\n   * @param signer - The address to be granted admin access to the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.grantAdminAccess(signer);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  grantAdminPermissions = /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    return await this.sendSignerPermissionRequest(resolvedSignerAddress, DEFAULT_PERMISSIONS, AdminFlag.AddAdmin);\n  });\n\n  /**\n   * Revoke an address' admin access to the account.\n   *\n   * @remarks Revokes an address' admin access to the account.\n   *\n   * @param signer - The address of an admin of the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.revokeAdminAccess(signer);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  revokeAdminPermissions = /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    return await this.sendSignerPermissionRequest(resolvedSignerAddress, DEFAULT_PERMISSIONS, AdminFlag.RemoveAdmin);\n  });\n\n  /**\n   * Grant a signer permissions to use the account.\n   *\n   * @remarks Grants a signer permissions to use the account.\n   *\n   * @param signer - The signer to be granted permissions to use the account.\n   * @param permissions - The permissions to be applied to the signer's use of the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.grantPermissions(signer, permissions);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  grantPermissions = /* @__PURE__ */buildTransactionFunction(async (signerAddress, permissions) => {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    const resolvedPermissions = await SignerPermissionsSchema.parseAsync(permissions);\n    return await this.sendSignerPermissionRequest(resolvedSignerAddress, resolvedPermissions, AdminFlag.None);\n  });\n\n  /**\n   * Update the permissions of a signer for using the account.\n   *\n   * @remarks Updates the permissions of a signer for using the account.\n   *\n   * @param signer - The signer whose permissions to use the account are to be updated.\n   * @param permissions - The permissions to be applied to the signer's use of the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.updatePermissions(signer, permissions);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  updatePermissions = /* @__PURE__ */buildTransactionFunction(async (signerAddress, permissions) => {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    const resolvedPermissions = await SignerPermissionsSchema.parseAsync(permissions);\n    if (await this.isAdmin(resolvedSignerAddress)) {\n      throw new Error(\"Signer is already an admin. Cannot update permissions of an existing admin.\");\n    }\n    if (!(await this.isSigner(resolvedSignerAddress))) {\n      throw new Error(\"Signer does not already have permissions. You can grant permissions using `grantPermissions`.\");\n    }\n    return await this.sendSignerPermissionRequest(resolvedSignerAddress, resolvedPermissions, AdminFlag.None);\n  });\n\n  /**\n   * Revoke a scoped access address to the account\n   *\n   * @remarks Revokes an address' access to the account.\n   *\n   * @param signer - The address whose access to the account is to be revoked.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.revokeAccess(signer);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  revokeAccess = /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    return await this.sendSignerPermissionRequest(resolvedSignerAddress, {\n      startDate: BigNumber.from(0),\n      expirationDate: BigNumber.from(0),\n      approvedCallTargets: [],\n      nativeTokenLimitPerTransaction: \"0\"\n    }, AdminFlag.None);\n  });\n\n  /**\n   * Approve an address as a call target for a given signer on the account\n   *\n   * @remarks Approves an address as a call target for a given signer on the account.\n   *\n   * @param signer - A signer with restricted access to the account.\n   * @param target - The address to approve as a call target for the signer.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.approveTargetForSigner(signer, target);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  approveTargetForSigner = /* @__PURE__ */buildTransactionFunction(async (signerAddress, target) => {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    const resolvedTarget = await resolveAddress(target);\n    if (await this.isAdmin(resolvedSignerAddress)) {\n      throw new Error(\"Signer is already an admin. Cannot approve targets for an admin.\");\n    }\n    if (!(await this.isSigner(resolvedSignerAddress))) {\n      throw new Error(\"Signer does not already have permissions. You can grant permissions using `grantPermissions`.\");\n    }\n    const permissions = await this.contractWrapper.read(\"getPermissionsForSigner\", [resolvedSignerAddress]);\n    if (permissions.approvedTargets.includes(target)) {\n      throw new Error(\"Target is already approved\");\n    }\n    const newTargets = [...permissions.approvedTargets, resolvedTarget];\n    return await this.sendSignerPermissionRequest(resolvedSignerAddress, {\n      startDate: BigNumber.from(permissions.startTimestamp),\n      expirationDate: BigNumber.from(permissions.endTimestamp),\n      approvedCallTargets: newTargets,\n      nativeTokenLimitPerTransaction: permissions.nativeTokenLimitPerTransaction.toString()\n    }, AdminFlag.None);\n  });\n\n  /**\n   * Disapprove an address as a call target for a given signer on the account\n   *\n   * @remarks Disapprove an address as a call target for a given signer on the account.\n   *\n   * @param signer - A signer with restricted access to the account.\n   * @param target - The address to disapprove as a call target for the signer.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.disapproveTargetForSigner(signer, target);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  disapproveTargetForSigner = /* @__PURE__ */buildTransactionFunction(async (signerAddress, target) => {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    const resolvedTarget = await resolveAddress(target);\n    if (await this.isAdmin(resolvedSignerAddress)) {\n      throw new Error(\"Signer is already an admin. Cannot approve targets for an admin.\");\n    }\n    if (!(await this.isSigner(resolvedSignerAddress))) {\n      throw new Error(\"Signer does not already have permissions. You can grant permissions using `grantPermissions`.\");\n    }\n    const permissions = await this.contractWrapper.read(\"getPermissionsForSigner\", [resolvedSignerAddress]);\n    if (!permissions.approvedTargets.includes(resolvedTarget)) {\n      throw new Error(\"Target is currently not approved\");\n    }\n    const newTargets = permissions.approvedTargets.filter(approvedTarget => utils.getAddress(approvedTarget) !== utils.getAddress(resolvedTarget));\n    return await this.sendSignerPermissionRequest(resolvedSignerAddress, {\n      startDate: BigNumber.from(permissions.startTimestamp),\n      expirationDate: BigNumber.from(permissions.endTimestamp),\n      approvedCallTargets: newTargets,\n      nativeTokenLimitPerTransaction: permissions.nativeTokenLimitPerTransaction.toString()\n    }, AdminFlag.None);\n  });\n\n  /**\n   * Set the account's entire snapshot of permissions.\n   *\n   * @remarks Sets the account's entire snapshot of permissions.\n   *\n   * @param permissionSnapshot - the snapshot to set as the account's entire permission snapshot.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.setAccess(permissionSnapshot);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  resetAllPermissions = /* @__PURE__ */buildTransactionFunction(async permissionSnapshot => {\n    const resolvedSnapshot = await PermissionSnapshotSchema.parseAsync(permissionSnapshot);\n\n    /**\n     * All cases\n     *\n     * - Add new admin :check:\n     * - Remove current admin :check:\n     * - Add new scoped :check:\n     * - Remove current scoped :check:\n     * - Update current scoped :check:\n     * - Current admin - new scoped :check:\n     * - Current scoped - new admin :check:\n     **/\n\n    // No duplicate signers in input!\n    if (this.hasDuplicateSigners(resolvedSnapshot)) {\n      throw new Error(\"Duplicate signers found in input.\");\n    }\n    const removeAdminData = [];\n    const addOrUpdateSignerData = [];\n    const removeSignerData = [];\n\n    // Remove all existing admins not included in the passed snapshot.\n    const allAdmins = await this.getAllAdmins();\n    const allToMakeAdmin = resolvedSnapshot.filter(item => item.makeAdmin).map(item => item.signer);\n    allAdmins.forEach(async admin => {\n      if (!allToMakeAdmin.includes(admin)) {\n        const data = (await this.sendSignerPermissionRequest(admin, DEFAULT_PERMISSIONS, AdminFlag.RemoveAdmin)).encode();\n        removeAdminData.push(data);\n      }\n    });\n\n    // Remove all existing signers not included in the passed snapshot.\n    const allSigners = await this.getAllSigners();\n    const allToMakeSigners = resolvedSnapshot.filter(item => {\n      return !item.makeAdmin;\n    }).map(item => item.signer);\n    await Promise.all(allSigners.map(async item => {\n      if (!allToMakeSigners.includes(item.signer)) {\n        const data = (await this.sendSignerPermissionRequest(item.signer, DEFAULT_PERMISSIONS, AdminFlag.None)).encode();\n        removeSignerData.push(data);\n      }\n    }));\n    for (const member of resolvedSnapshot) {\n      // Add new admin\n      if (member.makeAdmin) {\n        (await this.sendSignerPermissionRequest(member.signer, DEFAULT_PERMISSIONS, AdminFlag.AddAdmin)).encode();\n      } else {\n        // Add new scoped\n        const data = (await this.sendSignerPermissionRequest(member.signer, member.permissions, AdminFlag.None)).encode();\n        addOrUpdateSignerData.push(data);\n      }\n    }\n    const data = [];\n    removeAdminData.forEach(item => {\n      data.push(item);\n    });\n    removeSignerData.forEach(item => {\n      data.push(item);\n    });\n    addOrUpdateSignerData.forEach(item => {\n      data.push(item);\n    });\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [data]\n    });\n  });\n}\n\n/**\n * Interact with ERC-4337 accounts\n * @remarks Exposes useful functions available on account contracts.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.account.getAllAdminsAndSigners();\n * ```\n * @public\n */\nclass Account {\n  featureName = FEATURE_ACCOUNT.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n    this.accountPermissions = this.detectAccountPermissions();\n  }\n  detectAccountPermissions() {\n    if (detectContractFeature(this.contractWrapper, \"AccountPermissions\") || detectContractFeature(this.contractWrapper, \"AccountPermissionsV1\")) {\n      return new AccountPermissions(this.contractWrapper);\n    }\n    return undefined;\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /*********************************\n   * READ FUNCTIONS\n   ********************************/\n\n  /**\n   * Get whether a signer is an admin on the account.\n   *\n   * @example\n   * ```javascript\n   * const isAdmin = await contract.account.isAdmin(signer);\n   * ```\n   * @param signer - The address of a signer of the account.\n   * @returns whether a signer is an admin on the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async isAdmin(signerAddress) {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).isAdmin(signerAddress);\n  }\n\n  /**\n   * Get whether a signer has permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const isAdmin = await contract.account.isSigner(signer);\n   * ```\n   * @param signer - The address of a signer of the account.\n   * @returns whether a signer has permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async isSigner(signerAddress) {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).isSigner(signerAddress);\n  }\n\n  /**\n   * Get all admins of the account.\n   *\n   * @example\n   * ```javascript\n   * const allAdmins = await contract.account.getAllAdmins();\n   * ```\n   *\n   * @returns All admins of the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllAdmins() {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).getAllAdmins();\n  }\n\n  /**\n   * Get all (non-admin) signers with permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const allSigners = await contract.account.getAllSigners();\n   * ```\n   *\n   * @returns All (non-admin) signers with permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllSigners() {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).getAllSigners();\n  }\n\n  /**\n   * Get all admins and non-admin signers with permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const allAdminsAndSigners = await contract.account.getAllAdminsAndSigners();\n   * ```\n   *\n   * @returns All admins and non-admin signers with permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllAdminsAndSigners() {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).getAllAdminsAndSigners();\n  }\n\n  /*********************************\n   * WRITE FUNCTIONS\n   ********************************/\n\n  /**\n   * Grant an address admin access to the account.\n   *\n   * @remarks Grants an address admin access to the account. The admin will have complete authority over the account.\n   *\n   * @param signer - The address to be granted admin access to the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.grantAdminAccess(signer);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  grantAdminPermissions = /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).grantAdminPermissions.prepare(signerAddress);\n  });\n\n  /**\n   * Revoke an address' admin access to the account.\n   *\n   * @remarks Revokes an address' admin access to the account.\n   *\n   * @param signer - The address of an admin of the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.revokeAdminAccess(signer);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  revokeAdminPermissions = /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).revokeAdminPermissions.prepare(signerAddress);\n  });\n\n  /**\n   * Grant a signer permissions to use the account.\n   *\n   * @remarks Grants a signer permissions to use the account.\n   *\n   * @param signer - The signer to be granted permissions to use the account.\n   * @param permissions - The permissions to be applied to the signer's use of the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.grantPermissions(signer, permissions);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  grantPermissions = /* @__PURE__ */buildTransactionFunction(async (signerAddress, permissions) => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).grantPermissions.prepare(signerAddress, permissions);\n  });\n\n  /**\n   * Update the permissions of a signer for using the account.\n   *\n   * @remarks Updates the permissions of a signer for using the account.\n   *\n   * @param signer - The signer whose permissions to use the account are to be updated.\n   * @param permissions - The permissions to be applied to the signer's use of the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.updateAccess(signer, restrictions);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  updatePermissions = /* @__PURE__ */buildTransactionFunction(async (signerAddress, permissions) => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).updatePermissions.prepare(signerAddress, permissions);\n  });\n\n  /**\n   * Revoke a scoped access address to the account\n   *\n   * @remarks Revokes an address' access to the account.\n   *\n   * @param signer - The address whose access to the account is to be revoked.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.revokeAccess(signer);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  revokeAccess = /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).revokeAccess.prepare(signerAddress);\n  });\n\n  /**\n   * Approve an address as a call target for a given signer on the account\n   *\n   * @remarks Approves an address as a call target for a given signer on the account.\n   *\n   * @param signer - A signer with restricted access to the account.\n   * @param target - The address to approve as a call target for the signer.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.approveTargetForSigner(signer, target);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  approveTargetForSigner = /* @__PURE__ */buildTransactionFunction(async (signerAddress, target) => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).approveTargetForSigner.prepare(signerAddress, target);\n  });\n\n  /**\n   * Disapprove an address as a call target for a given signer on the account\n   *\n   * @remarks Disapprove an address as a call target for a given signer on the account.\n   *\n   * @param signer - A signer with restricted access to the account.\n   * @param target - The address to disapprove as a call target for the signer.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.disapproveTargetForSigner(signer, target);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  disapproveTargetForSigner = /* @__PURE__ */buildTransactionFunction(async (signerAddress, target) => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).disapproveTargetForSigner.prepare(signerAddress, target);\n  });\n\n  /**\n   * Set the account's entire snapshot of permissions.\n   *\n   * @remarks Sets the account's entire snapshot of permissions.\n   *\n   * @param permissionSnapshot - the snapshot to set as the account's entire permission snapshot.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.setAccess(permissionSnapshot);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  resetAllPermissions = /* @__PURE__ */buildTransactionFunction(async permissionSnapshot => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).resetAllPermissions.prepare(permissionSnapshot);\n  });\n}\n\n/**\n * Interact with ERC-4337 account factory contracts\n * @remarks Exposes useful functions available on the account factory contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.accountFactory.predictAccountAddress(walletAddress);\n * ```\n * @public\n */\nclass AccountFactory {\n  featureName = FEATURE_ACCOUNT_FACTORY.name;\n\n  // utilities\n\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n    this.events = new ContractEvents(this.contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /*********************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the deterministic address of the account that will be created\n   *\n   * @example\n   * ```javascript\n   * const accountAddress = await contract.accountFactory.predictAccountAddress(admin);\n   * ```\n   * @param admin - The admin of the account.\n   * @param extraData - (Optional) Extra data to be passed to the account on creation.\n   * @returns The deterministic address of the account that will be created for the given admin.\n   *\n   * @twfeature AccountFactory\n   */\n  async predictAccountAddress(admin, extraData) {\n    let data = utils.toUtf8Bytes(\"\");\n    if (extraData) {\n      data = extraData;\n    }\n    return this.contractWrapper.read(\"getAddress\", [admin, data]);\n  }\n\n  /**\n   * Get all accounts on which the given signer has authority\n   *\n   * @example\n   * ```javascript\n   * const allAccounts = await contract.accountFactory.getAssociatedAccounts(admin);\n   * ```\n   * @param signer - The account address.\n   * @returns All accounts on which the given signer has authority.\n   *\n   * @twfeature AccountFactory\n   */\n  async getAssociatedAccounts(signer) {\n    return this.contractWrapper.read(\"getAccountsOfSigner\", [signer]);\n  }\n\n  /**\n   * Get all accounts\n   *\n   * @example\n   * ```javascript\n   * const allAccounts = await contract.accountFactory.getAllAccounts();\n   * ```\n   *\n   * @returns All accounts created via the account factory.\n   *\n   * @twfeature AccountFactory\n   */\n  async getAllAccounts() {\n    return await this.contractWrapper.read(\"getAllAccounts\", []);\n  }\n\n  /**\n   * Check if a account has been deployed for the given admin\n   *\n   * @param admin - The admin of the account.\n   * @param extraData - (Optional) Extra data to be passed to the account on creation.\n   * @returns whether the account has been deployed for the given admin.\n   */\n  async isAccountDeployed(admin, extraData) {\n    const addr = await this.predictAccountAddress(admin, extraData);\n    return isContractDeployed(addr, this.contractWrapper.getProvider());\n  }\n\n  /*********************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create a account\n   *\n   * @remarks Create a account for an admin. The admin will have complete authority over the account.\n   *\n   * @param admin - The admin of the account.\n   * @param extraData - (Optional) Extra data to be passed to the account on creation.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.accountFactory.createAccount(admin, extraData);\n   * const receipt = tx.receipt();\n   * const accountAddress = tx.address;\n   * ```\n   *\n   * @twfeature AccountFactory\n   */\n  createAccount = /* @__PURE__ */buildTransactionFunction(async (accountAdmin, extraData) => {\n    if (await this.isAccountDeployed(accountAdmin, extraData)) {\n      throw new Error(`Account already deployed for admin: ${accountAdmin}`);\n    }\n    let data = utils.toUtf8Bytes(\"\");\n    if (extraData) {\n      data = extraData;\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"createAccount\",\n      args: [accountAdmin, data],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"AccountCreated\", receipt?.logs);\n        return {\n          address: event[0].args.account,\n          receipt\n        };\n      }\n    });\n  });\n}\n\n/**\n * @internal\n * @param abi - The abi to extract events from\n * @param metadata - The metadata to extract comments from\n */\nfunction extractEventsFromAbi(abi, metadata) {\n  const parsedAbi = AbiSchema.parse(abi || []);\n  const events = parsedAbi.filter(el => el.type === \"event\");\n  const parsed = [];\n  for (const e of events) {\n    const doc = extractCommentFromMetadata(e.name, metadata, \"events\");\n    parsed.push({\n      inputs: e.inputs || [],\n      outputs: e.outputs || [],\n      name: e.name || \"unknown\",\n      comment: doc\n    });\n  }\n  return parsed;\n}\n\n/**\n * Handles publish metadata for a contract\n * @internal\n */\nclass ContractPublishedMetadata {\n  constructor(contractWrapper, storage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Get the published metadata for this contract\n   * @public\n   */\n  async get() {\n    if (this._cachedMetadata) {\n      return this._cachedMetadata;\n    }\n    this._cachedMetadata = await fetchContractMetadataFromAddress(this.contractWrapper.address, this.contractWrapper.getProvider(), this.storage, this.contractWrapper.options);\n    return this._cachedMetadata;\n  }\n\n  /**\n   * @public\n   */\n  async extractSources() {\n    const publishedMetadata = await this.get();\n    return fetchSourceFilesFromMetadata(publishedMetadata, this.storage);\n  }\n\n  /**\n   * @public\n   */\n  async extractFunctions() {\n    let publishedMetadata;\n    try {\n      publishedMetadata = await this.get();\n    } catch (e) {\n      // ignore for built-in contracts\n    }\n    // to construct a contract we already **have** to have the abi on the contract wrapper, so there is no reason to look fetch it again (means this function can become synchronous as well!)\n    return extractFunctionsFromAbi(AbiSchema.parse(this.contractWrapper.abi), publishedMetadata?.metadata);\n  }\n\n  /**\n   * @public\n   */\n  async extractEvents() {\n    let publishedMetadata;\n    try {\n      publishedMetadata = await this.get();\n    } catch (e) {\n      // ignore for built-in contracts\n    }\n    // to construct a contract we already **have** to have the abi on the contract wrapper, so there is no reason to look fetch it again (means this function can become synchronous as well!)\n    return extractEventsFromAbi(AbiSchema.parse(this.contractWrapper.abi), publishedMetadata?.metadata);\n  }\n}\n\nclass ExtensionManager {\n  featureName = FEATURE_DYNAMIC_CONTRACT.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  async getAll() {\n    const extensions = await this.contractWrapper.readContract.getAllExtensions();\n    return extensions;\n  }\n  async get(extensionName) {\n    const extension = await this.contractWrapper.readContract.getExtension(extensionName);\n    return extension;\n  }\n  async getExtensionAddress(extensionName) {\n    const extension = await this.get(extensionName);\n    return extension.metadata.implementation;\n  }\n  async getAllFunctions(extensionName) {\n    const extension = await this.get(extensionName);\n    return extension.functions;\n  }\n  async getExtensionForFunction(functionInput) {\n    let selector = functionInput.functionSelector;\n    if (!selector) {\n      invariant(functionInput.functionSignature, \"Atleast one of function selector and signature must be provided\");\n      selector = utils.id(functionInput.functionSignature).substring(0, 10);\n    }\n    const extensionMetadata = await this.contractWrapper.readContract.getMetadataForFunction(selector);\n    return extensionMetadata;\n  }\n  async getExtensionAddressForFunction(functionInput) {\n    const extensionMetadata = await this.getExtensionForFunction(functionInput);\n    return extensionMetadata.implementation;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Adds an extension to the contract\n   */\n  add = /* @__PURE__ */buildTransactionFunction(async inputArgs => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"addExtension\",\n      args: [inputArgs.extension],\n      parse: async receipt => {\n        const events = this.contractWrapper.parseLogs(\"ExtensionAdded\", receipt.logs);\n        if (events.length < 1) {\n          throw new Error(\"No ExtensionAdded event found\");\n        }\n        const extensionAbi = inputArgs.extensionAbi ? AbiSchema.parse(inputArgs.extensionAbi) : (await fetchContractMetadataFromAddress(inputArgs.extension.metadata.implementation, this.contractWrapper.getProvider(), this.contractWrapper.storage)).abi;\n        const abiToAdd = this.filterAbiForAdd(extensionAbi, inputArgs.extension);\n        const updatedAbi = joinABIs([AbiSchema.parse(this.contractWrapper.abi), abiToAdd]);\n        this.contractWrapper.updateAbi(updatedAbi);\n        return receipt;\n      }\n    });\n  });\n\n  /**\n   * Adds a deployed extension to the contract\n   */\n  addDeployed = /* @__PURE__ */buildTransactionFunction(async inputArgs => {\n    let extensionAbi = inputArgs.extensionAbi;\n    if (!extensionAbi) {\n      const metadata = await fetchContractMetadataFromAddress(inputArgs.extensionAddress, this.contractWrapper.getProvider(), this.contractWrapper.storage, this.contractWrapper.options);\n      extensionAbi = metadata.abi;\n    }\n    invariant(extensionAbi, \"Require extension ABI\");\n    let extensionMetadataUri = \"\";\n    if (inputArgs.extensionMetadata) {\n      if (typeof inputArgs.extensionMetadata === \"string\") {\n        extensionMetadataUri = inputArgs.extensionMetadata;\n      } else {\n        const parsedMetadata = await CommonContractSchema.parseAsync(inputArgs.extensionMetadata);\n        extensionMetadataUri = await this.contractWrapper.storage.upload(parsedMetadata);\n      }\n    }\n    const extensionFunctions = generateExtensionFunctions(AbiSchema.parse(extensionAbi));\n    const extension = {\n      metadata: {\n        name: inputArgs.extensionName,\n        metadataURI: extensionMetadataUri,\n        implementation: inputArgs.extensionAddress\n      },\n      functions: extensionFunctions\n    };\n    return this.add.prepare({\n      extension,\n      extensionAbi\n    });\n  });\n\n  /**\n   * Adds a published extension to the contract, and deploys it deterministically if necessary\n   */\n  addPublished = /* @__PURE__ */buildTransactionFunction(async inputArgs => {\n    const version = inputArgs.version || \"latest\";\n    const {\n      deployedExtensionAddress,\n      extensionMetadata\n    } = await this.deployExtension(inputArgs.extensionName, inputArgs.publisherAddress || THIRDWEB_DEPLOYER, version);\n    return this.addDeployed.prepare({\n      extensionName: inputArgs.extensionName,\n      extensionAddress: deployedExtensionAddress,\n      extensionMetadata: inputArgs.extensionMetadataOverride || extensionMetadata\n    });\n  });\n  replace = /* @__PURE__ */buildTransactionFunction(async inputArgs => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"replaceExtension\",\n      args: [inputArgs.extension],\n      parse: async receipt => {\n        const events = this.contractWrapper.parseLogs(\"ExtensionReplaced\", receipt.logs);\n        if (events.length < 1) {\n          throw new Error(\"No ExtensionReplaced event found\");\n        }\n        const extensionAbi = inputArgs.extensionAbi ? AbiSchema.parse(inputArgs.extensionAbi) : (await fetchContractMetadataFromAddress(inputArgs.extension.metadata.implementation, this.contractWrapper.getProvider(), this.contractWrapper.storage)).abi;\n        const contractAbi = this.filterAbiForRemove(AbiSchema.parse(this.contractWrapper.abi), extensionAbi);\n        const abiToAdd = this.filterAbiForAdd(extensionAbi, inputArgs.extension);\n        const updatedAbi = joinABIs([contractAbi, abiToAdd]);\n        this.contractWrapper.updateAbi(updatedAbi);\n        return receipt;\n      }\n    });\n  });\n  replaceDeployed = /* @__PURE__ */buildTransactionFunction(async inputArgs => {\n    let extensionAbi = inputArgs.extensionAbi;\n    if (!extensionAbi) {\n      const metadata = await fetchContractMetadataFromAddress(inputArgs.extensionAddress, this.contractWrapper.getProvider(), this.contractWrapper.storage, this.contractWrapper.options);\n      extensionAbi = metadata.abi;\n    }\n    invariant(extensionAbi, \"Require extension ABI\");\n    let extensionMetadataUri = \"\";\n    if (inputArgs.extensionMetadata) {\n      if (typeof inputArgs.extensionMetadata === \"string\") {\n        extensionMetadataUri = inputArgs.extensionMetadata;\n      } else {\n        const parsedMetadata = await CommonContractSchema.parseAsync(inputArgs.extensionMetadata);\n        extensionMetadataUri = await this.contractWrapper.storage.upload(parsedMetadata);\n      }\n    }\n    const extensionFunctions = generateExtensionFunctions(AbiSchema.parse(extensionAbi));\n    const extension = {\n      metadata: {\n        name: inputArgs.extensionName,\n        metadataURI: extensionMetadataUri,\n        implementation: inputArgs.extensionAddress\n      },\n      functions: extensionFunctions\n    };\n    return this.replace.prepare({\n      extension,\n      extensionAbi\n    });\n  });\n  replacePublished = /* @__PURE__ */buildTransactionFunction(async inputArgs => {\n    const version = inputArgs.version || \"latest\";\n    const {\n      deployedExtensionAddress,\n      extensionMetadata\n    } = await this.deployExtension(inputArgs.extensionName, inputArgs.publisherAddress || THIRDWEB_DEPLOYER, version);\n    return this.replaceDeployed.prepare({\n      extensionName: inputArgs.extensionName,\n      extensionAddress: deployedExtensionAddress,\n      extensionMetadata: inputArgs.extensionMetadataOverride || extensionMetadata\n    });\n  });\n  remove = /* @__PURE__ */buildTransactionFunction(async inputArgs => {\n    const extensionAddress = await this.getExtensionAddress(inputArgs.extensionName);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"removeExtension\",\n      args: [inputArgs.extensionName],\n      parse: async receipt => {\n        const events = this.contractWrapper.parseLogs(\"ExtensionRemoved\", receipt.logs);\n        if (events.length < 1) {\n          throw new Error(\"No ExtensionRemoved event found\");\n        }\n        const extensionAbi = (await fetchContractMetadataFromAddress(extensionAddress, this.contractWrapper.getProvider(), this.contractWrapper.storage)).abi;\n        const updatedAbi = this.filterAbiForRemove(AbiSchema.parse(this.contractWrapper.abi), extensionAbi);\n        this.contractWrapper.updateAbi(updatedAbi);\n        return receipt;\n      }\n    });\n  });\n\n  /** ******************************\n   * Internal / private\n   *******************************/\n\n  filterAbiForAdd(extensionAbi, extension) {\n    const extensionAbiInterface = new utils.Interface(extensionAbi);\n    const extensionFunctionSelectors = extension.functions.map(fn => fn.functionSelector);\n    const filtered = extensionAbi.filter(item => {\n      const fnFragment = Object.values(new utils.Interface([item]).functions);\n      if (fnFragment.length === 0) {\n        return false;\n      }\n      const fnSigHash = extensionAbiInterface.getSighash(fnFragment[0]);\n      return extensionFunctionSelectors.includes(fnSigHash);\n    });\n    return filtered;\n  }\n  filterAbiForRemove(fullAbi, abiToRemove) {\n    const fullAbiInterface = new utils.Interface(fullAbi);\n    const interfaceToRemove = new utils.Interface(abiToRemove);\n    const functionsToRemove = Object.values(interfaceToRemove.functions).map(fn => interfaceToRemove.getSighash(fn));\n    const filtered = fullAbi.filter(item => {\n      const fnFragment = Object.values(new utils.Interface([item]).functions);\n      if (fnFragment.length === 0) {\n        return false;\n      }\n      const fnSigHash = fullAbiInterface.getSighash(fnFragment[0]);\n      return !functionsToRemove.includes(fnSigHash);\n    });\n    return filtered;\n  }\n  async deployExtension(extensionName, publisherAddress) {\n    let version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"latest\";\n    const published = await fetchPublishedContractFromPolygon(publisherAddress, extensionName, version, this.contractWrapper.storage, this.contractWrapper.options.clientId, this.contractWrapper.options.secretKey);\n    const deploymentInfo = await getDeploymentInfo(published.metadataUri, this.contractWrapper.storage, this.contractWrapper.getProvider(), \"\", this.contractWrapper.options.clientId, this.contractWrapper.options.secretKey);\n    const implementationAddress = deploymentInfo.find(i => i.type === \"implementation\")?.transaction.predictedAddress;\n\n    // deploy infra + plugins + implementation using a throwaway Deployer contract\n\n    // filter out already deployed contracts (data is empty)\n    const transactionsToSend = deploymentInfo.filter(i => i.transaction.data && i.transaction.data.length > 0);\n    const transactionsforDirectDeploy = transactionsToSend.filter(i => {\n      return i.type !== \"infra\";\n    }).map(i => i.transaction);\n    const transactionsForThrowawayDeployer = transactionsToSend.filter(i => {\n      return i.type === \"infra\";\n    }).map(i => i.transaction);\n    const signer = this.contractWrapper.getSigner();\n    invariant(signer, \"Signer is required\");\n\n    // deploy via throwaway deployer, multiple infra contracts in one transaction\n    await deployWithThrowawayDeployer(signer, transactionsForThrowawayDeployer, {});\n\n    // send each transaction directly to Create2 factory\n    // process txns one at a time\n    for (const tx of transactionsforDirectDeploy) {\n      try {\n        await deployContractDeterministic(signer, tx);\n      } catch (e) {\n        console.debug(`Error deploying contract at ${tx.predictedAddress}`, e?.message);\n      }\n    }\n    return {\n      deployedExtensionAddress: implementationAddress,\n      extensionMetadata: published.metadataUri\n    };\n  }\n}\n\n/**\n * @public\n */\nclass Airdrop20 {\n  featureName = FEATURE_AIRDROP_ERC20.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * @internal\n   */\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Perform airdrop of ERC20 tokens\n   *\n   * @example\n   * ```javascript\n   * // Airdrop content array, with recipients and token amounts\n   * const contents = [\n   *      {\n   *        recipient: \"0xabc...\", // first recipient address\n   *        amount: \"10\" // number of tokens in wei units\n   *      },\n   *      {\n   *        recipient: \"0x123...\", // second recipient address\n   *        amount: \"20\" // number of tokens in wei units\n   *      }\n   *   ]\n   *\n   * const tokenAddress = \"0x...\" // Address of the ERC20 token being airdropped\n   * const tokenOwner = \"0x...\" // Address of the owner of the tokens being airdropped\n   *\n   * const output = await contract.airdrop20.drop(tokenAddress, tokenOwner, contents);\n   *\n   * // the `output` return value above contains:\n   * //     - count of successful and failed drops\n   * //     - array containing failed drops, if any\n   *\n   * ```\n   * @param tokenAddress - Address of the ERC20 token being airdropped\n   * @param tokenOwner - Address of the owner of the tokens being airdropped\n   * @param contents - Array of airdrop contents\n   *\n   * @returns An array of recipients for who the airdrop failed (empty means all transfers were successful)\n   * @twfeature AirdropERC20\n   */\n  drop = /* @__PURE__ */buildTransactionFunction(async (tokenAddress, tokenOwner, contents) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"airdropERC20\",\n      args: [tokenAddress, tokenOwner, contents],\n      parse: receipt => {\n        const events = this.contractWrapper.parseLogs(\"AirdropFailed\", receipt.logs);\n        const failedDrops = events.map(e => {\n          return {\n            recipient: e.args.recipient,\n            amount: e.args.amount.toString()\n          };\n        });\n        return {\n          successfulDropCount: contents.length - failedDrops.length,\n          failedDropCount: failedDrops.length,\n          failedDrops\n        };\n      }\n    });\n  });\n}\n\n/**\n * @public\n */\nclass Airdrop721 {\n  featureName = FEATURE_AIRDROP_ERC721.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * @internal\n   */\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Perform airdrop of ERC721 tokens\n   *\n   * @example\n   * ```javascript\n   * // Airdrop content array, with recipients and tokenIds\n   * const contents = [\n   *      {\n   *        recipient: \"0xabc...\", // first recipient address\n   *        tokenId: 0\n   *      },\n   *      {\n   *        recipient: \"0x123...\", // second recipient address\n   *        tokenId: 2\n   *      }\n   *   ]\n   *\n   * const tokenAddress = \"0x...\" // Address of the ERC721 token being airdropped\n   * const tokenOwner = \"0x...\" // Address of the owner of the tokens being airdropped\n   *\n   * const output = await contract.airdrop721.drop(tokenAddress, tokenOwner, contents);\n   *\n   * // the `output` return value above contains:\n   * //     - count of successful and failed drops\n   * //     - array containing failed drops, if any\n   *\n   * ```\n   * @param tokenAddress - Address of the ERC721 token being airdropped\n   * @param tokenOwner - Address of the owner of the tokens being airdropped\n   * @param contents - Array of recipients and tokenIds to airdrop\n   *\n   * @returns An array of recipients for who the airdrop failed (empty means all transfers were successful)\n   * @twfeature AirdropERC721\n   */\n  drop = /* @__PURE__ */buildTransactionFunction(async (tokenAddress, tokenOwner, contents) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"airdropERC721\",\n      args: [tokenAddress, tokenOwner, contents],\n      parse: receipt => {\n        const events = this.contractWrapper.parseLogs(\"AirdropFailed\", receipt.logs);\n        const failedDrops = events.map(e => {\n          return {\n            recipient: e.args.recipient,\n            tokenId: e.args.tokenId.toNumber()\n          };\n        });\n        return {\n          successfulDropCount: contents.length - failedDrops.length,\n          failedDropCount: failedDrops.length,\n          failedDrops\n        };\n      }\n    });\n  });\n}\n\n/**\n * @public\n */\nclass Airdrop1155 {\n  featureName = FEATURE_AIRDROP_ERC1155.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * @internal\n   */\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Perform airdrop of ERC1155 tokens\n   *\n   * @example\n   * ```javascript\n   * // Airdrop content array, with recipients and tokenIds\n   * const contents = [\n   *      {\n   *        recipient: \"0xabc...\", // first recipient address\n   *        tokenId: 0,\n   *        amount: \"10\" // number of tokens\n   *      },\n   *      {\n   *        recipient: \"0x123...\", // second recipient address\n   *        tokenId: 0\n   *        amount: \"20\" // number of tokens\n   *      }\n   *   ]\n   *\n   * const tokenAddress = \"0x...\" // Address of the ERC1155 token being airdropped\n   * const tokenOwner = \"0x...\" // Address of the owner of the tokens being airdropped\n   *\n   * const output = await contract.airdrop1155.drop(tokenAddress, tokenOwner, contents);\n   *\n   * // the `output` return value above contains:\n   * //     - count of successful and failed drops\n   * //     - array containing failed drops, if any\n   *\n   * ```\n   * @param tokenAddress - Address of the ERC1155 token being airdropped\n   * @param tokenOwner - Address of the owner of the tokens being airdropped\n   * @param contents - Array of recipients and tokenIds to airdrop\n   *\n   * @returns An array of recipients for who the airdrop failed (empty means all transfers were successful)\n   * @twfeature AirdropERC1155\n   */\n  drop = /* @__PURE__ */buildTransactionFunction(async (tokenAddress, tokenOwner, contents) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"airdropERC1155\",\n      args: [tokenAddress, tokenOwner, contents],\n      parse: receipt => {\n        const events = this.contractWrapper.parseLogs(\"AirdropFailed\", receipt.logs);\n        const failedDrops = events.map(e => {\n          return {\n            recipient: e.args.recipient,\n            tokenId: e.args.tokenId.toNumber(),\n            amount: e.args.amount.toString()\n          };\n        });\n        return {\n          successfulDropCount: contents.length - failedDrops.length,\n          failedDropCount: failedDrops.length,\n          failedDrops\n        };\n      }\n    });\n  });\n}\n\nexport { Account as A, ContractPublishedMetadata as C, DEFAULT_PERMISSIONS as D, ExtensionManager as E, PermissionSnapshotSchema as P, SignerPermissionsSchema as S, AccountFactory as a, Airdrop20 as b, Airdrop721 as c, Airdrop1155 as d, extractEventsFromAbi as e, AdminFlag as f, SignerPermissionRequestV1 as g, SignerPermissionRequest as h };\n","import { a as assertEnabled } from './assertEnabled-d1700f0b.browser.esm.js';\nimport { a as ContractEvents, G as GasCostEstimator, C as ContractMetadata, d as detectContractFeature, b as ContractAppURI } from './contract-appuri-5c40af52.browser.esm.js';\nimport { bj as AbiSchema, d5 as FEATURE_ROYALTY, d4 as FEATURE_PERMISSIONS, d7 as FEATURE_PRIMARY_SALE, du as FEATURE_PLATFORM_FEE, d6 as FEATURE_OWNER, cI as FEATURE_TOKEN, c$ as FEATURE_NFT, dj as FEATURE_EDITION, cK as FEATURE_APPURI, dA as FEATURE_DIRECT_LISTINGS, dB as FEATURE_ENGLISH_AUCTIONS, dC as FEATURE_OFFERS, dr as FEATURE_AIRDROP_ERC20, ds as FEATURE_AIRDROP_ERC721, dt as FEATURE_AIRDROP_ERC1155, dp as FEATURE_ACCOUNT_FACTORY, dn as FEATURE_ACCOUNT, dq as FEATURE_DYNAMIC_CONTRACT, cs as ContractWrapper, bg as CustomContractSchema, G as ALL_ROLES } from './index-33cd3415.browser.esm.js';\nimport { C as ContractPublishedMetadata, E as ExtensionManager, b as Airdrop20, c as Airdrop721, d as Airdrop1155, a as AccountFactory, A as Account } from './airdrop-erc1155-f9016b81.browser.esm.js';\nimport { C as ContractEncoder } from './fetchCurrencyValue-32d08b05.browser.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\nimport { C as ContractRoyalty, a as ContractOwner } from './contract-owner-49e75547.browser.esm.js';\nimport { C as ContractPlatformFee } from './contract-platform-fee-e756e68f.browser.esm.js';\nimport { C as ContractRoles } from './contract-roles-71988d2e.browser.esm.js';\nimport { C as ContractPrimarySale } from './contract-sales-918c7cb8.browser.esm.js';\nimport { E as Erc1155 } from './erc-1155-7ce9bee1.browser.esm.js';\nimport { E as Erc20 } from './erc-20-9a18a51c.browser.esm.js';\nimport { E as Erc721 } from './erc-721-27306550.browser.esm.js';\nimport { M as MarketplaceV3DirectListings, a as MarketplaceV3EnglishAuctions, b as MarketplaceV3Offers } from './marketplacev3-offers-ce1f096b.browser.esm.js';\nimport { T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport 'ethers';\nimport 'zod';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport './signature-d3ea643d.browser.esm.js';\nimport './normalizePriceValue-9851c0eb.browser.esm.js';\nimport '@thirdweb-dev/merkletree';\nimport './setErc20Allowance-7f76f677.browser.esm.js';\nimport 'uuid';\nimport './fetchSourceFilesFromMetadata-906c835e.browser.esm.js';\nimport './deployContractDeterministic-7823c15c.browser.esm.js';\nimport './QueryParams-32a56510.browser.esm.js';\nimport 'fast-deep-equal';\nimport './drop-claim-conditions-e6f2abbf.browser.esm.js';\nimport './cleanCurrencyAddress-ded19cfe.browser.esm.js';\nimport './marketplace-e3129e2f.browser.esm.js';\n\n/**\n * Custom contract dynamic class with feature detection\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(provider);\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n *\n * // call any function in your contract\n * await contract.call(\"myCustomFunction\", [param1, param2]);\n *\n * // if your contract follows an ERC standard, contract.ercXYZ will be present\n * const allNFTs = await contract.erc721.getAll()\n *\n * // if your contract extends a particular contract extension, the corresponding function will be available\n * const tx = await contract.erc721.mint({\n *     name: \"Cool NFT\",\n *     image: readFileSync(\"some_image.png\"),\n *   });\n * ```\n *\n * @contract\n * @public\n */\nclass SmartContract {\n  // utilities\n\n  get abi() {\n    return AbiSchema.parse(this.contractWrapper.abi || []);\n  }\n\n  /**\n   * Handle royalties\n   */\n  get royalties() {\n    return assertEnabled(this.detectRoyalties(), FEATURE_ROYALTY);\n  }\n\n  /**\n   * Handle permissions\n   */\n  get roles() {\n    return assertEnabled(this.detectRoles(), FEATURE_PERMISSIONS);\n  }\n\n  /**\n   * Handle primary sales\n   */\n  get sales() {\n    return assertEnabled(this.detectPrimarySales(), FEATURE_PRIMARY_SALE);\n  }\n\n  /**\n   * Handle platform fees\n   */\n  get platformFees() {\n    return assertEnabled(this.detectPlatformFees(), FEATURE_PLATFORM_FEE);\n  }\n\n  /**\n   * Set and get the owner of the contract\n   */\n  get owner() {\n    return assertEnabled(this.detectOwnable(), FEATURE_OWNER);\n  }\n\n  /**\n   * Auto-detects ERC20 standard functions.\n   */\n  get erc20() {\n    return assertEnabled(this.detectErc20(), FEATURE_TOKEN);\n  }\n\n  /**\n   * Auto-detects ERC721 standard functions.\n   */\n  get erc721() {\n    return assertEnabled(this.detectErc721(), FEATURE_NFT);\n  }\n\n  /**\n   * Auto-detects ERC1155 standard functions.\n   */\n  get erc1155() {\n    return assertEnabled(this.detectErc1155(), FEATURE_EDITION);\n  }\n\n  /**\n   * Auto-detects AppURI standard functions.\n   */\n  get app() {\n    return assertEnabled(this.detectApp(), FEATURE_APPURI);\n  }\n\n  /**\n   * Direct listings\n   * @remarks Create and manage direct listings in your marketplace.\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // The price to pay per unit of NFTs listed.\n   *   pricePerToken: 1.5,\n   *   // when should the listing open up for offers\n   *   startTimestamp: new Date(Date.now()),\n   *   // how long the listing will be open for\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   *   // Whether the listing is reserved for a specific set of buyers.\n   *   isReservedListing: false\n   * }\n   *\n   * const tx = await contract.directListings.createListing(listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   *\n   * // And on the buyers side:\n   * // The ID of the listing you want to buy from\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await contract.directListings.buyFromListing(listingId, quantityDesired);\n   * ```\n   */\n  get directListings() {\n    return assertEnabled(this.detectDirectListings(), FEATURE_DIRECT_LISTINGS);\n  }\n  /**\n   * Auctions\n   * @remarks Create and manage auctions in your marketplace.\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract of the asset you want to auction\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to auction\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to auction\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the auctioned tokens\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // the minimum bid that will be accepted for the token\n   *   minimumBidAmount: \"1.5\",\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutBidAmount: \"10\",\n   *   // If a bid is made less than these many seconds before expiration, the expiration time is increased by this.\n   *   timeBufferInSeconds: \"1000\",\n   *   // A bid must be at least this much bps greater than the current winning bid\n   *   bidBufferBps: \"100\", // 100 bps stands for 1%\n   *   // when should the auction open up for bidding\n   *   startTimestamp: new Date(Date.now()),\n   *   // end time of auction\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   * }\n   *\n   * const tx = await contract.englishAuctions.createAuction(auction);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created auction\n   *\n   * // And on the buyers side:\n   * // The auction ID of the asset you want to bid on\n   * const auctionId = 0;\n   * // The total amount you are willing to bid for auctioned tokens\n   * const bidAmount = 1;\n   *\n   * await contract.englishAuctions.makeBid(auctionId, bidAmount);\n   * ```\n   */\n  get englishAuctions() {\n    return assertEnabled(this.detectEnglishAuctions(), FEATURE_ENGLISH_AUCTIONS);\n  }\n\n  /**\n   * Offers\n   * @remarks Make and manage offers.\n   * @example\n   * ```javascript\n   * // Data of the offer you want to make\n   * const offer = {\n   *   // address of the contract the asset you want to make an offer for\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to buy\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to buy\n   *   quantity: 1,\n   *   // address of the currency contract that you offer to pay in\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // Total price you offer to pay for the mentioned token(s)\n   *   totalPrice: \"1.5\",\n   *   // Offer valid until\n   *   endTimestamp: new Date(),\n   * }\n   *\n   * const tx = await contract.offers.makeOffer(offer);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created offer\n   *\n   * // And on the seller's side:\n   * // The ID of the offer you want to accept\n   * const offerId = 0;\n   * await contract.offers.acceptOffer(offerId);\n   * ```\n   */\n  get offers() {\n    return assertEnabled(this.detectOffers(), FEATURE_OFFERS);\n  }\n  get airdrop20() {\n    return assertEnabled(this.detectAirdrop20(), FEATURE_AIRDROP_ERC20);\n  }\n  get airdrop721() {\n    return assertEnabled(this.detectAirdrop721(), FEATURE_AIRDROP_ERC721);\n  }\n  get airdrop1155() {\n    return assertEnabled(this.detectAirdrop1155(), FEATURE_AIRDROP_ERC1155);\n  }\n\n  /**\n   * Account Factory\n   *\n   * @remarks Create accounts and fetch data about them.\n   * @example\n   * ```javascript\n   *\n   * // Predict the address of the account that will be created for an admin.\n   * const deterministicAddress = await contract.accountFactory.predictAccountAddress(admin, extraData);\n   *\n   * // Create accounts\n   * const tx = await contract.accountFactory.createAccount(admin, extraData);\n   * // the same as `deterministicAddress`\n   * const accountAddress = tx.address;\n   *\n   * // Get all accounts created by the factory\n   * const allAccounts = await contract.accountFactory.getAllAccounts();\n   *\n   * // Get all accounts on which a signer has been given authority.\n   * const associatedAccounts = await contract.accountFactory.getAssociatedAccounts(signer);\n   *\n   * // Get all signers who have been given authority on a account.\n   * const associatedSigners = await contract.accountFactory.getAssociatedSigners(accountAddress);\n   *\n   * // Check whether a account has already been created for a given admin.\n   * const isAccountDeployed = await contract.accountFactory.isAccountDeployed(admin, extraData);\n   * ```\n   */\n  get accountFactory() {\n    return assertEnabled(this.detectAccountFactory(), FEATURE_ACCOUNT_FACTORY);\n  }\n\n  // TODO documentation\n  get account() {\n    return assertEnabled(this.detectAccount(), FEATURE_ACCOUNT);\n  }\n  get extensions() {\n    return assertEnabled(this.detectBaseRouter(), FEATURE_DYNAMIC_CONTRACT);\n  }\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, abi, storage) {\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    this._chainId = chainId;\n    this.storage = storage;\n    this.contractWrapper = contractWrapper;\n    this.events = new ContractEvents(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.publishedMetadata = new ContractPublishedMetadata(this.contractWrapper, this.storage);\n    this.metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /**\n   * Prepare a transaction for sending\n   */\n  prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * Call any function on this contract\n   * @example\n   * ```javascript\n   * // read functions will return the data from the contract\n   * const myValue = await contract.call(\"myReadFunction\");\n   * console.log(myValue);\n   *\n   * // write functions will return the transaction receipt\n   * const tx = await contract.call(\"myWriteFunction\", [arg1, arg2]);\n   * const receipt = tx.receipt;\n   *\n   * // Optionally override transaction options\n   * await contract.call(\"myWriteFunction\", [arg1, arg2], {\n   *  gasLimit: 1000000, // override default gas limit\n   *  value: ethers.utils.parseEther(\"0.1\"), // send 0.1 ether with the contract call\n   * };\n   * ```\n   * @param functionName - the name of the function to call\n   * @param args - the arguments of the function\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n\n  /** ********************\n   * FEATURE DETECTION\n   * ********************/\n\n  detectRoyalties() {\n    if (detectContractFeature(this.contractWrapper, \"Royalty\")) {\n      // ContractMetadata is stateless, it's fine to create a new one here\n      // This also makes it not order dependent in the feature detection process\n      const metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n      return new ContractRoyalty(this.contractWrapper, metadata);\n    }\n    return undefined;\n  }\n  detectRoles() {\n    if (detectContractFeature(this.contractWrapper, \"Permissions\")) {\n      return new ContractRoles(this.contractWrapper, ALL_ROLES);\n    }\n    return undefined;\n  }\n  detectPrimarySales() {\n    if (detectContractFeature(this.contractWrapper, \"PrimarySale\")) {\n      return new ContractPrimarySale(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectPlatformFees() {\n    if (detectContractFeature(this.contractWrapper, \"PlatformFee\")) {\n      return new ContractPlatformFee(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc20() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20\")) {\n      return new Erc20(this.contractWrapper, this.storage, this.chainId);\n    }\n    return undefined;\n  }\n  detectErc721() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721\")) {\n      return new Erc721(this.contractWrapper, this.storage, this.chainId);\n    }\n    return undefined;\n  }\n  detectErc1155() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155\")) {\n      return new Erc1155(this.contractWrapper, this.storage, this.chainId);\n    }\n    return undefined;\n  }\n  detectOwnable() {\n    if (detectContractFeature(this.contractWrapper, \"Ownable\")) {\n      return new ContractOwner(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectApp() {\n    const metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n    if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\n      return new ContractAppURI(this.contractWrapper, metadata, this.storage);\n    } else if (detectContractFeature(this.contractWrapper, \"ContractMetadata\")) {\n      return new ContractAppURI(this.contractWrapper, metadata, this.storage);\n    }\n    return undefined;\n  }\n  detectDirectListings() {\n    if (detectContractFeature(this.contractWrapper, \"DirectListings\")) {\n      return new MarketplaceV3DirectListings(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectEnglishAuctions() {\n    if (detectContractFeature(this.contractWrapper, \"EnglishAuctions\")) {\n      return new MarketplaceV3EnglishAuctions(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectOffers() {\n    if (detectContractFeature(this.contractWrapper, \"Offers\")) {\n      return new MarketplaceV3Offers(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectBaseRouter() {\n    if (detectContractFeature(this.contractWrapper, FEATURE_DYNAMIC_CONTRACT.name)) {\n      return new ExtensionManager(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectAirdrop20() {\n    if (detectContractFeature(this.contractWrapper, \"AirdropERC20\")) {\n      return new Airdrop20(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectAirdrop721() {\n    if (detectContractFeature(this.contractWrapper, \"AirdropERC721\")) {\n      return new Airdrop721(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectAirdrop1155() {\n    if (detectContractFeature(this.contractWrapper, \"AirdropERC1155\")) {\n      return new Airdrop1155(this.contractWrapper);\n    }\n    return undefined;\n  }\n\n  // ========== Account features ==========\n\n  detectAccountFactory() {\n    if (detectContractFeature(this.contractWrapper, FEATURE_ACCOUNT_FACTORY.name)) {\n      return new AccountFactory(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectAccount() {\n    if (detectContractFeature(this.contractWrapper, FEATURE_ACCOUNT.name)) {\n      return new Account(this.contractWrapper);\n    }\n    return undefined;\n  }\n}\n\nexport { SmartContract };\n","import { f as buildTransactionFunction, T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport { d7 as FEATURE_PRIMARY_SALE } from './index-33cd3415.browser.esm.js';\n\n/**\n * Handle primary sales recipients\n * @remarks Configure primary sale recipients for an entire contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const salesRecipient = await contract.sales.getRecipient();\n * await contract.sales.setRecipient(recipientWalletAddress);\n * ```\n * @public\n */\nclass ContractPrimarySale {\n  featureName = FEATURE_PRIMARY_SALE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the primary sale recipient\n   * @returns The wallet address.\n   * @example\n   * ```javascript\n   * const salesRecipient = await contract.sales.getRecipient();\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  async getRecipient() {\n    const result = await this.contractWrapper.read(\"primarySaleRecipient\", []);\n    return result;\n  }\n\n  /**\n   * Set the primary sale recipient\n   * @param recipient - the wallet address\n   * @example\n   * ```javascript\n   * await contract.sales.setRecipient(recipientWalletAddress);\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  setRecipient = /* @__PURE__ */buildTransactionFunction(async recipient => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPrimarySaleRecipient\",\n      args: [recipient]\n    });\n  });\n}\n\nexport { ContractPrimarySale as C };\n"],"names":["AdminFlag","DEFAULT_PERMISSIONS","startDate","BigNumber","from","expirationDate","approvedCallTargets","nativeTokenLimitPerTransaction","SignerPermissionsSchema","z","object","StartDateSchema","EndDateSchema","AmountSchema","default","union","array","AddressOrEnsSchema","literal","PermissionSnapshotSchema","signer","makeAdmin","boolean","permissions","SignerPermissionRequestV1","name","type","SignerPermissionRequest","AccountPermissions","featureName","FEATURE_ACCOUNT_PERMISSIONS","constructor","contractWrapper","this","getAddress","address","hasDuplicateSigners","snapshot","checkedSigner","signers","map","item","parseSignerPermissionsStruct","Date","parseInt","startTimestamp","toString","endTimestamp","approvedTargets","sendSignerPermissionRequest","signerAddress","adminFlag","payload","signature","generatePayload","Transaction","fromContractWrapper","method","args","isAdmin","valueOf","AddressZero","utils","permissionStartTimestamp","permissionEndTimestamp","reqValidityStartTimestamp","reqValidityEndTimestamp","Math","floor","now","getTime","uid","resolveOrGenerateId","undefined","chainId","getChainID","connectedSigner","getSigner","invariant","signTypedData","version","verifyingContract","generateLegacyPayload","Error","resolvedSignerAddress","resolveAddress","read","isSigner","getAllAdmins","getAllSigners","activeSignersWithPerms","Promise","all","async","signerWithPermissions","getAllAdminsAndSigners","admin","grantAdminPermissions","buildTransactionFunction","AddAdmin","revokeAdminPermissions","RemoveAdmin","grantPermissions","resolvedPermissions","parseAsync","None","updatePermissions","revokeAccess","approveTargetForSigner","target","resolvedTarget","includes","newTargets","disapproveTargetForSigner","filter","approvedTarget","resetAllPermissions","resolvedSnapshot","permissionSnapshot","removeAdminData","addOrUpdateSignerData","removeSignerData","allAdmins","allToMakeAdmin","forEach","data","encode","push","allSigners","allToMakeSigners","member","Account","FEATURE_ACCOUNT","accountPermissions","detectAccountPermissions","detectContractFeature","assertEnabled","prepare","AccountFactory","FEATURE_ACCOUNT_FACTORY","events","ContractEvents","predictAccountAddress","extraData","getAssociatedAccounts","getAllAccounts","isAccountDeployed","addr","isContractDeployed","getProvider","createAccount","accountAdmin","parse","receipt","parseLogs","logs","account","ContractPublishedMetadata","storage","get","_cachedMetadata","fetchContractMetadataFromAddress","options","extractSources","publishedMetadata","fetchSourceFilesFromMetadata","extractFunctions","e","extractFunctionsFromAbi","AbiSchema","abi","metadata","extractEvents","el","parsed","doc","extractCommentFromMetadata","inputs","outputs","comment","extractEventsFromAbi","ExtensionManager","FEATURE_DYNAMIC_CONTRACT","readContract","getAll","getAllExtensions","extensionName","getExtension","getExtensionAddress","implementation","getAllFunctions","functions","getExtensionForFunction","functionInput","selector","functionSelector","functionSignature","substring","getMetadataForFunction","getExtensionAddressForFunction","add","inputArgs","extension","length","extensionAbi","abiToAdd","filterAbiForAdd","updatedAbi","joinABIs","updateAbi","addDeployed","extensionAddress","extensionMetadataUri","extensionMetadata","parsedMetadata","CommonContractSchema","upload","extensionFunctions","generateExtensionFunctions","metadataURI","addPublished","deployedExtensionAddress","deployExtension","publisherAddress","THIRDWEB_DEPLOYER","extensionMetadataOverride","replace","contractAbi","filterAbiForRemove","replaceDeployed","replacePublished","remove","extensionAbiInterface","extensionFunctionSelectors","fn","fnFragment","Object","values","fnSigHash","getSighash","fullAbi","abiToRemove","fullAbiInterface","interfaceToRemove","functionsToRemove","arguments","published","fetchPublishedContractFromPolygon","clientId","secretKey","deploymentInfo","getDeploymentInfo","metadataUri","implementationAddress","find","i","transaction","predictedAddress","transactionsToSend","transactionsforDirectDeploy","transactionsForThrowawayDeployer","deployWithThrowawayDeployer","tx","deployContractDeterministic","console","debug","message","Airdrop20","FEATURE_AIRDROP_ERC20","drop","tokenAddress","tokenOwner","contents","failedDrops","recipient","amount","successfulDropCount","failedDropCount","Airdrop721","FEATURE_AIRDROP_ERC721","tokenId","toNumber","Airdrop1155","FEATURE_AIRDROP_ERC1155","SmartContract","royalties","detectRoyalties","FEATURE_ROYALTY","roles","detectRoles","FEATURE_PERMISSIONS","sales","detectPrimarySales","FEATURE_PRIMARY_SALE","platformFees","detectPlatformFees","FEATURE_PLATFORM_FEE","owner","detectOwnable","FEATURE_OWNER","erc20","detectErc20","FEATURE_TOKEN","erc721","detectErc721","FEATURE_NFT","erc1155","detectErc1155","FEATURE_EDITION","app","detectApp","FEATURE_APPURI","directListings","detectDirectListings","FEATURE_DIRECT_LISTINGS","englishAuctions","detectEnglishAuctions","FEATURE_ENGLISH_AUCTIONS","offers","detectOffers","FEATURE_OFFERS","airdrop20","detectAirdrop20","airdrop721","detectAirdrop721","airdrop1155","detectAirdrop1155","accountFactory","detectAccountFactory","detectAccount","extensions","detectBaseRouter","_chainId","network","ContractWrapper","encoder","ContractEncoder","interceptor","ContractInterceptor","estimator","GasCostEstimator","ContractMetadata","CustomContractSchema","onNetworkUpdated","updateSignerOrProvider","overrides","call","functionName","ContractRoyalty","ContractRoles","ALL_ROLES","ContractPrimarySale","ContractPlatformFee","Erc20","Erc721","Erc1155","ContractOwner","ContractAppURI","MarketplaceV3DirectListings","MarketplaceV3EnglishAuctions","MarketplaceV3Offers","getRecipient","setRecipient"],"sourceRoot":""}