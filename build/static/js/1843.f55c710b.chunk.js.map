{"version":3,"file":"static/js/1843.f55c710b.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/assertEnabled-d1700f0b.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/setErc20Allowance-7f76f677.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/QueryParams-32a56510.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/marketplacev3-ef469d89.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/contract-interceptor-d7b164a7.browser.esm.js"],"sourcesContent":["import { BigNumber } from 'ethers';\nimport { z } from 'zod';\nimport { x as ExtensionNotImplementedError } from './index-33cd3415.browser.esm.js';\n\nconst RawDateSchema = /* @__PURE__ */(() => z.union([z.date().transform(i => {\n  return BigNumber.from(Math.floor(i.getTime() / 1000));\n}), z.number().transform(i => {\n  return BigNumber.from(i);\n})]))();\n\n/**\n * Default to now\n */\nconst StartDateSchema = /* @__PURE__ */(() => RawDateSchema.default(new Date(0)))();\n\n/**\n * Default to 10 years from now\n */\nconst EndDateSchema = /* @__PURE__ */(() => RawDateSchema.default(new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10)))();\n\n/**\n * Checks whether the given DetectableFeature is defined\n * @internal\n * @param namespace - The namespace to check\n * @param feature - The corresponding feature\n */\nfunction assertEnabled(namespace, feature) {\n  if (!namespace) {\n    throw new ExtensionNotImplementedError(feature);\n  }\n  return namespace;\n}\n\nexport { EndDateSchema as E, RawDateSchema as R, StartDateSchema as S, assertEnabled as a };\n","import { cx as BigNumberTransformSchema, cy as FileOrBufferOrStringSchema, cz as HexColor, cs as ContractWrapper } from './index-33cd3415.browser.esm.js';\nimport { z } from 'zod';\nimport { i as isNativeToken } from './fetchCurrencyValue-32d08b05.browser.esm.js';\n\nconst PropertiesInput = /* @__PURE__ */(() => z.object({}).catchall(z.union([BigNumberTransformSchema, z.unknown()])))();\n\n/**\n * @internal\n */\nconst OptionalPropertiesInput = /* @__PURE__ */(() => z.union([z.array(z.array(PropertiesInput)).transform(i => i.flat()), z.array(PropertiesInput), PropertiesInput]).optional().nullable())();\n\n/**\n * @internal\n */\nconst BasicNFTInput = /* @__PURE__ */(() => z.object({\n  name: z.union([z.string(), z.number()]).optional().nullable(),\n  description: z.string().nullable().optional().nullable(),\n  image: FileOrBufferOrStringSchema.nullable().optional(),\n  animation_url: FileOrBufferOrStringSchema.optional().nullable()\n}))();\n\n/**\n * @internal\n */\nconst CommonNFTInput = /* @__PURE__ */(() => BasicNFTInput.extend({\n  external_url: FileOrBufferOrStringSchema.nullable().optional(),\n  background_color: HexColor.optional().nullable(),\n  properties: OptionalPropertiesInput,\n  attributes: OptionalPropertiesInput\n}).catchall(z.union([BigNumberTransformSchema, z.unknown()])))();\n\n/**\n * @internal\n */\nconst NFTInputOrUriSchema = /* @__PURE__ */(() => z.union([CommonNFTInput, z.string()]))();\n\n/**\n * @internal\n */\nconst CommonNFTOutput = /* @__PURE__ */(() => CommonNFTInput.extend({\n  id: z.string(),\n  uri: z.string(),\n  image: z.string().nullable().optional(),\n  external_url: z.string().nullable().optional(),\n  animation_url: z.string().nullable().optional()\n}))();\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @internal\n */\nasync function setErc20Allowance(contractToApprove, value, currencyAddress, overrides) {\n  if (isNativeToken(currencyAddress)) {\n    overrides[\"value\"] = value;\n  } else {\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n    const signer = contractToApprove.getSigner();\n    const provider = contractToApprove.getProvider();\n    const erc20 = new ContractWrapper(signer || provider, currencyAddress, ERC20Abi, contractToApprove.options, contractToApprove.storage);\n    const owner = await contractToApprove.getSignerAddress();\n    const spender = contractToApprove.address;\n    const allowance = await erc20.read(\"allowance\", [owner, spender]);\n    if (allowance.lt(value)) {\n      // approve overrides the previous allowance, set it to the minimum required for this tx\n      await erc20.sendTransaction(\"approve\", [spender, value]);\n    }\n    return overrides;\n  }\n}\n\nexport { BasicNFTInput as B, CommonNFTInput as C, NFTInputOrUriSchema as N, CommonNFTOutput as a, setErc20Allowance as s };\n","import { a as CommonNFTOutput, C as CommonNFTInput } from './setErc20Allowance-7f76f677.browser.esm.js';\nimport { utils, BigNumber, Contract } from 'ethers';\nimport 'zod';\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\nconst InterfaceId_IERC721 = /* @__PURE__ */(() => utils.arrayify(\"0x80ac58cd\"))();\n\n/**\n * @internal\n */\nconst InterfaceId_IERC1155 = /* @__PURE__ */(() => utils.arrayify(\"0xd9b67a26\"))();\n\nconst FALLBACK_METADATA = {\n  name: \"Failed to load NFT metadata\"\n};\n\n/**\n * fetches the token metadata\n * @param tokenId - the id (to get it back in the output)\n * @param tokenUri - the uri to fetch\n * @param storage - which storage to fetch from\n *\n * @internal\n */\nasync function fetchTokenMetadata(tokenId, tokenUri, storage) {\n  // check for base64 encoded JSON\n  if (tokenUri.startsWith(\"data:application/json;base64\") && typeof Buffer !== \"undefined\") {\n    const base64 = tokenUri.split(\",\")[1];\n    const jsonMetadata = JSON.parse(Buffer.from(base64, \"base64\").toString(\"utf-8\"));\n    return CommonNFTOutput.parse({\n      ...jsonMetadata,\n      id: BigNumber.from(tokenId).toString(),\n      uri: tokenUri\n    });\n  }\n  // handle dynamic id URIs (2 possible formats)\n  const parsedUri = tokenUri.replace(\"{id}\", utils.hexZeroPad(BigNumber.from(tokenId).toHexString(), 32).slice(2));\n  let jsonMetadata;\n  try {\n    jsonMetadata = await storage.downloadJSON(parsedUri);\n  } catch (err) {\n    const unparsedTokenIdUri = tokenUri.replace(\"{id}\", BigNumber.from(tokenId).toString());\n    try {\n      jsonMetadata = await storage.downloadJSON(unparsedTokenIdUri);\n    } catch (e) {\n      console.warn(`failed to get token metadata: ${JSON.stringify({\n        tokenId: tokenId.toString(),\n        tokenUri\n      })} -- falling back to default metadata`);\n      jsonMetadata = FALLBACK_METADATA;\n    }\n  }\n  return CommonNFTOutput.parse({\n    ...jsonMetadata,\n    id: BigNumber.from(tokenId).toString(),\n    uri: tokenUri\n  });\n}\n\n// Used for marketplace to fetch NFT metadata from contract address + tokenId\n/**\n * @internal\n * @param contractAddress - the contract address\n * @param provider - the provider to use\n * @param tokenId - the token id\n * @param storage - the storage to use\n */\nasync function fetchTokenMetadataForContract(contractAddress, provider, tokenId, storage) {\n  let uri;\n  const ERC165MetadataAbi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC165.json')).default;\n  const erc165 = new Contract(contractAddress, ERC165MetadataAbi, provider);\n  const [isERC721, isERC1155] = await Promise.all([erc165.supportsInterface(InterfaceId_IERC721), erc165.supportsInterface(InterfaceId_IERC1155)]);\n  if (isERC721) {\n    const ERC721MetadataAbi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json')).default;\n    const erc721 = new Contract(contractAddress, ERC721MetadataAbi, provider);\n    uri = await erc721.tokenURI(tokenId);\n  } else if (isERC1155) {\n    const ERC1155MetadataAbi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json')).default;\n    const erc1155 = new Contract(contractAddress, ERC1155MetadataAbi, provider);\n    uri = await erc1155.uri(tokenId);\n  } else {\n    throw Error(\"Contract must implement ERC 1155 or ERC 721.\");\n  }\n  if (!uri) {\n    // no uri found, return fallback metadata\n    return CommonNFTOutput.parse({\n      ...FALLBACK_METADATA,\n      id: BigNumber.from(tokenId).toString(),\n      uri: \"\"\n    });\n  }\n  return fetchTokenMetadata(tokenId, uri, storage);\n}\n\n/**\n * @internal\n * @param metadata - the metadata to upload\n * @param storage - the storage to use\n */\nasync function uploadOrExtractURI(metadata, storage) {\n  if (typeof metadata === \"string\") {\n    return metadata;\n  } else {\n    return await storage.upload(CommonNFTInput.parse(metadata));\n  }\n}\n\n/**\n * @internal\n * @param metadatas - the metadata to upload\n * @param storage - the storage to use\n * @param startNumber - the number to start the file names at\n * @param contractAddress - the contract address\n * @param signerAddress - the signer address\n * @param options - options\n */\nasync function uploadOrExtractURIs(metadatas, storage, startNumber, options) {\n  if (isUriList(metadatas)) {\n    return metadatas;\n  } else if (isMetadataList(metadatas)) {\n    const uris = await storage.uploadBatch(metadatas.map(m => CommonNFTInput.parse(m)), {\n      rewriteFileNames: {\n        fileStartNumber: startNumber || 0\n      },\n      onProgress: options?.onProgress\n    });\n    return uris;\n  } else {\n    throw new Error(\"NFT metadatas must all be of the same type (all URI or all NFTMetadataInput)\");\n  }\n}\nfunction getBaseUriFromBatch(uris) {\n  const baseUri = uris[0].substring(0, uris[0].lastIndexOf(\"/\"));\n  for (let i = 0; i < uris.length; i++) {\n    const uri = uris[i].substring(0, uris[i].lastIndexOf(\"/\"));\n    if (baseUri !== uri) {\n      throw new Error(`Can only create batches with the same base URI for every entry in the batch. Expected '${baseUri}' but got '${uri}'`);\n    }\n  }\n\n  // Ensure that baseUri ends with trailing slash\n  return baseUri.replace(/\\/$/, \"\") + \"/\";\n}\nfunction isUriList(metadatas) {\n  return metadatas.find(m => typeof m !== \"string\") === undefined;\n}\nfunction isMetadataList(metadatas) {\n  return metadatas.find(m => typeof m !== \"object\") === undefined;\n}\n\n/**\n * @internal\n */\nconst DEFAULT_QUERY_ALL_COUNT = 100;\n\n/**\n * Pagination Parameters\n * @public\n */\n\nexport { DEFAULT_QUERY_ALL_COUNT as D, FALLBACK_METADATA as F, InterfaceId_IERC721 as I, InterfaceId_IERC1155 as a, uploadOrExtractURI as b, fetchTokenMetadataForContract as c, fetchTokenMetadata as f, getBaseUriFromBatch as g, uploadOrExtractURIs as u };\n","import { a as assertEnabled } from './assertEnabled-d1700f0b.browser.esm.js';\nimport { C as ContractMetadata, b as ContractAppURI, G as GasCostEstimator, a as ContractEvents, d as detectContractFeature } from './contract-appuri-5c40af52.browser.esm.js';\nimport { dH as MARKETPLACE_CONTRACT_ROLES, dA as FEATURE_DIRECT_LISTINGS, dB as FEATURE_ENGLISH_AUCTIONS, dC as FEATURE_OFFERS, cs as ContractWrapper, bj as AbiSchema, b$ as MarketplaceContractSchema } from './index-33cd3415.browser.esm.js';\nimport { C as ContractEncoder } from './fetchCurrencyValue-32d08b05.browser.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\nimport { C as ContractPlatformFee } from './contract-platform-fee-e756e68f.browser.esm.js';\nimport { C as ContractRoles } from './contract-roles-71988d2e.browser.esm.js';\nimport { M as MarketplaceV3DirectListings, a as MarketplaceV3EnglishAuctions, b as MarketplaceV3Offers } from './marketplacev3-offers-ce1f096b.browser.esm.js';\nimport { T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport 'ethers';\nimport 'zod';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport './cleanCurrencyAddress-ded19cfe.browser.esm.js';\nimport './normalizePriceValue-9851c0eb.browser.esm.js';\nimport './setErc20Allowance-7f76f677.browser.esm.js';\nimport './marketplace-e3129e2f.browser.esm.js';\nimport './QueryParams-32a56510.browser.esm.js';\n\n/**\n * Create your own whitelabel marketplace that enables users to buy and sell any digital assets.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"marketplace\");\n * ```\n *\n * @internal\n * @deprecated use contract.directListings / contract.auctions / contract.offers instead\n */\nclass MarketplaceV3 {\n  static contractRoles = MARKETPLACE_CONTRACT_ROLES;\n\n  /**\n   * @internal\n   */\n\n  /**\n   * Direct listings\n   * @remarks Create and manage direct listings in your marketplace.\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // The price to pay per unit of NFTs listed.\n   *   pricePerToken: 1.5,\n   *   // when should the listing open up for offers\n   *   startTimestamp: new Date(Date.now()),\n   *   // how long the listing will be open for\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   *   // Whether the listing is reserved for a specific set of buyers.\n   *   isReservedListing: false\n   * }\n   *\n   * const tx = await contract.directListings.createListing(listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   *\n   * // And on the buyers side:\n   * // The ID of the listing you want to buy from\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await contract.directListings.buyFromListing(listingId, quantityDesired);\n   * ```\n   */\n  get directListings() {\n    return assertEnabled(this.detectDirectListings(), FEATURE_DIRECT_LISTINGS);\n  }\n  /**\n   * Auctions\n   * @remarks Create and manage auctions in your marketplace.\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract of the asset you want to auction\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to auction\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to auction\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the auctioned tokens\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // the minimum bid that will be accepted for the token\n   *   minimumBidAmount: \"1.5\",\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutBidAmount: \"10\",\n   *   // If a bid is made less than these many seconds before expiration, the expiration time is increased by this.\n   *   timeBufferInSeconds: \"1000\",\n   *   // A bid must be at least this much bps greater than the current winning bid\n   *   bidBufferBps: \"100\", // 100 bps stands for 1%\n   *   // when should the auction open up for bidding\n   *   startTimestamp: new Date(Date.now()),\n   *   // end time of auction\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   * }\n   *\n   * const tx = await contract.englishAuctions.createAuction(auction);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created auction\n   *\n   * // And on the buyers side:\n   * // The auction ID of the asset you want to bid on\n   * const auctionId = 0;\n   * // The total amount you are willing to bid for auctioned tokens\n   * const bidAmount = 1;\n   *\n   * await contract.englishAuctions.makeBid(auctionId, bidAmount);\n   * ```\n   */\n  get englishAuctions() {\n    return assertEnabled(this.detectEnglishAuctions(), FEATURE_ENGLISH_AUCTIONS);\n  }\n\n  /**\n   * Offers\n   * @remarks Make and manage offers.\n   * @example\n   * ```javascript\n   * // Data of the offer you want to make\n   * const offer = {\n   *   // address of the contract the asset you want to make an offer for\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to buy\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to buy\n   *   quantity: 1,\n   *   // address of the currency contract that you offer to pay in\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // Total price you offer to pay for the mentioned token(s)\n   *   totalPrice: \"1.5\",\n   *   // Offer valid until\n   *   endTimestamp: new Date(),\n   * }\n   *\n   * const tx = await contract.offers.makeOffer(offer);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created offer\n   *\n   * // And on the seller's side:\n   * // The ID of the offer you want to accept\n   * const offerId = 0;\n   * await contract.offers.acceptOffer(offerId);\n   * ```\n   */\n  get offers() {\n    return assertEnabled(this.detectOffers(), FEATURE_OFFERS);\n  }\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    this._chainId = chainId;\n    this.abi = AbiSchema.parse(abi || []);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(this.contractWrapper, MarketplaceContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, MarketplaceV3.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n\n  /** ********************\n   * FEATURE DETECTION\n   * ********************/\n\n  detectDirectListings() {\n    if (detectContractFeature(this.contractWrapper, \"DirectListings\")) {\n      return new MarketplaceV3DirectListings(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectEnglishAuctions() {\n    if (detectContractFeature(this.contractWrapper, \"EnglishAuctions\")) {\n      return new MarketplaceV3EnglishAuctions(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectOffers() {\n    if (detectContractFeature(this.contractWrapper, \"Offers\")) {\n      return new MarketplaceV3Offers(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n}\n\nexport { MarketplaceV3 };\n","/**\n * Allows overriding transaction behavior for this contract\n * @internal\n */\nclass ContractInterceptor {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * The next transaction executed will add/replace any overrides passed via the passed in hook.\n   * @remarks Overridden values will be applied to the next transaction executed.\n   * @example\n   * ```javascript\n   * contract.interceptor.overrideNextTransaction(() => ({\n   *   gasLimit: 3000000,\n   * }));\n   * ```\n   * @param hook - the hook to add or replace any CallOverrides (gas limit, gas price, nonce, from, value, etc...)\n   * @public\n   */\n  overrideNextTransaction(hook) {\n    this.contractWrapper.withTransactionOverride(hook);\n  }\n}\n\nexport { ContractInterceptor as C };\n"],"names":["RawDateSchema","z","union","date","transform","i","BigNumber","from","Math","floor","getTime","number","StartDateSchema","default","Date","EndDateSchema","now","assertEnabled","namespace","feature","ExtensionNotImplementedError","PropertiesInput","object","catchall","BigNumberTransformSchema","unknown","OptionalPropertiesInput","array","flat","optional","nullable","BasicNFTInput","name","string","description","image","FileOrBufferOrStringSchema","animation_url","CommonNFTInput","extend","external_url","background_color","HexColor","properties","attributes","NFTInputOrUriSchema","CommonNFTOutput","id","uri","async","setErc20Allowance","contractToApprove","value","currencyAddress","overrides","isNativeToken","ERC20Abi","signer","getSigner","provider","getProvider","erc20","ContractWrapper","options","storage","owner","getSignerAddress","spender","address","read","lt","sendTransaction","InterfaceId_IERC721","utils","InterfaceId_IERC1155","FALLBACK_METADATA","fetchTokenMetadata","tokenId","tokenUri","startsWith","Buffer","base64","split","jsonMetadata","JSON","parse","toString","parsedUri","replace","toHexString","slice","downloadJSON","err","unparsedTokenIdUri","e","console","warn","stringify","fetchTokenMetadataForContract","contractAddress","ERC165MetadataAbi","erc165","Contract","isERC721","isERC1155","Promise","all","supportsInterface","ERC721MetadataAbi","erc721","tokenURI","Error","ERC1155MetadataAbi","erc1155","uploadOrExtractURI","metadata","upload","uploadOrExtractURIs","metadatas","startNumber","undefined","find","m","isUriList","isMetadataList","uploadBatch","map","rewriteFileNames","fileStartNumber","onProgress","getBaseUriFromBatch","uris","baseUri","substring","lastIndexOf","length","DEFAULT_QUERY_ALL_COUNT","MarketplaceV3","static","MARKETPLACE_CONTRACT_ROLES","directListings","this","detectDirectListings","FEATURE_DIRECT_LISTINGS","englishAuctions","detectEnglishAuctions","FEATURE_ENGLISH_AUCTIONS","offers","detectOffers","FEATURE_OFFERS","chainId","_chainId","constructor","network","arguments","abi","contractWrapper","AbiSchema","ContractMetadata","MarketplaceContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","platformFees","ContractPlatformFee","interceptor","ContractInterceptor","onNetworkUpdated","updateSignerOrProvider","getAddress","prepare","method","args","Transaction","fromContractWrapper","call","functionName","detectContractFeature","MarketplaceV3DirectListings","MarketplaceV3EnglishAuctions","MarketplaceV3Offers","overrideNextTransaction","hook","withTransactionOverride"],"sourceRoot":""}