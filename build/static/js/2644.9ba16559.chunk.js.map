{"version":3,"file":"static/js/2644.9ba16559.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/wallets/dist/errors-9edc08c8.browser.esm.js","../node_modules/@thirdweb-dev/wallets/dist/WagmiConnector-2f14002d.browser.esm.js","../node_modules/@thirdweb-dev/wallets/evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.browser.esm.js","../node_modules/@thirdweb-dev/wallets/dist/normalizeChainId-1fb9aedf.browser.esm.js","../node_modules/@thirdweb-dev/wallets/evm/connectors/trust/dist/thirdweb-dev-wallets-evm-connectors-trust.browser.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './defineProperty-350fc508.browser.esm.js';\n\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors per EIP-1474.\n * @see https://eips.ethereum.org/EIPS/eip-1474\n */\nclass RpcError extends Error {\n  constructor( /** Human-readable string */\n  message, options) {\n    const {\n      cause,\n      code,\n      data\n    } = options;\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error('\"message\" must be a nonempty string.');\n    }\n    super(`${message}. Cause: ${JSON.stringify(cause)}`);\n    this.cause = cause;\n    this.code = code;\n    this.data = data;\n  }\n}\n\n/**\n * @internal\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * @see https://eips.ethereum.org/EIPS/eip-1193\n */\nclass ProviderRpcError extends RpcError {\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   * `code` must be an integer in the `1000 <= 4999` range.\n   */\n  constructor( /** Human-readable string */\n  message, options) {\n    const {\n      cause,\n      code,\n      data\n    } = options;\n    if (!(Number.isInteger(code) && code >= 1000 && code <= 4999)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n    super(message, {\n      cause,\n      code,\n      data\n    });\n  }\n}\n\n/**\n * @internal\n */\nclass AddChainError extends Error {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"name\", \"AddChainError\");\n    _defineProperty(this, \"message\", \"Error adding chain\");\n  }\n}\n\n/**\n * @internal\n */\nclass ChainNotConfiguredError extends Error {\n  constructor(_ref) {\n    let {\n      chainId,\n      connectorId\n    } = _ref;\n    super(`Chain \"${chainId}\" not configured for connector \"${connectorId}\".`);\n    _defineProperty(this, \"name\", \"ChainNotConfigured\");\n  }\n}\nclass ConnectorNotFoundError extends Error {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"name\", \"ConnectorNotFoundError\");\n    _defineProperty(this, \"message\", \"Connector not found\");\n  }\n}\nclass ResourceUnavailableError extends RpcError {\n  constructor(cause) {\n    super(\"Resource unavailable\", {\n      cause,\n      code: -32002\n    });\n    _defineProperty(this, \"name\", \"ResourceUnavailable\");\n  }\n}\n/**\n * @internal\n */\nclass SwitchChainError extends ProviderRpcError {\n  constructor(cause) {\n    super(\"Error switching chain\", {\n      cause,\n      code: 4902\n    });\n    _defineProperty(this, \"name\", \"SwitchChainError\");\n  }\n}\n/**\n * @internal\n */\nclass UserRejectedRequestError extends ProviderRpcError {\n  constructor(cause) {\n    super(\"User rejected request\", {\n      cause,\n      code: 4001\n    });\n    _defineProperty(this, \"name\", \"UserRejectedRequestError\");\n  }\n}\n\n/**\n * @internal\n */\n// Ethers does not have an error type so we can use this for casting\n// https://github.com/ethers-io/ethers.js/blob/main/packages/logger/src.ts/index.ts#L268\n\nexport { AddChainError as A, ChainNotConfiguredError as C, ProviderRpcError as P, ResourceUnavailableError as R, SwitchChainError as S, UserRejectedRequestError as U, ConnectorNotFoundError as a };\n","import { defaultChains } from '@thirdweb-dev/chains';\nimport EventEmitter from 'eventemitter3';\n\nclass WagmiConnector extends EventEmitter {\n  /** Unique connector id */\n\n  /** Connector name */\n\n  /** Chains connector supports */\n\n  /** Options to use with connector */\n\n  /** Whether connector is usable */\n\n  constructor(_ref) {\n    let {\n      chains = defaultChains,\n      options\n    } = _ref;\n    super();\n    this.chains = chains;\n    this.options = options;\n  }\n  getBlockExplorerUrls(chain) {\n    const explorers = chain.explorers?.map(x => x.url) ?? [];\n    return explorers.length > 0 ? explorers : undefined;\n  }\n  isChainUnsupported(chainId) {\n    return !this.chains.some(x => x.chainId === chainId);\n  }\n  updateChains(chains) {\n    this.chains = chains;\n  }\n}\n\nexport { WagmiConnector as W };\n","import { _ as _defineProperty } from '../../../../dist/defineProperty-350fc508.browser.esm.js';\nimport { W as WagmiConnector } from '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\nimport { a as ConnectorNotFoundError, U as UserRejectedRequestError, R as ResourceUnavailableError, C as ChainNotConfiguredError, A as AddChainError, S as SwitchChainError } from '../../../../dist/errors-9edc08c8.browser.esm.js';\nimport { a as assertWindowEthereum } from '../../../../dist/assertWindowEthereum-88295886.browser.esm.js';\nimport { g as getValidPublicRPCUrl } from '../../../../dist/url-a45219bd.browser.esm.js';\nimport { utils, providers } from 'ethers';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-1fb9aedf.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\nfunction getInjectedName(ethereum) {\n  if (!ethereum) {\n    return \"Injected\";\n  }\n  const getName = provider => {\n    if (provider.isAvalanche) {\n      return \"Core Wallet\";\n    }\n    if (provider.isBitKeep) {\n      return \"BitKeep\";\n    }\n    if (provider.isBraveWallet) {\n      return \"Brave Wallet\";\n    }\n    if (provider.isCoinbaseWallet) {\n      return \"Coinbase Wallet\";\n    }\n    if (provider.isExodus) {\n      return \"Exodus\";\n    }\n    if (provider.isFrame) {\n      return \"Frame\";\n    }\n    if (provider.isKuCoinWallet) {\n      return \"KuCoin Wallet\";\n    }\n    if (provider.isMathWallet) {\n      return \"MathWallet\";\n    }\n    if (provider.isOneInchIOSWallet || provider.isOneInchAndroidWallet) {\n      return \"1inch Wallet\";\n    }\n    if (provider.isOpera) {\n      return \"Opera\";\n    }\n    if (provider.isPortal) {\n      return \"Ripio Portal\";\n    }\n    if (provider.isTally) {\n      return \"Tally\";\n    }\n    if (provider.isTokenPocket) {\n      return \"TokenPocket\";\n    }\n    if (provider.isTokenary) {\n      return \"Tokenary\";\n    }\n    if (provider.isTrust || provider.isTrustWallet) {\n      return \"Trust Wallet\";\n    }\n    if (provider.isMetaMask) {\n      return \"MetaMask\";\n    }\n    if (provider.isImToken) {\n      return \"imToken\";\n    }\n  };\n\n  // Some injected providers detect multiple other providers and create a list at `ethers.providers`\n  if (ethereum.providers?.length) {\n    // Deduplicate names using Set\n    // Coinbase Wallet puts multiple providers in `ethereum.providers`\n    const nameSet = new Set();\n    let unknownCount = 1;\n    for (const provider of ethereum.providers) {\n      let name = getName(provider);\n      if (!name) {\n        name = `Unknown Wallet #${unknownCount}`;\n        unknownCount += 1;\n      }\n      nameSet.add(name);\n    }\n    const names = [...nameSet];\n    if (names.length) {\n      return names;\n    }\n    return names[0] ?? \"Injected\";\n  }\n  return getName(ethereum) ?? \"Injected\";\n}\n\nclass InjectedConnector extends WagmiConnector {\n  constructor(arg) {\n    const defaultOptions = {\n      shimDisconnect: true,\n      getProvider: () => {\n        if (assertWindowEthereum(globalThis.window)) {\n          return globalThis.window.ethereum;\n        }\n      }\n    };\n    const options = {\n      ...defaultOptions,\n      ...arg.options\n    };\n    super({\n      chains: arg.chains,\n      options\n    });\n    /**\n     * Name of the injected connector\n     */\n    /**\n     * Whether the connector is ready to be used\n     *\n     * `true` if the injected provider is found\n     */\n    _defineProperty(this, \"shimDisconnectKey\", \"injected.shimDisconnect\");\n    /**\n     * handles the `accountsChanged` event from the provider\n     * * emits `change` event if connected to a different account\n     * * emits `disconnect` event if no accounts available\n     */\n    _defineProperty(this, \"onAccountsChanged\", async accounts => {\n      if (accounts.length === 0) {\n        this.emit(\"disconnect\");\n      } else {\n        this.emit(\"change\", {\n          account: utils.getAddress(accounts[0])\n        });\n      }\n    });\n    /**\n     * handles the `chainChanged` event from the provider\n     * * emits `change` event if connected to a different chain\n     */\n    _defineProperty(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    /**\n     * handles the `disconnect` event from the provider\n     * * emits `disconnect` event\n     */\n    _defineProperty(this, \"onDisconnect\", async error => {\n      // We need this as MetaMask can emit the \"disconnect\" event upon switching chains.\n      // If MetaMask emits a `code: 1013` error, wait for reconnection before disconnecting\n      // https://github.com/MetaMask/providers/pull/120\n      if (error.code === 1013) {\n        const provider = await this.getProvider();\n        if (provider) {\n          try {\n            const isAuthorized = await this.getAccount();\n            if (isAuthorized) {\n              return;\n            }\n          } catch {\n            // If we can't get the account anymore, continue with disconnect\n          }\n        }\n      }\n      this.emit(\"disconnect\");\n\n      // Remove `shimDisconnect` => it signals that wallet is disconnected\n      if (this.options.shimDisconnect) {\n        await this.connectorStorage.removeItem(this.shimDisconnectKey);\n      }\n    });\n    const _provider = options.getProvider();\n\n    // set the name of the connector\n    if (typeof options.name === \"string\") {\n      // if name is given, use that\n      this.name = options.name;\n    } else if (_provider) {\n      // if injected provider is detected, get name from it\n      const detectedName = getInjectedName(_provider);\n      if (options.name) {\n        this.name = options.name(detectedName);\n      } else {\n        if (typeof detectedName === \"string\") {\n          this.name = detectedName;\n        } else {\n          this.name = detectedName[0];\n        }\n      }\n    } else {\n      // else default to \"Injected\"\n      this.name = \"Injected\";\n    }\n    this.id = \"injected\";\n    this.ready = !!_provider;\n    this.connectorStorage = arg.connectorStorage;\n  }\n\n  /**\n   * * Connect to the injected provider\n   * * switch to the given chain if `chainId` is specified as an argument\n   */\n  async connect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      const provider = await this.getProvider();\n      if (!provider) {\n        throw new ConnectorNotFoundError();\n      }\n      this.setupListeners();\n\n      // emit \"connecting\" event\n      this.emit(\"message\", {\n        type: \"connecting\"\n      });\n\n      // request account addresses from injected provider\n      const accountAddresses = await provider.request({\n        method: \"eth_requestAccounts\"\n      });\n\n      // get the first account address\n      const firstAccountAddress = utils.getAddress(accountAddresses[0]);\n\n      // Switch to given chain if a chainId is specified\n      let connectedChainId = await this.getChainId();\n      // Check if currently connected chain is unsupported\n      // chainId is considered unsupported if chainId is not in the list of this.chains array\n      let isUnsupported = this.isChainUnsupported(connectedChainId);\n\n      // if chainId is specified and it is not the same as the currently connected chain\n      if (options.chainId && connectedChainId !== options.chainId) {\n        // switch to the given chain\n        try {\n          await this.switchChain(options.chainId);\n          // recalculate connectedChainId and isUnsupported\n          connectedChainId = options.chainId;\n          isUnsupported = this.isChainUnsupported(options.chainId);\n        } catch (e) {\n          console.error(`Could not switch to chain id: ${options.chainId}`, e);\n        }\n      }\n\n      // if shimDisconnect is enabled\n      if (this.options.shimDisconnect) {\n        // add the shim shimDisconnectKey => it signals that wallet is connected\n        await this.connectorStorage.setItem(this.shimDisconnectKey, \"true\");\n      }\n      const connectionInfo = {\n        account: firstAccountAddress,\n        chain: {\n          id: connectedChainId,\n          unsupported: isUnsupported\n        },\n        provider\n      };\n      this.emit(\"connect\", connectionInfo);\n      return connectionInfo;\n    } catch (error) {\n      if (this.isUserRejectedRequestError(error)) {\n        throw new UserRejectedRequestError(error);\n      }\n      if (error.code === -32002) {\n        throw new ResourceUnavailableError(error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * disconnect from the injected provider\n   */\n  async disconnect() {\n    // perform cleanup\n    const provider = await this.getProvider();\n    if (!provider?.removeListener) {\n      return;\n    }\n    provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n    provider.removeListener(\"chainChanged\", this.onChainChanged);\n    provider.removeListener(\"disconnect\", this.onDisconnect);\n\n    // if shimDisconnect is enabled\n    if (this.options.shimDisconnect) {\n      // Remove the shimDisconnectKey => it signals that wallet is disconnected\n      await this.connectorStorage.removeItem(this.shimDisconnectKey);\n    }\n  }\n\n  /**\n   * @returns The first account address from the injected provider\n   */\n  async getAccount() {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    const accounts = await provider.request({\n      method: \"eth_accounts\"\n    });\n\n    // return checksum address\n    // https://docs.ethers.org/v5/api/utils/address/#utils-getAddress\n    return utils.getAddress(accounts[0]);\n  }\n\n  /**\n   * @returns The `chainId` of the currently connected chain from injected provider normalized to a `number`\n   */\n  async getChainId() {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    return provider.request({\n      method: \"eth_chainId\"\n    }).then(normalizeChainId);\n  }\n\n  /**\n   * get the injected provider\n   */\n  async getProvider() {\n    const provider = this.options.getProvider();\n    if (provider) {\n      this._provider = provider;\n      // setting listeners\n    }\n    return this._provider;\n  }\n\n  /**\n   * get a `signer` for given `chainId`\n   */\n  async getSigner() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const [provider, account] = await Promise.all([this.getProvider(), this.getAccount()]);\n\n    // ethers.providers.Web3Provider\n    return new providers.Web3Provider(provider, chainId).getSigner(account);\n  }\n\n  /**\n   *\n   * @returns `true` if the connector is connected and address is available, else `false`\n   */\n  async isAuthorized() {\n    try {\n      // `false` if connector is disconnected\n      if (this.options.shimDisconnect &&\n      // If shim does not exist in storage, wallet is disconnected\n      !Boolean(await this.connectorStorage.getItem(this.shimDisconnectKey))) {\n        return false;\n      }\n      const provider = await this.getProvider();\n      if (!provider) {\n        throw new ConnectorNotFoundError();\n      }\n      // `false` if no account address available, else `true`\n      const account = await this.getAccount();\n      return !!account;\n    } catch {\n      // `false` if any error thrown\n      return false;\n    }\n  }\n\n  /**\n   * switch to given chain\n   */\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    const chainIdHex = utils.hexValue(chainId);\n    try {\n      // request provider to switch to given chainIdHex\n      await provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: chainIdHex\n        }]\n      });\n      const chain = this.chains.find(_chain => _chain.chainId === chainId);\n      if (chain) {\n        return chain;\n      }\n      return {\n        chainId: chainId,\n        name: `Chain ${chainIdHex}`,\n        slug: `${chainIdHex}`,\n        nativeCurrency: {\n          name: \"Ether\",\n          decimals: 18,\n          symbol: \"ETH\"\n        },\n        rpc: [\"\"],\n        chain: \"\",\n        shortName: \"\",\n        testnet: true\n      };\n    } catch (error) {\n      // if could not switch to given chainIdHex\n\n      // if tried to connect to a chain that is not configured\n      const chain = this.chains.find(_chain => _chain.chainId === chainId);\n      if (!chain) {\n        throw new ChainNotConfiguredError({\n          chainId,\n          connectorId: this.id\n        });\n      }\n\n      // if chain is not added to provider\n      if (error.code === 4902 ||\n      // Unwrapping for MetaMask Mobile\n      // https://github.com/MetaMask/metamask-mobile/issues/2944#issuecomment-976988719\n      error?.data?.originalError?.code === 4902) {\n        try {\n          // request provider to add chain\n          await provider.request({\n            method: \"wallet_addEthereumChain\",\n            params: [{\n              chainId: chainIdHex,\n              chainName: chain.name,\n              nativeCurrency: chain.nativeCurrency,\n              rpcUrls: getValidPublicRPCUrl(chain),\n              // no client id on purpose here\n              blockExplorerUrls: this.getBlockExplorerUrls(chain)\n            }]\n          });\n          return chain;\n        } catch (addError) {\n          // if user rejects request to add chain\n          if (this.isUserRejectedRequestError(addError)) {\n            throw new UserRejectedRequestError(error);\n          }\n\n          // else other error\n          throw new AddChainError();\n        }\n      }\n      if (this.isUserRejectedRequestError(error)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw new SwitchChainError(error);\n    }\n  }\n  async setupListeners() {\n    const provider = await this.getProvider();\n    if (provider.on) {\n      provider.on(\"accountsChanged\", this.onAccountsChanged);\n      provider.on(\"chainChanged\", this.onChainChanged);\n      provider.on(\"disconnect\", this.onDisconnect);\n    }\n  }\n  isUserRejectedRequestError(error) {\n    return error.code === 4001;\n  }\n}\n\nexport { InjectedConnector };\n","/**\n * @internal\n */\nfunction normalizeChainId(chainId) {\n  if (typeof chainId === \"string\") {\n    return Number.parseInt(chainId, chainId.trim().substring(0, 2) === \"0x\" ? 16 : 10);\n  }\n  if (typeof chainId === \"bigint\") {\n    return Number(chainId);\n  }\n  return chainId;\n}\n\nexport { normalizeChainId as n };\n","import { InjectedConnector } from '../../injected/dist/thirdweb-dev-wallets-evm-connectors-injected.browser.esm.js';\nimport { a as assertWindowEthereum } from '../../../../dist/assertWindowEthereum-88295886.browser.esm.js';\nimport '../../../../dist/defineProperty-350fc508.browser.esm.js';\nimport '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\nimport '../../../../dist/errors-9edc08c8.browser.esm.js';\nimport '../../../../dist/url-a45219bd.browser.esm.js';\nimport 'ethers';\nimport '../../../../dist/normalizeChainId-1fb9aedf.browser.esm.js';\n\nclass TrustConnector extends InjectedConnector {\n  constructor(arg) {\n    const defaultOptions = {\n      name: \"Trust\",\n      getProvider() {\n        function getReady(ethereum) {\n          const isTrust = !!ethereum?.isTrust;\n          if (!isTrust) {\n            return;\n          }\n          return ethereum;\n        }\n        if (assertWindowEthereum(globalThis.window)) {\n          if (globalThis.window.ethereum?.providers) {\n            return globalThis.window.ethereum.providers.find(getReady);\n          }\n          return getReady(globalThis.window.ethereum);\n        }\n      }\n    };\n    const options = {\n      ...defaultOptions,\n      ...arg.options\n    };\n    super({\n      chains: arg.chains,\n      options,\n      connectorStorage: arg.connectorStorage\n    });\n  }\n}\n\nexport { TrustConnector };\n"],"names":["RpcError","Error","constructor","message","options","cause","code","data","Number","isInteger","super","JSON","stringify","this","ProviderRpcError","AddChainError","arguments","_defineProperty","ChainNotConfiguredError","_ref","chainId","connectorId","ConnectorNotFoundError","ResourceUnavailableError","SwitchChainError","UserRejectedRequestError","WagmiConnector","EventEmitter","chains","defaultChains","getBlockExplorerUrls","chain","explorers","map","x","url","length","undefined","isChainUnsupported","some","updateChains","InjectedConnector","arg","shimDisconnect","getProvider","assertWindowEthereum","globalThis","window","ethereum","async","accounts","emit","account","utils","id","normalizeChainId","unsupported","error","getAccount","connectorStorage","removeItem","shimDisconnectKey","_provider","name","detectedName","getName","provider","isAvalanche","isBitKeep","isBraveWallet","isCoinbaseWallet","isExodus","isFrame","isKuCoinWallet","isMathWallet","isOneInchIOSWallet","isOneInchAndroidWallet","isOpera","isPortal","isTally","isTokenPocket","isTokenary","isTrust","isTrustWallet","isMetaMask","isImToken","providers","nameSet","Set","unknownCount","add","names","getInjectedName","ready","connect","setupListeners","type","accountAddresses","request","method","firstAccountAddress","connectedChainId","getChainId","isUnsupported","switchChain","e","console","setItem","connectionInfo","isUserRejectedRequestError","disconnect","removeListener","onAccountsChanged","onChainChanged","onDisconnect","then","getSigner","Promise","all","isAuthorized","Boolean","getItem","chainIdHex","params","find","_chain","slug","nativeCurrency","decimals","symbol","rpc","shortName","testnet","originalError","chainName","rpcUrls","getValidPublicRPCUrl","blockExplorerUrls","addError","on","parseInt","trim","substring","TrustConnector","getReady"],"sourceRoot":""}