{"version":3,"file":"static/js/3578.4e1d9bb4.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/erc-20-standard-1e9d9631.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/contract-sales-918c7cb8.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/contract-platform-fee-e756e68f.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/token-1e82c71a.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/contract-interceptor-d7b164a7.browser.esm.js"],"sourcesContent":["import { f as buildTransactionFunction } from './transactions-72f9603c.browser.esm.js';\nimport { E as Erc20 } from './erc-20-9a18a51c.browser.esm.js';\n\n/**\n * Standard ERC20 Token functions\n * @remarks Basic functionality for a ERC20 contract that handles all unit transformation for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.token.transfer(walletAddress, amount);\n * ```\n * @public\n */\nclass StandardErc20 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc20 = new Erc20(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  /**\n   * @internal\n   */\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the token Metadata (name, symbol, etc...)\n   *\n   * @example\n   * ```javascript\n   * const token = await contract.get();\n   * ```\n   * @returns The token metadata\n   */\n  async get() {\n    return this.erc20.get();\n  }\n\n  /**\n   * Get Token Balance for the currently connected wallet\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * const balance = await contract.balance();\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   */\n  async balance() {\n    return await this.erc20.balance();\n  }\n\n  /**\n   * Get Token Balance\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   */\n  async balanceOf(address) {\n    return this.erc20.balanceOf(address);\n  }\n\n  /**\n   * The total supply for this token\n   * @remarks Get how much supply has been minted\n   * @example\n   * ```javascript\n   * const balance = await contract.totalSupply();\n   * ```\n   */\n  async totalSupply() {\n    return await this.erc20.totalSupply();\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of a 'spender' wallet over the connected wallet's funds - the allowance of a different address for a token is the amount of tokens that the `spender` wallet is allowed to spend on behalf of the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token allowance\n   * const spenderAddress = \"0x...\";\n   * const allowance = await contract.allowance(spenderAddress);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   */\n  async allowance(spender) {\n    return await this.erc20.allowance(spender);\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet who owns the funds\n   * const owner = \"{{wallet_address}}\";\n   * // Address of the wallet to check token allowance\n   * const spender = \"0x...\";\n   * const allowance = await contract.allowanceOf(owner, spender);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   */\n  async allowanceOf(owner, spender) {\n    return await this.erc20.allowanceOf(owner, spender);\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Transfer Tokens\n   *\n   * @remarks Transfer tokens from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The amount of tokens you want to send\n   * const amount = 0.1;\n   * await contract.transfer(toAddress, amount);\n   * ```\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction(async (to, amount) => {\n    return this.erc20.transfer.prepare(to, amount);\n  });\n\n  /**\n   * Transfer Tokens From Address\n   *\n   * @remarks Transfer tokens from one wallet to another\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const fromAddress = \"{{wallet_address}}\";\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The number of tokens you want to send\n   * const amount = 1.2\n   * // Note that the connected wallet must have approval to transfer the tokens of the fromAddress\n   * await contract.transferFrom(fromAddress, toAddress, amount);\n   * ```\n   */\n  transferFrom = /* @__PURE__ */buildTransactionFunction(async (from, to, amount) => {\n    return this.erc20.transferFrom.prepare(from, to, amount);\n  });\n\n  /**\n   * Allows the specified `spender` wallet to transfer the given `amount` of tokens to another wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to allow transfers from\n   * const spenderAddress = \"0x...\";\n   * // The number of tokens to give as allowance\n   * const amount = 100\n   * await contract.setAllowance(spenderAddress, amount);\n   * ```\n   */\n  setAllowance = /* @__PURE__ */buildTransactionFunction(async (spender, amount) => {\n    return this.erc20.setAllowance.prepare(spender, amount);\n  });\n\n  /**\n   * Transfer Tokens To Many Wallets\n   *\n   * @remarks Mint tokens from the connected wallet to many wallets\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 100, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 100,\n   *  }\n   * ]\n   *\n   * await contract.transferBatch(data);\n   * ```\n   */\n  transferBatch = /* @__PURE__ */buildTransactionFunction(async args => {\n    return this.erc20.transferBatch.prepare(args);\n  });\n}\n\nexport { StandardErc20 as S };\n","import { f as buildTransactionFunction, T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport { d7 as FEATURE_PRIMARY_SALE } from './index-33cd3415.browser.esm.js';\n\n/**\n * Handle primary sales recipients\n * @remarks Configure primary sale recipients for an entire contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const salesRecipient = await contract.sales.getRecipient();\n * await contract.sales.setRecipient(recipientWalletAddress);\n * ```\n * @public\n */\nclass ContractPrimarySale {\n  featureName = FEATURE_PRIMARY_SALE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the primary sale recipient\n   * @returns The wallet address.\n   * @example\n   * ```javascript\n   * const salesRecipient = await contract.sales.getRecipient();\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  async getRecipient() {\n    const result = await this.contractWrapper.read(\"primarySaleRecipient\", []);\n    return result;\n  }\n\n  /**\n   * Set the primary sale recipient\n   * @param recipient - the wallet address\n   * @example\n   * ```javascript\n   * await contract.sales.setRecipient(recipientWalletAddress);\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  setRecipient = /* @__PURE__ */buildTransactionFunction(async recipient => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPrimarySaleRecipient\",\n      args: [recipient]\n    });\n  });\n}\n\nexport { ContractPrimarySale as C };\n","import { f as buildTransactionFunction, T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport { du as FEATURE_PLATFORM_FEE, bH as CommonPlatformFeeSchema } from './index-33cd3415.browser.esm.js';\n\n/**\n * Handle platform fees and recipients\n * @remarks Configure platform fees for a contract, which can be applied on certain paid transactions\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const feeInfo = await contract.platformFees.get();\n * await contract.platformFees.set({\n *   platform_fee_basis_points: 100, // 1% fee\n *   platform_fee_recipient: \"0x...\" // the fee recipient\n * })\n * ```\n * @public\n */\nclass ContractPlatformFee {\n  featureName = FEATURE_PLATFORM_FEE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the platform fee recipient and basis points\n   *\n   * @example\n   * ```javascript\n   * const feeInfo = await contract.platformFees.get();\n   * console.log(feeInfo.platform_fee_recipient);\n   * console.log(feeInfo.platform_fee_basis_points);\n   * ```\n   * @twfeature PlatformFee\n   */\n  async get() {\n    const [platformFeeRecipient, platformFeeBps] = await this.contractWrapper.read(\"getPlatformFeeInfo\", []);\n    return CommonPlatformFeeSchema.parseAsync({\n      platform_fee_recipient: platformFeeRecipient,\n      platform_fee_basis_points: platformFeeBps\n    });\n  }\n\n  /**\n   * Set the platform fee recipient and basis points\n   *\n   * @example\n   * ```javascript\n   * await contract.platformFees.set({\n   *   platform_fee_basis_points: 100, // 1% fee\n   *   platform_fee_recipient: \"0x...\" // the fee recipient\n   * })\n   * ```\n   *\n   * @param platformFeeInfo - the platform fee information\n   * @twfeature PlatformFee\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async platformFeeInfo => {\n    const parsed = await CommonPlatformFeeSchema.parseAsync(platformFeeInfo);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPlatformFeeInfo\",\n      args: [parsed.platform_fee_recipient, parsed.platform_fee_basis_points]\n    });\n  });\n}\n\nexport { ContractPlatformFee as C };\n","import { constants, BigNumber } from 'ethers';\nimport { dG as NFT_BASE_CONTRACT_ROLES, cs as ContractWrapper, bj as AbiSchema, cb as TokenErc20ContractSchema, aL as resolveAddress, H as getRoleHash } from './index-33cd3415.browser.esm.js';\nimport { f as buildTransactionFunction, T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport { C as ContractMetadata, b as ContractAppURI, a as ContractEvents, G as GasCostEstimator } from './contract-appuri-5c40af52.browser.esm.js';\nimport { a as fetchCurrencyValue, C as ContractEncoder } from './fetchCurrencyValue-32d08b05.browser.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\nimport { C as ContractPlatformFee } from './contract-platform-fee-e756e68f.browser.esm.js';\nimport { C as ContractRoles } from './contract-roles-71988d2e.browser.esm.js';\nimport { C as ContractPrimarySale } from './contract-sales-918c7cb8.browser.esm.js';\nimport { a as Erc20SignatureMintable } from './erc-20-9a18a51c.browser.esm.js';\nimport { S as StandardErc20 } from './erc-20-standard-1e9d9631.browser.esm.js';\nimport 'zod';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport '@thirdweb-dev/storage';\nimport './assertEnabled-d1700f0b.browser.esm.js';\nimport './drop-claim-conditions-e6f2abbf.browser.esm.js';\nimport 'fast-deep-equal';\nimport './signature-d3ea643d.browser.esm.js';\nimport './normalizePriceValue-9851c0eb.browser.esm.js';\nimport '@thirdweb-dev/merkletree';\nimport './setErc20Allowance-7f76f677.browser.esm.js';\nimport 'uuid';\n\n/**\n * Manages history for Token contracts\n * @public\n */\nclass TokenERC20History {\n  constructor(contractWrapper, events) {\n    this.contractWrapper = contractWrapper;\n    this.events = events;\n  }\n\n  /**\n   * Get all holder balances\n   *\n   * @remarks Lets you get all token holders and their corresponding balances\n   * @returns  A JSON object of all token holders and their corresponding balances\n   * @example\n   * ```javascript\n   * const allHolderBalances = await contract.history.getAllHolderBalances();\n   * ```\n   */\n  async getAllHolderBalances() {\n    const a = await this.events.getEvents(\"Transfer\");\n    const txns = a.map(b => b.data);\n    const balances = {};\n    txns.forEach(item => {\n      const from = item?.from;\n      const to = item?.to;\n      const amount = item?.value;\n      if (!(from === constants.AddressZero)) {\n        if (!(from in balances)) {\n          balances[from] = BigNumber.from(0);\n        }\n        balances[from] = balances[from].sub(amount);\n      }\n      if (!(to === constants.AddressZero)) {\n        if (!(to in balances)) {\n          balances[to] = BigNumber.from(0);\n        }\n        balances[to] = balances[to].add(amount);\n      }\n    });\n    const entries = Object.entries(balances);\n    const results = await Promise.all(entries.map(_ref => {\n      let [, value] = _ref;\n      return fetchCurrencyValue(this.contractWrapper.getProvider(), this.contractWrapper.address, value);\n    }));\n    return entries.map((_ref2, index) => {\n      let [addr] = _ref2;\n      return {\n        holder: addr,\n        balance: results[index]\n      };\n    });\n  }\n}\n\n/**\n * Create a standard crypto token or cryptocurrency.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"token\");\n * ```\n *\n * @internal\n * @deprecated use contract.erc20 instead\n */\nclass Token extends StandardErc20 {\n  static contractRoles = NFT_BASE_CONTRACT_ROLES;\n\n  /**\n   * Signature Minting\n   * @remarks Generate tokens that can be minted only with your own signature, attaching your own set of mint conditions.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the tokens\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, TokenErc20ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Token.contractRoles);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.history = new TokenERC20History(this.contractWrapper, this.events);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.signature = new Erc20SignatureMintable(this.contractWrapper, this.roles);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get your wallet voting power for the current checkpoints\n   *\n   * @returns The amount of voting power in tokens\n   */\n  async getVoteBalance() {\n    return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress());\n  }\n  async getVoteBalanceOf(account) {\n    return await this.erc20.getValue(await this.contractWrapper.read(\"getVotes\", [account]));\n  }\n\n  /**\n   * Get your voting delegatee address\n   *\n   * @returns The address of your vote delegatee\n   */\n  async getDelegation() {\n    return await this.getDelegationOf(await this.contractWrapper.getSignerAddress());\n  }\n\n  /**\n   * Get a specific address voting delegatee address\n   *\n   * @returns The address of your vote delegatee\n   */\n  async getDelegationOf(account) {\n    return await this.contractWrapper.read(\"delegates\", [await resolveAddress(account)]);\n  }\n\n  /**\n   * Get whether users can transfer tokens from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [getRoleHash(\"transfer\"), constants.AddressZero]);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Mint Tokens for the connected wallet\n   *\n   * @remarks See {@link Token.mintTo}\n   */\n  mint = /* @__PURE__ */buildTransactionFunction(async amount => {\n    return this.erc20.mint.prepare(amount);\n  });\n\n  /**\n   * Mint Tokens\n   *\n   * @remarks Mint tokens to a specified address.\n   *\n   * @example\n   * ```javascript\n   * const toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\n   * const amount = \"1.5\"; // The amount of this token you want to mint\n   *\n   * await contract.mintTo(toAddress, amount);\n   * ```\n   */\n  mintTo = /* @__PURE__ */buildTransactionFunction(async (to, amount) => {\n    return this.erc20.mintTo.prepare(to, amount);\n  });\n\n  /**\n   * Construct a mint transaction without executing it.\n   * This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param receiver - Address you want to send the token to\n   * @param amount - The amount of tokens you want to mint\n   *\n   * @deprecated Use `contract.mint.prepare(...args)` instead\n   */\n  async getMintTransaction(to, amount) {\n    return this.erc20.getMintTransaction(to, amount);\n  }\n\n  /**\n   * Mint Tokens To Many Wallets\n   *\n   * @remarks Mint tokens to many wallets in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 0.2, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 1.4,\n   *  }\n   * ]\n   *\n   * await contract.mintBatchTo(data);\n   * ```\n   */\n  mintBatchTo = /* @__PURE__ */buildTransactionFunction(async args => {\n    return this.erc20.mintBatchTo.prepare(args);\n  });\n\n  /**\n   * Lets you delegate your voting power to the delegateeAddress\n   *\n   * @param delegateeAddress - delegatee wallet address\n   * @alpha\n   */\n  delegateTo = /* @__PURE__ */buildTransactionFunction(async delegateeAddress => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"delegate\",\n      args: [await resolveAddress(delegateeAddress)]\n    });\n  });\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnTokens(amount);\n   * ```\n   */\n  burn = /* @__PURE__ */buildTransactionFunction(amount => {\n    return this.erc20.burn.prepare(amount);\n  });\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the specified wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const holderAddress = \"{{wallet_address}}\";\n   *\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnFrom(holderAddress, amount);\n   * ```\n   */\n  burnFrom = /* @__PURE__ */buildTransactionFunction(async (holder, amount) => {\n    return this.erc20.burnFrom.prepare(holder, amount);\n  });\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { Token };\n","/**\n * Allows overriding transaction behavior for this contract\n * @internal\n */\nclass ContractInterceptor {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * The next transaction executed will add/replace any overrides passed via the passed in hook.\n   * @remarks Overridden values will be applied to the next transaction executed.\n   * @example\n   * ```javascript\n   * contract.interceptor.overrideNextTransaction(() => ({\n   *   gasLimit: 3000000,\n   * }));\n   * ```\n   * @param hook - the hook to add or replace any CallOverrides (gas limit, gas price, nonce, from, value, etc...)\n   * @public\n   */\n  overrideNextTransaction(hook) {\n    this.contractWrapper.withTransactionOverride(hook);\n  }\n}\n\nexport { ContractInterceptor as C };\n"],"names":["StandardErc20","chainId","this","_chainId","constructor","contractWrapper","storage","erc20","Erc20","onNetworkUpdated","network","updateSignerOrProvider","getAddress","address","get","balance","balanceOf","totalSupply","allowance","spender","allowanceOf","owner","transfer","buildTransactionFunction","async","to","amount","prepare","transferFrom","from","setAllowance","transferBatch","args","ContractPrimarySale","featureName","FEATURE_PRIMARY_SALE","name","getRecipient","read","setRecipient","Transaction","fromContractWrapper","method","recipient","ContractPlatformFee","FEATURE_PLATFORM_FEE","platformFeeRecipient","platformFeeBps","CommonPlatformFeeSchema","parseAsync","platform_fee_recipient","platform_fee_basis_points","set","parsed","platformFeeInfo","TokenERC20History","events","getAllHolderBalances","txns","getEvents","map","b","data","balances","forEach","item","value","constants","BigNumber","sub","add","entries","Object","results","Promise","all","_ref","fetchCurrencyValue","getProvider","_ref2","index","addr","holder","Token","static","NFT_BASE_CONTRACT_ROLES","options","arguments","length","undefined","abi","super","ContractWrapper","AbiSchema","parse","metadata","ContractMetadata","TokenErc20ContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","sales","ContractEvents","history","encoder","ContractEncoder","estimator","GasCostEstimator","platformFees","interceptor","ContractInterceptor","signature","Erc20SignatureMintable","getVoteBalance","getVoteBalanceOf","getSignerAddress","account","getValue","getDelegation","getDelegationOf","resolveAddress","isTransferRestricted","getRoleHash","mint","mintTo","getMintTransaction","mintBatchTo","delegateTo","delegateeAddress","burn","burnFrom","overrides","call","functionName","overrideNextTransaction","hook","withTransactionOverride"],"sourceRoot":""}