{"version":3,"file":"static/js/8986.bb5800ae.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/split-eb66a32f.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/contract-interceptor-d7b164a7.browser.esm.js"],"sourcesContent":["import { BigNumber, Contract } from 'ethers';\nimport { C as ContractEncoder, a as fetchCurrencyValue } from './fetchCurrencyValue-32d08b05.browser.esm.js';\nimport { dM as ADMIN_ROLE, cs as ContractWrapper, bj as AbiSchema, c7 as SplitsContractSchema, aL as resolveAddress } from './index-33cd3415.browser.esm.js';\nimport { f as buildTransactionFunction, T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport { C as ContractMetadata, b as ContractAppURI, G as GasCostEstimator, a as ContractEvents } from './contract-appuri-5c40af52.browser.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\nimport { C as ContractRoles } from './contract-roles-71988d2e.browser.esm.js';\nimport 'zod';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport '@thirdweb-dev/storage';\n\n/**\n * Create custom royalty splits to distribute funds.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"split\");\n * ```\n *\n * @public\n */\n// TODO create extension wrappers for this\nclass Split {\n  static contractRoles = ADMIN_ROLE;\n\n  /**\n   * @internal\n   */\n\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    this._chainId = chainId;\n    this.abi = AbiSchema.parse(abi || []);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(this.contractWrapper, SplitsContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Split.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get Recipients of this splits contract\n   *\n   * @remarks Get the data about the shares of every split recipient on the contract\n   *\n   * @example\n   * ```javascript\n   * const recipients = await contract.getAllRecipients();\n   * console.log(recipients);\n   * ```\n   */\n  async getAllRecipients() {\n    const recipients = [];\n    let index = BigNumber.from(0);\n    const totalRecipients = await this.contractWrapper.read(\"payeeCount\", []);\n    while (index.lt(totalRecipients)) {\n      try {\n        const recipientAddress = await this.contractWrapper.read(\"payee\", [index]);\n        recipients.push(await this.getRecipientSplitPercentage(recipientAddress));\n        index = index.add(1);\n      } catch (err) {\n        // The only way we know how to detect that we've found all recipients\n        // is if we get an error when trying to get the next recipient.\n        if (\"method\" in err && err[\"method\"].toLowerCase().includes(\"payee(uint256)\")) {\n          break;\n        } else {\n          throw err;\n        }\n      }\n    }\n    return recipients;\n  }\n\n  /**\n   * Returns all the recipients and their balances in the native currency.\n   *\n   * @returns A map of recipient addresses to their balances in the native currency.\n   */\n  async balanceOfAllRecipients() {\n    const recipients = await this.getAllRecipients();\n    const balances = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOf(recipient.address);\n    }\n    return balances;\n  }\n\n  /**\n   * Returns all the recipients and their balances in a non-native currency.\n   *\n   * @param tokenAddress - The address of the currency to check the balances in.\n   * @returns A map of recipient addresses to their balances in the specified currency.\n   */\n  async balanceOfTokenAllRecipients(tokenAddress) {\n    const [resolvedToken, recipients] = await Promise.all([resolveAddress(tokenAddress), this.getAllRecipients()]);\n    const balances = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOfToken(recipient.address, resolvedToken);\n    }\n    return balances;\n  }\n\n  /**\n   * Get Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the native currency held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * const funds = await contract.balanceOf(address);\n   * console.log(funds);\n   * ```\n   */\n  async balanceOf(address) {\n    const [resolvedAddress, walletBalance, totalReleased] = await Promise.all([resolveAddress(address), this.contractWrapper.getProvider().getBalance(this.getAddress()), this.contractWrapper.read(\"totalReleased\", [])]);\n    const totalReceived = walletBalance.add(totalReleased);\n    return this._pendingPayment(resolvedAddress, totalReceived, await this.contractWrapper.read(\"released\", [resolvedAddress]));\n  }\n\n  /**\n   * Get non-native Token Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the non-native tokens held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * // The address of the currency to check the contracts funds of\n   * const tokenAddress = \"0x...\"\n   * const funds = await contract.balanceOfToken(address, tokenAddress);\n   * console.log(funds);\n   * ```\n   */\n  async balanceOfToken(walletAddress, tokenAddress) {\n    const [resolvedToken, resolvedWallet] = await Promise.all([resolveAddress(tokenAddress), resolveAddress(walletAddress)]);\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n    const erc20 = new Contract(resolvedToken, ERC20Abi, this.contractWrapper.getProvider());\n    const [walletBalance, totalReleased, alreadyReleased] = await Promise.all([erc20.balanceOf(this.getAddress()), this.contractWrapper.read(\"totalReleased\", [resolvedToken]), this.contractWrapper.read(\"released\", [resolvedToken, resolvedWallet])]);\n    const totalReceived = walletBalance.add(totalReleased);\n    const value = await this._pendingPayment(resolvedWallet, totalReceived, alreadyReleased);\n    return await fetchCurrencyValue(this.contractWrapper.getProvider(), resolvedToken, value);\n  }\n\n  /**\n   * Get the % of funds owed to a given address\n   * @param address - the address to check percentage of\n   */\n  async getRecipientSplitPercentage(address) {\n    const [resolvedAddress, totalShares, walletsShares] = await Promise.all([resolveAddress(address), this.contractWrapper.read(\"totalShares\", []), this.contractWrapper.read(\"shares\", [address])]);\n    // We convert to basis points to avoid floating point loss of precision\n    return {\n      address: resolvedAddress,\n      splitPercentage: walletsShares.mul(BigNumber.from(1e7)).div(totalShares).toNumber() / 1e5\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Withdraw Funds\n   * @remarks Triggers a transfer to account of the amount of native currency they are owed.\n   *\n   * @example\n   * ```javascript\n   * // the wallet address that wants to withdraw their funds\n   * const walletAddress = \"{{wallet_address}}\"\n   * await contract.withdraw(walletAddress);\n   * ```\n   *\n   * @param walletAddress - The address to distributes the amount to\n   */\n  withdraw = /* @__PURE__ */buildTransactionFunction(async walletAddress => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"release(address)\",\n      args: [await resolveAddress(walletAddress)]\n    });\n  });\n\n  /**\n   * Triggers a transfer to account of the amount of a given currency they are owed.\n   *\n   * @param walletAddress - The address to distributes the amount to\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  withdrawToken = /* @__PURE__ */buildTransactionFunction(async (walletAddress, tokenAddress) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"release(address,address)\",\n      args: await Promise.all([resolveAddress(tokenAddress), resolveAddress(walletAddress)])\n    });\n  });\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * await contract.distribute();\n   * ```\n   */\n  distribute = /* @__PURE__ */buildTransactionFunction(async () => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"distribute()\",\n      args: []\n    });\n  });\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * // The address of the currency to distribute funds\n   * const tokenAddress = \"0x...\"\n   * await contract.distributeToken(tokenAddress);\n   * ```\n   *\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  distributeToken = /* @__PURE__ */buildTransactionFunction(async tokenAddress => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"distribute(address)\",\n      args: [await resolveAddress(tokenAddress)]\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async _pendingPayment(address, totalReceived, alreadyReleased) {\n    const [resolvedAddress, totalShares] = await Promise.all([resolveAddress(address), this.contractWrapper.read(\"totalShares\", [])]);\n    const addressReceived = totalReceived.mul(await this.contractWrapper.read(\"shares\", [resolvedAddress]));\n    const totalRoyaltyAvailable = addressReceived.div(totalShares);\n    return totalRoyaltyAvailable.sub(alreadyReleased);\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { Split };\n","/**\n * Allows overriding transaction behavior for this contract\n * @internal\n */\nclass ContractInterceptor {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * The next transaction executed will add/replace any overrides passed via the passed in hook.\n   * @remarks Overridden values will be applied to the next transaction executed.\n   * @example\n   * ```javascript\n   * contract.interceptor.overrideNextTransaction(() => ({\n   *   gasLimit: 3000000,\n   * }));\n   * ```\n   * @param hook - the hook to add or replace any CallOverrides (gas limit, gas price, nonce, from, value, etc...)\n   * @public\n   */\n  overrideNextTransaction(hook) {\n    this.contractWrapper.withTransactionOverride(hook);\n  }\n}\n\nexport { ContractInterceptor as C };\n"],"names":["Split","static","ADMIN_ROLE","chainId","this","_chainId","constructor","network","address","storage","options","arguments","length","undefined","abi","contractWrapper","ContractWrapper","AbiSchema","parse","metadata","ContractMetadata","SplitsContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","interceptor","ContractInterceptor","onNetworkUpdated","updateSignerOrProvider","getAddress","getAllRecipients","recipients","index","BigNumber","from","totalRecipients","read","lt","recipientAddress","push","getRecipientSplitPercentage","add","err","toLowerCase","includes","balanceOfAllRecipients","balances","recipient","balanceOf","balanceOfTokenAllRecipients","tokenAddress","resolvedToken","Promise","all","resolveAddress","balanceOfToken","resolvedAddress","walletBalance","totalReleased","getProvider","getBalance","totalReceived","_pendingPayment","walletAddress","resolvedWallet","ERC20Abi","default","erc20","Contract","alreadyReleased","value","fetchCurrencyValue","totalShares","walletsShares","splitPercentage","mul","div","toNumber","withdraw","buildTransactionFunction","async","Transaction","fromContractWrapper","method","args","withdrawToken","distribute","distributeToken","sub","prepare","overrides","call","functionName","overrideNextTransaction","hook","withTransactionOverride"],"sourceRoot":""}