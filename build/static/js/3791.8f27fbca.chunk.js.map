{"version":3,"file":"static/js/3791.8f27fbca.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/wallets/dist/zk-connector-fada2157.browser.esm.js","../node_modules/@thirdweb-dev/wallets/dist/http-rpc-client-0a079e80.browser.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './defineProperty-350fc508.browser.esm.js';\nimport { C as Connector } from './connector-05689d68.browser.esm.js';\nimport { H as HttpRpcClient } from './http-rpc-client-0a079e80.browser.esm.js';\nimport { e as isZkSyncChain, f as ENTRYPOINT_ADDRESS } from './utils-f58e7acc.browser.esm.js';\nimport { Signer, ethers, utils, BigNumber } from 'ethers';\nimport { defineReadOnly } from 'ethers/lib/utils';\nimport 'eventemitter3';\nimport './url-a45219bd.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport './headers-733a8199.browser.esm.js';\nimport '../evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js';\nimport '@thirdweb-dev/sdk';\nimport '@account-abstraction/contracts';\n\nconst DEFAULT_GAS_PER_PUBDATA_LIMIT = 50000;\nconst EIP712_TX_TYPE = 0x71;\nconst EIP712_TYPES = {\n  Transaction: [{\n    name: \"txType\",\n    type: \"uint256\"\n  }, {\n    name: \"from\",\n    type: \"uint256\"\n  }, {\n    name: \"to\",\n    type: \"uint256\"\n  }, {\n    name: \"gasLimit\",\n    type: \"uint256\"\n  }, {\n    name: \"gasPerPubdataByteLimit\",\n    type: \"uint256\"\n  }, {\n    name: \"maxFeePerGas\",\n    type: \"uint256\"\n  }, {\n    name: \"maxPriorityFeePerGas\",\n    type: \"uint256\"\n  }, {\n    name: \"paymaster\",\n    type: \"uint256\"\n  }, {\n    name: \"nonce\",\n    type: \"uint256\"\n  }, {\n    name: \"value\",\n    type: \"uint256\"\n  }, {\n    name: \"data\",\n    type: \"bytes\"\n  }, {\n    name: \"factoryDeps\",\n    type: \"bytes32[]\"\n  }, {\n    name: \"paymasterInput\",\n    type: \"bytes\"\n  }]\n};\nclass ZkWrappedSigner extends Signer {\n  constructor(signer, httpRpcClient) {\n    super();\n    this.signer = signer;\n    defineReadOnly(this, \"provider\", signer.provider);\n    this.httpRpcClient = httpRpcClient;\n  }\n  async getAddress() {\n    return await this.signer.getAddress();\n  }\n  async signMessage(message) {\n    return await this.signer.signMessage(message);\n  }\n  async signTransaction(transaction) {\n    return await this.signer.signTransaction(transaction);\n  }\n  connect(provider) {\n    return new ZkWrappedSigner(this.signer.connect(provider), this.httpRpcClient);\n  }\n  _signTypedData(domain, types, value) {\n    return this.signer._signTypedData(domain, types, value);\n  }\n  async sendTransaction(transaction) {\n    return await this.sendZkSyncTransaction(transaction);\n  }\n  async sendZkSyncTransaction(_transaction) {\n    let transaction = await this.populateTransaction(_transaction);\n    if (!transaction.chainId) {\n      throw new Error(\"ChainId is required to send a ZkSync transaction\");\n    }\n    if (!this.provider) {\n      throw new Error(\"Provider is required to send a ZkSync transaction\");\n    }\n    const address = await this.getAddress();\n    const gasLimit = ethers.BigNumber.from(transaction.gasLimit || (await this.provider.estimateGas(transaction))).mul(3);\n    const gasPrice = ethers.BigNumber.from(transaction.gasPrice || (await this.provider.getGasPrice())).mul(2);\n    if (!transaction.maxFeePerGas) {\n      transaction.maxFeePerGas = gasPrice;\n    } else {\n      transaction.maxFeePerGas = transaction.maxFeePerGas.mul(2);\n    }\n    if (!transaction.maxPriorityFeePerGas) {\n      transaction.maxPriorityFeePerGas = gasPrice;\n    } else {\n      transaction.maxPriorityFeePerGas = transaction.maxPriorityFeePerGas.mul(2);\n    }\n    transaction = {\n      ...transaction,\n      from: address,\n      gasLimit,\n      gasPrice,\n      chainId: (await this.provider.getNetwork()).chainId,\n      nonce: await this.provider.getTransactionCount(address),\n      type: 113,\n      value: BigInt(0)\n    };\n    const pmDataResult = await this.httpRpcClient?.zkPaymasterData(transaction);\n    transaction.customData = {\n      gasPerPubdata: DEFAULT_GAS_PER_PUBDATA_LIMIT,\n      factoryDeps: [],\n      paymasterParams: {\n        paymaster: pmDataResult.paymaster,\n        paymasterInput: pmDataResult.paymasterInput\n      }\n    };\n    const eip712tx = {\n      txType: EIP712_TX_TYPE,\n      from: BigInt(transaction.from || (await this.getAddress())).toString(),\n      to: BigInt(transaction.to || \"0x0\").toString(),\n      gasLimit: transaction.gasLimit ? Number(transaction.gasLimit) : 0,\n      gasPerPubdataByteLimit: DEFAULT_GAS_PER_PUBDATA_LIMIT,\n      maxFeePerGas: ethers.BigNumber.from(transaction.maxFeePerGas).toNumber(),\n      maxPriorityFeePerGas: ethers.BigNumber.from(transaction.maxPriorityFeePerGas).toNumber(),\n      paymaster: BigInt(pmDataResult.paymaster).toString(),\n      nonce: ethers.BigNumber.from(transaction.nonce).toNumber(),\n      value: ethers.BigNumber.from(transaction.value).toNumber(),\n      data: transaction.data || \"0x\",\n      factoryDeps: [],\n      paymasterInput: ethers.utils.arrayify(pmDataResult.paymasterInput)\n    };\n    const signature = await this._signTypedData({\n      name: \"zkSync\",\n      version: \"2\",\n      chainId: transaction.chainId\n    }, EIP712_TYPES, eip712tx);\n    const serializedTx = this.serialize(transaction, signature);\n    const zkSignedTx = {\n      from: transaction.from?.toString() || (await this.getAddress()),\n      to: transaction.to?.toString() || \"\",\n      gas: transaction.gasLimit?.toString() || \"\",\n      maxFeePerGas: transaction.maxFeePerGas?.toString() || \"0\",\n      maxPriorityFeePerGas: transaction.maxPriorityFeePerGas?.toString() || \"0\",\n      signedTransaction: serializedTx,\n      paymaster: pmDataResult.paymaster\n    };\n    const broadcastResult = await this.httpRpcClient?.zkBroadcastTransaction(zkSignedTx);\n    const hash = broadcastResult.transactionHash;\n    return await this.provider?.getTransaction(hash);\n  }\n  serialize(transaction, signature) {\n    if (!transaction.customData && transaction.type !== EIP712_TX_TYPE) {\n      return utils.serializeTransaction(transaction, signature);\n    }\n    if (!transaction.chainId) {\n      throw Error(\"Transaction chainId isn't set!\");\n    }\n    function formatNumber(value, name) {\n      const result = utils.stripZeros(BigNumber.from(value).toHexString());\n      if (result.length > 32) {\n        throw new Error(`Invalid length for ${name}!`);\n      }\n      return result;\n    }\n    if (!transaction.from) {\n      throw new Error(\"Explicitly providing `from` field is required for EIP712 transactions!\");\n    }\n    const from = transaction.from;\n    const meta = transaction.customData ?? {};\n    const maxFeePerGas = transaction.maxFeePerGas || transaction.gasPrice || 0;\n    const maxPriorityFeePerGas = transaction.maxPriorityFeePerGas || maxFeePerGas;\n    const fields = [formatNumber(transaction.nonce || 0, \"nonce\"), formatNumber(maxPriorityFeePerGas, \"maxPriorityFeePerGas\"), formatNumber(maxFeePerGas, \"maxFeePerGas\"), formatNumber(transaction.gasLimit || 0, \"gasLimit\"), transaction.to ? utils.getAddress(transaction.to) : \"0x\", formatNumber(transaction.value || 0, \"value\"), transaction.data || \"0x\"];\n    if (signature) {\n      const sig = utils.splitSignature(signature);\n      fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n      fields.push(utils.stripZeros(sig.r));\n      fields.push(utils.stripZeros(sig.s));\n    } else {\n      fields.push(formatNumber(transaction.chainId, \"chainId\"));\n      fields.push(\"0x\");\n      fields.push(\"0x\");\n    }\n    fields.push(formatNumber(transaction.chainId, \"chainId\"));\n    fields.push(utils.getAddress(from));\n\n    // Add meta\n    fields.push(formatNumber(meta.gasPerPubdata || DEFAULT_GAS_PER_PUBDATA_LIMIT, \"gasPerPubdata\"));\n    fields.push((meta.factoryDeps ?? []).map(dep => utils.hexlify(dep)));\n    if (meta.customSignature && ethers.utils.arrayify(meta.customSignature).length === 0) {\n      throw new Error(\"Empty signatures are not supported!\");\n    }\n    fields.push(meta.customSignature || \"0x\");\n    if (meta.paymasterParams) {\n      fields.push([meta.paymasterParams.paymaster, ethers.utils.hexlify(meta.paymasterParams.paymasterInput)]);\n    } else {\n      fields.push([]);\n    }\n    return utils.hexConcat([[EIP712_TX_TYPE], utils.RLP.encode(fields)]);\n  }\n}\n\nclass ZkSyncConnector extends Connector {\n  constructor(config) {\n    super();\n    _defineProperty(this, \"chainId\", 1);\n    this.config = config;\n  }\n  async connect(args) {\n    this.personalWallet = args.personalWallet;\n    this.chainId = await (await this.personalWallet.getSigner()).getChainId();\n    if (!(await isZkSyncChain(this.chainId))) {\n      throw new Error(\"Invalid zksync chain id\");\n    }\n    const bundlerUrl = this.config.bundlerUrl || `https://${this.chainId}.bundler.thirdweb.com`;\n    const entryPointAddress = this.config.entryPointAddress || ENTRYPOINT_ADDRESS;\n    this.httpRpcClient = new HttpRpcClient(bundlerUrl, entryPointAddress, this.chainId, this.config.clientId, this.config.secretKey);\n    return this.getAddress();\n  }\n  disconnect() {\n    throw new Error(\"Method not implemented.\");\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    return signer.getAddress();\n  }\n  async getSigner() {\n    if (!this.personalWallet) {\n      throw new Error(\"Wallet not connected\");\n    }\n    return new ZkWrappedSigner(await this.personalWallet.getSigner(), this.httpRpcClient);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  switchChain(chainId) {\n    throw new Error(\"Method not implemented.\");\n  }\n  isConnected() {\n    return Promise.resolve(!!this.personalWallet);\n  }\n  setupListeners() {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateChains(chains) {\n    throw new Error(\"Method not implemented.\");\n  }\n  async getProvider() {\n    if (!this.getSigner()) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    if (!signer.provider) {\n      throw new Error(\"Provider not found\");\n    }\n    return signer.provider;\n  }\n}\n\nexport { ZkSyncConnector };\n","import { utils, BigNumber, providers } from 'ethers';\nimport { i as isTwUrl } from './url-a45219bd.browser.esm.js';\nimport { s as setAnalyticsHeaders } from './headers-733a8199.browser.esm.js';\nimport { e as isZkSyncChain, M as MANAGED_ACCOUNT_GAS_BUFFER } from './utils-f58e7acc.browser.esm.js';\n\nasync function hexlifyUserOp(\n// TODO: types\nop) {\n  const userOp = await utils.resolveProperties(op);\n  return Object.keys(userOp).map(key => {\n    let val = userOp[key];\n    if (typeof val !== \"string\" || !val.startsWith(\"0x\")) {\n      val = utils.hexValue(val);\n    }\n    return [key, val];\n  }).reduce((set, _ref) => {\n    let [k, v] = _ref;\n    return {\n      ...set,\n      [k]: v\n    };\n  }, {});\n}\n\n// v0.6 userOpHash calculation\nasync function getUserOpHashV06(userOp, entryPoint, chainId) {\n  const op = await utils.resolveProperties(userOp);\n  const hashedUserOp = {\n    sender: op.sender,\n    nonce: op.nonce,\n    initCodeHash: utils.keccak256(op.initCode),\n    callDataHash: utils.keccak256(op.callData),\n    callGasLimit: op.callGasLimit,\n    verificationGasLimit: op.verificationGasLimit,\n    preVerificationGas: op.preVerificationGas,\n    maxFeePerGas: op.maxFeePerGas,\n    maxPriorityFeePerGas: op.maxPriorityFeePerGas,\n    paymasterAndDataHash: utils.keccak256(op.paymasterAndData)\n  };\n  const userOpType = {\n    components: [{\n      type: \"address\",\n      name: \"sender\"\n    }, {\n      type: \"uint256\",\n      name: \"nonce\"\n    }, {\n      type: \"bytes32\",\n      name: \"initCodeHash\"\n    }, {\n      type: \"bytes32\",\n      name: \"callDataHash\"\n    }, {\n      type: \"uint256\",\n      name: \"callGasLimit\"\n    }, {\n      type: \"uint256\",\n      name: \"verificationGasLimit\"\n    }, {\n      type: \"uint256\",\n      name: \"preVerificationGas\"\n    }, {\n      type: \"uint256\",\n      name: \"maxFeePerGas\"\n    }, {\n      type: \"uint256\",\n      name: \"maxPriorityFeePerGas\"\n    }, {\n      type: \"bytes32\",\n      name: \"paymasterAndDataHash\"\n    }],\n    name: \"hashedUserOp\",\n    type: \"tuple\"\n  };\n  const encoded = utils.defaultAbiCoder.encode([userOpType], [{\n    ...hashedUserOp\n  }]);\n  // remove leading word (total length) and trailing word (zero-length signature)\n\n  const userOpHash = utils.keccak256(encoded);\n  const enc = utils.defaultAbiCoder.encode([\"bytes32\", \"address\", \"uint256\"], [userOpHash, entryPoint, chainId]);\n  return utils.keccak256(enc);\n}\nconst generateRandomUint192 = () => {\n  const rand1 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand2 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand3 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand4 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand5 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand6 = BigInt(Math.floor(Math.random() * 0x100000000));\n  return rand1 << BigInt(160) | rand2 << BigInt(128) | rand3 << BigInt(96) | rand4 << BigInt(64) | rand5 << BigInt(32) | rand6;\n};\nconst randomNonce = () => {\n  let hexString = generateRandomUint192().toString(16);\n  if (hexString.length % 2 !== 0) {\n    hexString = \"0\" + hexString;\n  }\n  hexString = \"0x\" + hexString;\n  return BigNumber.from(utils.concat([hexString, \"0x0000000000000000\"]));\n};\n\nconst DEBUG = false; // TODO set as public flag\n\nclass HttpRpcClient {\n  constructor(bundlerUrl, entryPointAddress, chainId, clientId, secretKey) {\n    this.bundlerUrl = bundlerUrl;\n    this.entryPointAddress = entryPointAddress;\n    this.chainId = chainId;\n    const headers = {};\n    if (isTwUrl(this.bundlerUrl)) {\n      const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n      if (secretKey) {\n        headers[\"x-secret-key\"] = secretKey;\n      } else if (clientId) {\n        headers[\"x-client-id\"] = clientId;\n        if (bundleId) {\n          headers[\"x-bundle-id\"] = bundleId;\n        }\n      }\n\n      // Dashboard token\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      setAnalyticsHeaders(headers);\n    }\n    this.userOpJsonRpcProvider = new providers.StaticJsonRpcProvider({\n      url: this.bundlerUrl,\n      headers\n    }, {\n      name: \"Connected bundler network\",\n      chainId\n    });\n    this.initializing = this.validateChainId();\n  }\n  async validateChainId() {\n    if (await isZkSyncChain(this.chainId)) {\n      return;\n    }\n    // validate chainId is in sync with expected chainid\n    const chain = await this.userOpJsonRpcProvider.send(\"eth_chainId\", []);\n    const bundlerChain = parseInt(chain);\n    if (bundlerChain !== this.chainId) {\n      throw new Error(`bundler ${this.bundlerUrl} is on chainId ${bundlerChain}, but provider is on chainId ${this.chainId}`);\n    }\n  }\n\n  /**\n   * send a UserOperation to the bundler\n   * @param userOp1 - The UserOperation to send\n   * @returns userOpHash the id of this operation, for getUserOperationTransaction\n   */\n  async sendUserOpToBundler(userOp1) {\n    await this.initializing;\n    const hexifiedUserOp = await hexlifyUserOp(userOp1);\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n    await this.printUserOperation(\"eth_sendUserOperation\", jsonRequestData);\n    return await this.userOpJsonRpcProvider.send(\"eth_sendUserOperation\", [hexifiedUserOp, this.entryPointAddress]);\n  }\n  async estimateUserOpGas(userOp) {\n    await this.initializing;\n    const hexifiedUserOp = await hexlifyUserOp(userOp);\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n    await this.printUserOperation(\"eth_estimateUserOperationGas\", jsonRequestData);\n    const data = await this.userOpJsonRpcProvider.send(\"eth_estimateUserOperationGas\", [hexifiedUserOp, this.entryPointAddress]);\n    // adds gas buffer to callGasLimit to account for ManagedAccountFactory delegate calls\n    return {\n      preVerificationGas: BigNumber.from(data.preVerificationGas),\n      verificationGas: BigNumber.from(data.verificationGas),\n      verificationGasLimit: BigNumber.from(data.verificationGasLimit),\n      callGasLimit: BigNumber.from(data.callGasLimit).add(MANAGED_ACCOUNT_GAS_BUFFER)\n    };\n  }\n  async getUserOperationGasPrice() {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"thirdweb_getUserOperationGasPrice\", []);\n  }\n  async getUserOperationReceipt(userOpHash) {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"eth_getUserOperationReceipt\", [userOpHash]);\n  }\n  async zkPaymasterData(transactionInput) {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"zk_paymasterData\", [await hexlifyUserOp({\n      ...transactionInput,\n      gas: transactionInput.gasLimit\n    })]);\n  }\n  async zkBroadcastTransaction(transactionInput) {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"zk_broadcastTransaction\", [transactionInput]);\n  }\n  async printUserOperation(method, _ref) {\n    {\n      return;\n    }\n  }\n}\n\nexport { DEBUG as D, HttpRpcClient as H, getUserOpHashV06 as g, hexlifyUserOp as h, randomNonce as r };\n"],"names":["DEFAULT_GAS_PER_PUBDATA_LIMIT","EIP712_TYPES","Transaction","name","type","ZkWrappedSigner","Signer","constructor","signer","httpRpcClient","super","this","defineReadOnly","provider","getAddress","signMessage","message","signTransaction","transaction","connect","_signTypedData","domain","types","value","sendTransaction","sendZkSyncTransaction","_transaction","populateTransaction","chainId","Error","address","gasLimit","ethers","from","estimateGas","mul","gasPrice","getGasPrice","maxFeePerGas","maxPriorityFeePerGas","getNetwork","nonce","getTransactionCount","BigInt","pmDataResult","zkPaymasterData","customData","gasPerPubdata","factoryDeps","paymasterParams","paymaster","paymasterInput","eip712tx","txType","toString","to","Number","gasPerPubdataByteLimit","toNumber","data","signature","version","serializedTx","serialize","zkSignedTx","gas","signedTransaction","hash","zkBroadcastTransaction","transactionHash","getTransaction","utils","formatNumber","result","BigNumber","toHexString","length","meta","fields","sig","push","recoveryParam","r","s","map","dep","customSignature","ZkSyncConnector","Connector","config","_defineProperty","args","personalWallet","getSigner","getChainId","isZkSyncChain","bundlerUrl","entryPointAddress","ENTRYPOINT_ADDRESS","HttpRpcClient","clientId","secretKey","disconnect","switchChain","isConnected","Promise","resolve","setupListeners","updateChains","chains","getProvider","async","hexlifyUserOp","op","userOp","Object","keys","key","val","startsWith","reduce","set","_ref","k","v","getUserOpHashV06","entryPoint","hashedUserOp","sender","initCodeHash","initCode","callDataHash","callData","callGasLimit","verificationGasLimit","preVerificationGas","paymasterAndDataHash","paymasterAndData","encoded","encode","components","userOpHash","enc","randomNonce","hexString","generateRandomUint192","rand1","Math","floor","random","rand2","rand3","rand4","rand5","rand6","DEBUG","headers","isTwUrl","bundleId","globalThis","APP_BUNDLE_ID","undefined","TW_AUTH_TOKEN","TW_CLI_AUTH_TOKEN","setAnalyticsHeaders","userOpJsonRpcProvider","providers","url","initializing","validateChainId","chain","send","bundlerChain","parseInt","sendUserOpToBundler","userOp1","hexifiedUserOp","jsonRequestData","printUserOperation","estimateUserOpGas","verificationGas","add","MANAGED_ACCOUNT_GAS_BUFFER","getUserOperationGasPrice","getUserOperationReceipt","transactionInput","method"],"sourceRoot":""}