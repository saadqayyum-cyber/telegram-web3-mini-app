{"version":3,"file":"static/js/2738.fbc9c02b.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/edition-drop-294e1578.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/erc-1155-standard-a5888d37.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/contract-sales-918c7cb8.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/contract-platform-fee-e756e68f.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/thirdweb-checkout-f6974aaf.browser.esm.js"],"sourcesContent":["import { BigNumber, constants } from 'ethers';\nimport { dG as NFT_BASE_CONTRACT_ROLES, cs as ContractWrapper, bj as AbiSchema, bX as DropErc1155ContractSchema, H as getRoleHash } from './index-33cd3415.browser.esm.js';\nimport { f as buildTransactionFunction, T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport { C as ContractMetadata, b as ContractAppURI, a as ContractEvents, G as GasCostEstimator } from './contract-appuri-5c40af52.browser.esm.js';\nimport { C as ContractEncoder } from './fetchCurrencyValue-32d08b05.browser.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\nimport { C as ContractRoyalty, a as ContractOwner } from './contract-owner-49e75547.browser.esm.js';\nimport { C as ContractPlatformFee } from './contract-platform-fee-e756e68f.browser.esm.js';\nimport { C as ContractRoles } from './contract-roles-71988d2e.browser.esm.js';\nimport { C as ContractPrimarySale } from './contract-sales-918c7cb8.browser.esm.js';\nimport { D as DropErc1155ClaimConditions } from './erc-1155-7ce9bee1.browser.esm.js';\nimport { S as StandardErc1155 } from './erc-1155-standard-a5888d37.browser.esm.js';\nimport { P as PaperCheckout } from './thirdweb-checkout-f6974aaf.browser.esm.js';\nimport 'zod';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport '@thirdweb-dev/storage';\nimport './setErc20Allowance-7f76f677.browser.esm.js';\nimport './QueryParams-32a56510.browser.esm.js';\nimport './signature-d3ea643d.browser.esm.js';\nimport './normalizePriceValue-9851c0eb.browser.esm.js';\nimport '@thirdweb-dev/merkletree';\nimport './assertEnabled-d1700f0b.browser.esm.js';\nimport 'uuid';\nimport 'fast-deep-equal';\n\n/**\n * Manages history for Edition Drop contracts\n * @public\n */\nclass DropErc1155History {\n  constructor(events) {\n    this.events = events;\n  }\n\n  /**\n   * Get all claimer addresses\n   *\n   * @remarks Get a list of all the addresses that have claimed a token\n   * @param tokenId - the tokenId of the NFT to get the addresses of*\n   * @returns  A unique list of addresses that claimed the token\n   * @example\n   * ```javascript\n   * const tokenId = \"0\";\n   * const allClaimerAddresses = await contract.history.getAllClaimerAddresses(tokenId);\n   * ```\n   */\n  async getAllClaimerAddresses(tokenId) {\n    const a = (await this.events.getEvents(\"TokensClaimed\")).filter(e => e.data && BigNumber.isBigNumber(e.data.tokenId) ? e.data.tokenId.eq(tokenId) : false);\n    return Array.from(new Set(a.filter(b => typeof b.data?.claimer === \"string\").map(b => b.data.claimer)));\n  }\n}\n\n/**\n * Setup a collection of NFTs with a customizable number of each NFT that are minted as users claim them.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"edition-drop\");\n * ```\n *\n * @internal\n * @deprecated use contract.erc1155 instead\n */\nclass EditionDrop extends StandardErc1155 {\n  static contractRoles = NFT_BASE_CONTRACT_ROLES;\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Configure claim conditions for each NFT\n   * @remarks Define who can claim each NFT in the edition, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   *\n   * const tokenId = 0; // the id of the NFT to set claim conditions on\n   * await contract.claimConditions.set(tokenId, claimConditions);\n   * ```\n   */\n\n  /**\n   * Checkout\n   * @remarks Create a FIAT currency checkout for your NFT drop.\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi);\n    this.metadata = new ContractMetadata(this.contractWrapper, DropErc1155ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, EditionDrop.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.claimConditions = new DropErc1155ClaimConditions(this.contractWrapper, this.metadata, this.storage);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.history = new DropErc1155History(this.events);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.checkout = new PaperCheckout(this.contractWrapper);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  // TODO getAllClaimerAddresses() - should be done via an indexer\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc1155.getAll(queryParams);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async getOwned(walletAddress, queryParams) {\n    return this.erc1155.getOwned(walletAddress, queryParams);\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @returns The total number of NFTs minted in this contract\n   * @public\n   */\n  async getTotalCount() {\n    return this.erc1155.totalCount();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [getRoleHash(\"transfer\"), constants.AddressZero]);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create a batch of NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   */\n  createBatch = /* @__PURE__ */buildTransactionFunction(async (metadatas, options) => {\n    return this.erc1155.lazyMint.prepare(metadatas, options);\n  });\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param claimData - Optional claim verification data (e.g. price, allowlist proof, etc...)\n   *\n   * @deprecated Use `contract.erc1155.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, tokenId, quantity) {\n    let checkERC20Allowance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    return this.erc1155.getClaimTransaction(destinationAddress, tokenId, quantity, {\n      checkERC20Allowance\n    });\n  }\n\n  /**\n   * Claim NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const tokenId = 0; // the id of the NFT you want to claim\n   * const quantity = 1; // how many NFTs you want to claim\n   *\n   * const tx = await contract.claimTo(address, tokenId, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param proofs - Array of proofs\n   *\n   * @returns  Receipt for the transaction\n   */\n  claimTo = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (destinationAddress, tokenId, quantity) {\n      let checkERC20Allowance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      return _this.erc1155.claimTo.prepare(destinationAddress, tokenId, quantity, {\n        checkERC20Allowance\n      });\n    };\n  })());\n\n  /**\n   * Claim a token to the connected wallet\n   *\n   * @remarks See {@link EditionDrop.claimTo}\n   *\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param proofs - Array of proofs\n   *\n   * @returns  Receipt for the transaction\n   */\n  claim = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this2 = this;\n    return async function (tokenId, quantity) {\n      let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      const address = await _this2.contractWrapper.getSignerAddress();\n      return _this2.claimTo.prepare(address, tokenId, quantity, checkERC20Allowance);\n    };\n  })());\n\n  /**\n   * Burn a specified amount of a NFT\n   *\n   * @param tokenId - the token Id to burn\n   * @param amount - amount to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.burnTokens(tokenId, amount);\n   * ```\n   */\n  burnTokens = /* @__PURE__ */buildTransactionFunction(async (tokenId, amount) => {\n    return this.erc1155.burn.prepare(tokenId, amount);\n  });\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { EditionDrop };\n","import { f as buildTransactionFunction } from './transactions-72f9603c.browser.esm.js';\nimport { E as Erc1155 } from './erc-1155-7ce9bee1.browser.esm.js';\n\n/**\n * Standard ERC1155 NFT functions\n * @remarks Basic functionality for a ERC1155 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.transfer(walletAddress, tokenId, quantity);\n * ```\n * @public\n */\nclass StandardErc1155 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc1155 = new Erc1155(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  ////// Standard ERC1155 functions //////\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const nft = await contract.get(\"0\");\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc1155.get(tokenId);\n  }\n\n  /**\n   * Returns the total supply of a specific token\n   * @param tokenId - The token ID to get the total supply of\n   * @returns The total supply\n   */\n  async totalSupply(tokenId) {\n    return this.erc1155.totalSupply(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0; // Id of the NFT to check\n   * const balance = await contract.balanceOf(walletAddress, tokenId);\n   * ```\n   */\n  async balanceOf(address, tokenId) {\n    return this.erc1155.balanceOf(address, tokenId);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance(tokenId) {\n    return this.erc1155.balance(tokenId);\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc1155.isApproved(address, operator);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"{{wallet_address}}\";\n   * const tokenId = \"0\"; // The token ID of the NFT you want to send\n   * const amount = 3; // How many copies of the NFTs to transfer\n   * await contract.transfer(toAddress, tokenId, amount);\n   * ```\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (to, tokenId, amount) {\n      let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0];\n      return _this.erc1155.transfer.prepare(to, tokenId, amount, data);\n    };\n  })());\n\n  /**\n   * Transfer multiple NFTs\n   * \n   * @remarks Transfer multiple NFTs from the connected wallet to another wallet.\n   * \n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFTs to\n   * const toAddress = \"{{wallet_address}}\";\n   * // Array of token IDs of the NFTs you want to send\n   * const tokenIds = [\"0\", \"1\", \"2\"];\n   * // Array of amounts of the NFTs you want to send\n   * const amounts = [1, 2, 3];\n   * await contract.transferBatch(toAddress, tokenIds, amounts);\n   * ```\n   */\n  transferBatch = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this2 = this;\n    return async function (to, tokenIds, amounts, fromAddress) {\n      let data = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [0];\n      return _this2.erc1155.transferBatch.prepare(to, tokenIds, amounts, fromAddress, data);\n    };\n  })());\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  setApprovalForAll = /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\n    return this.erc1155.setApprovalForAll.prepare(operator, approved);\n  });\n\n  /**\n   * Airdrop multiple NFTs\n   *\n   * @remarks Airdrop one or multiple NFTs to the provided wallet addresses.\n   * @twfeature ERC1155\n   * @example\n   * ```javascript\n   * // The token ID of the NFT you want to airdrop\n   * const tokenId = \"0\";\n   * // Array of objects of addresses and quantities to airdrop NFTs to\n   * const addresses = [\n   *  {\n   *    address: \"0x...\",\n   *    quantity: 2,\n   *  },\n   *  {\n   *   address: \"0x...\",\n   *    quantity: 3,\n   *  },\n   * ];\n   * await contract.airdrop(tokenId, addresses);\n   *\n   * // You can also pass an array of addresses, it will airdrop 1 NFT per address\n   * const tokenId = \"0\";\n   * const addresses = [\n   *  \"0x...\", \"0x...\", \"0x...\",\n   * ]\n   * await contract.airdrop(tokenId, addresses);\n   * ```\n   */\n  airdrop = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this3 = this;\n    return async function (tokenId, addresses, fromAddress) {\n      let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0];\n      return _this3.erc1155.airdrop.prepare(tokenId, addresses, fromAddress, data);\n    };\n  })());\n}\n\nexport { StandardErc1155 as S };\n","import { f as buildTransactionFunction, T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport { d7 as FEATURE_PRIMARY_SALE } from './index-33cd3415.browser.esm.js';\n\n/**\n * Handle primary sales recipients\n * @remarks Configure primary sale recipients for an entire contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const salesRecipient = await contract.sales.getRecipient();\n * await contract.sales.setRecipient(recipientWalletAddress);\n * ```\n * @public\n */\nclass ContractPrimarySale {\n  featureName = FEATURE_PRIMARY_SALE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the primary sale recipient\n   * @returns The wallet address.\n   * @example\n   * ```javascript\n   * const salesRecipient = await contract.sales.getRecipient();\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  async getRecipient() {\n    const result = await this.contractWrapper.read(\"primarySaleRecipient\", []);\n    return result;\n  }\n\n  /**\n   * Set the primary sale recipient\n   * @param recipient - the wallet address\n   * @example\n   * ```javascript\n   * await contract.sales.setRecipient(recipientWalletAddress);\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  setRecipient = /* @__PURE__ */buildTransactionFunction(async recipient => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPrimarySaleRecipient\",\n      args: [recipient]\n    });\n  });\n}\n\nexport { ContractPrimarySale as C };\n","import { f as buildTransactionFunction, T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport { du as FEATURE_PLATFORM_FEE, bH as CommonPlatformFeeSchema } from './index-33cd3415.browser.esm.js';\n\n/**\n * Handle platform fees and recipients\n * @remarks Configure platform fees for a contract, which can be applied on certain paid transactions\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const feeInfo = await contract.platformFees.get();\n * await contract.platformFees.set({\n *   platform_fee_basis_points: 100, // 1% fee\n *   platform_fee_recipient: \"0x...\" // the fee recipient\n * })\n * ```\n * @public\n */\nclass ContractPlatformFee {\n  featureName = FEATURE_PLATFORM_FEE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the platform fee recipient and basis points\n   *\n   * @example\n   * ```javascript\n   * const feeInfo = await contract.platformFees.get();\n   * console.log(feeInfo.platform_fee_recipient);\n   * console.log(feeInfo.platform_fee_basis_points);\n   * ```\n   * @twfeature PlatformFee\n   */\n  async get() {\n    const [platformFeeRecipient, platformFeeBps] = await this.contractWrapper.read(\"getPlatformFeeInfo\", []);\n    return CommonPlatformFeeSchema.parseAsync({\n      platform_fee_recipient: platformFeeRecipient,\n      platform_fee_basis_points: platformFeeBps\n    });\n  }\n\n  /**\n   * Set the platform fee recipient and basis points\n   *\n   * @example\n   * ```javascript\n   * await contract.platformFees.set({\n   *   platform_fee_basis_points: 100, // 1% fee\n   *   platform_fee_recipient: \"0x...\" // the fee recipient\n   * })\n   * ```\n   *\n   * @param platformFeeInfo - the platform fee information\n   * @twfeature PlatformFee\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async platformFeeInfo => {\n    const parsed = await CommonPlatformFeeSchema.parseAsync(platformFeeInfo);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPlatformFeeInfo\",\n      args: [parsed.platform_fee_recipient, parsed.platform_fee_basis_points]\n    });\n  });\n}\n\nexport { ContractPlatformFee as C };\n","import { aS as ChainId } from './index-33cd3415.browser.esm.js';\nimport invariant from 'tiny-invariant';\n\nconst PAPER_API_BASE = `https://paper.xyz/api`;\nconst PAPER_API_VERSION = `2022-08-12`;\n\n/**\n * @internal\n */\nconst PAPER_API_URL = `${PAPER_API_BASE}/${PAPER_API_VERSION}/platform/thirdweb`;\nconst PAPER_CHAIN_ID_MAP = {\n  [ChainId.Mainnet]: \"Ethereum\",\n  [ChainId.Goerli]: \"Goerli\",\n  [ChainId.Polygon]: \"Polygon\",\n  [ChainId.Mumbai]: \"Mumbai\",\n  [ChainId.Avalanche]: \"Avalanche\"\n};\n\n/**\n * @internal\n */\nfunction parseChainIdToPaperChain(chainId) {\n  invariant(chainId in PAPER_CHAIN_ID_MAP, `chainId not supported by paper: ${chainId}`);\n  return PAPER_CHAIN_ID_MAP[chainId];\n}\n/**\n *\n * @param contractAddress - the contract address\n * @param chainId - the chain id\n * @internal\n * @returns The paper xyz contract id\n * @throws if the contract is not registered on paper xyz\n */\nasync function fetchRegisteredCheckoutId(contractAddress, chainId) {\n  const paperChain = parseChainIdToPaperChain(chainId);\n  const res = await fetch(`${PAPER_API_URL}/register-contract?contractAddress=${contractAddress}&chain=${paperChain}`);\n  const json = await res.json();\n  invariant(json.result.id, \"Contract is not registered with paper\");\n  return json.result.id;\n}\n\n/**\n * The parameters for creating a paper.xyz checkout link.\n * @public\n */\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\n\nconst DEFAULT_PARAMS = {\n  expiresInMinutes: 15,\n  feeBearer: \"BUYER\",\n  sendEmailOnSuccess: true,\n  redirectAfterPayment: false\n};\n\n/**\n * @internal\n */\nasync function createCheckoutLinkIntent(contractId, params) {\n  const res = await fetch(`${PAPER_API_URL}/checkout-link-intent`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      contractId,\n      ...DEFAULT_PARAMS,\n      ...params,\n      metadata: {\n        ...params.metadata,\n        via_platform: \"thirdweb\"\n      },\n      // overrides that are hard coded\n      hideNativeMint: true,\n      hidePaperWallet: !!params.walletAddress,\n      hideExternalWallet: true,\n      hidePayWithCrypto: true,\n      usePaperKey: false\n    })\n  });\n  const json = await res.json();\n  invariant(json.checkoutLinkIntentUrl, \"Failed to create checkout link intent\");\n  return json.checkoutLinkIntentUrl;\n}\n\n/**\n * @internal\n */\nclass PaperCheckout {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n  async getCheckoutId() {\n    return fetchRegisteredCheckoutId(this.contractWrapper.address, await this.contractWrapper.getChainID());\n  }\n  async isEnabled() {\n    try {\n      return !!(await this.getCheckoutId());\n    } catch (err) {\n      return false;\n    }\n  }\n  async createLinkIntent(params) {\n    return await createCheckoutLinkIntent(await this.getCheckoutId(), params);\n  }\n}\n\nexport { PaperCheckout as P };\n"],"names":["DropErc1155History","constructor","events","this","getAllClaimerAddresses","tokenId","a","getEvents","filter","e","data","BigNumber","isBigNumber","eq","Array","from","Set","b","claimer","map","EditionDrop","StandardErc1155","static","NFT_BASE_CONTRACT_ROLES","network","address","storage","options","arguments","length","undefined","abi","chainId","super","ContractWrapper","AbiSchema","parse","metadata","ContractMetadata","contractWrapper","DropErc1155ContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","royalties","ContractRoyalty","sales","ContractPrimarySale","claimConditions","DropErc1155ClaimConditions","ContractEvents","history","encoder","ContractEncoder","estimator","GasCostEstimator","platformFees","ContractPlatformFee","interceptor","ContractInterceptor","checkout","PaperCheckout","owner","ContractOwner","onNetworkUpdated","updateSignerOrProvider","getAddress","getAll","queryParams","erc1155","getOwned","walletAddress","getTotalCount","totalCount","isTransferRestricted","read","getRoleHash","constants","createBatch","buildTransactionFunction","async","metadatas","lazyMint","prepare","getClaimTransaction","destinationAddress","quantity","checkERC20Allowance","claimTo","_this","claim","_this2","getSignerAddress","burnTokens","amount","burn","method","args","overrides","Transaction","fromContractWrapper","call","functionName","_chainId","Erc1155","get","totalSupply","balanceOf","balance","isApproved","operator","transfer","to","transferBatch","tokenIds","amounts","fromAddress","setApprovalForAll","approved","airdrop","_this3","addresses","featureName","FEATURE_PRIMARY_SALE","name","getRecipient","setRecipient","recipient","FEATURE_PLATFORM_FEE","platformFeeRecipient","platformFeeBps","CommonPlatformFeeSchema","parseAsync","platform_fee_recipient","platform_fee_basis_points","set","parsed","platformFeeInfo","PAPER_API_URL","PAPER_CHAIN_ID_MAP","ChainId","Mainnet","Goerli","Polygon","Mumbai","Avalanche","fetchRegisteredCheckoutId","contractAddress","paperChain","invariant","parseChainIdToPaperChain","res","fetch","json","result","id","DEFAULT_PARAMS","expiresInMinutes","feeBearer","sendEmailOnSuccess","redirectAfterPayment","getCheckoutId","getChainID","isEnabled","err","createLinkIntent","params","contractId","headers","body","JSON","stringify","via_platform","hideNativeMint","hidePaperWallet","hideExternalWallet","hidePayWithCrypto","usePaperKey","checkoutLinkIntentUrl","createCheckoutLinkIntent"],"sourceRoot":""}