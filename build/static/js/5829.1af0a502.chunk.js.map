{"version":3,"file":"static/js/5829.1af0a502.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/erc-1155-standard-a5888d37.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/pack-29c3a58f.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/pack-02f90278.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/marketplace-e3129e2f.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/hasERC20Allowance-654a940b.browser.esm.js"],"sourcesContent":["import { f as buildTransactionFunction } from './transactions-72f9603c.browser.esm.js';\nimport { E as Erc1155 } from './erc-1155-7ce9bee1.browser.esm.js';\n\n/**\n * Standard ERC1155 NFT functions\n * @remarks Basic functionality for a ERC1155 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.transfer(walletAddress, tokenId, quantity);\n * ```\n * @public\n */\nclass StandardErc1155 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc1155 = new Erc1155(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  ////// Standard ERC1155 functions //////\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const nft = await contract.get(\"0\");\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc1155.get(tokenId);\n  }\n\n  /**\n   * Returns the total supply of a specific token\n   * @param tokenId - The token ID to get the total supply of\n   * @returns The total supply\n   */\n  async totalSupply(tokenId) {\n    return this.erc1155.totalSupply(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0; // Id of the NFT to check\n   * const balance = await contract.balanceOf(walletAddress, tokenId);\n   * ```\n   */\n  async balanceOf(address, tokenId) {\n    return this.erc1155.balanceOf(address, tokenId);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance(tokenId) {\n    return this.erc1155.balance(tokenId);\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc1155.isApproved(address, operator);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"{{wallet_address}}\";\n   * const tokenId = \"0\"; // The token ID of the NFT you want to send\n   * const amount = 3; // How many copies of the NFTs to transfer\n   * await contract.transfer(toAddress, tokenId, amount);\n   * ```\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (to, tokenId, amount) {\n      let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0];\n      return _this.erc1155.transfer.prepare(to, tokenId, amount, data);\n    };\n  })());\n\n  /**\n   * Transfer multiple NFTs\n   * \n   * @remarks Transfer multiple NFTs from the connected wallet to another wallet.\n   * \n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFTs to\n   * const toAddress = \"{{wallet_address}}\";\n   * // Array of token IDs of the NFTs you want to send\n   * const tokenIds = [\"0\", \"1\", \"2\"];\n   * // Array of amounts of the NFTs you want to send\n   * const amounts = [1, 2, 3];\n   * await contract.transferBatch(toAddress, tokenIds, amounts);\n   * ```\n   */\n  transferBatch = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this2 = this;\n    return async function (to, tokenIds, amounts, fromAddress) {\n      let data = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [0];\n      return _this2.erc1155.transferBatch.prepare(to, tokenIds, amounts, fromAddress, data);\n    };\n  })());\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  setApprovalForAll = /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\n    return this.erc1155.setApprovalForAll.prepare(operator, approved);\n  });\n\n  /**\n   * Airdrop multiple NFTs\n   *\n   * @remarks Airdrop one or multiple NFTs to the provided wallet addresses.\n   * @twfeature ERC1155\n   * @example\n   * ```javascript\n   * // The token ID of the NFT you want to airdrop\n   * const tokenId = \"0\";\n   * // Array of objects of addresses and quantities to airdrop NFTs to\n   * const addresses = [\n   *  {\n   *    address: \"0x...\",\n   *    quantity: 2,\n   *  },\n   *  {\n   *   address: \"0x...\",\n   *    quantity: 3,\n   *  },\n   * ];\n   * await contract.airdrop(tokenId, addresses);\n   *\n   * // You can also pass an array of addresses, it will airdrop 1 NFT per address\n   * const tokenId = \"0\";\n   * const addresses = [\n   *  \"0x...\", \"0x...\", \"0x...\",\n   * ]\n   * await contract.airdrop(tokenId, addresses);\n   * ```\n   */\n  airdrop = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this3 = this;\n    return async function (tokenId, addresses, fromAddress) {\n      let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0];\n      return _this3.erc1155.airdrop.prepare(tokenId, addresses, fromAddress, data);\n    };\n  })());\n}\n\nexport { StandardErc1155 as S };\n","import { N as NFTInputOrUriSchema } from './setErc20Allowance-7f76f677.browser.esm.js';\nimport { cw as AmountSchema, b6 as BigNumberishSchema, b9 as AddressOrEnsSchema } from './index-33cd3415.browser.esm.js';\nimport { R as RawDateSchema } from './assertEnabled-d1700f0b.browser.esm.js';\nimport { z } from 'zod';\n\n/**\n * @internal\n */\nconst CommonWrappableSchema = /* @__PURE__ */(() => z.object({\n  contractAddress: AddressOrEnsSchema\n}))();\n\n/**\n * @internal\n */\nconst ERC20WrappableSchema = /* @__PURE__ */(() => CommonWrappableSchema.extend({\n  quantity: AmountSchema\n}))();\n\n/**\n * @internal\n */\nconst ERC721WrappableSchema = /* @__PURE__ */(() => CommonWrappableSchema.extend({\n  tokenId: BigNumberishSchema\n}))();\n\n/**\n * @internal\n */\nconst ERC1155WrappableSchema = /* @__PURE__ */(() => CommonWrappableSchema.extend({\n  tokenId: BigNumberishSchema,\n  quantity: BigNumberishSchema\n}))();\n\n/**\n * @internal\n */\nconst ERC20RewardSchema = /* @__PURE__ */(() => ERC20WrappableSchema.omit({\n  quantity: true\n}).extend({\n  quantityPerReward: AmountSchema\n}))();\n\n/**\n * @internal\n */\nconst ERC721RewardSchema = ERC721WrappableSchema;\n\n/**\n * @internal\n */\nconst ERC1155RewardSchema = /* @__PURE__ */(() => ERC1155WrappableSchema.omit({\n  quantity: true\n}).extend({\n  quantityPerReward: BigNumberishSchema\n}))();\n\n/**\n * @internal\n */\nconst ERC20RewardContentsSchema = /* @__PURE__ */(() => ERC20RewardSchema.extend({\n  totalRewards: BigNumberishSchema.default(\"1\")\n}))();\n\n/**\n * @internal\n */\nconst ERC721RewardContentsSchema = ERC721RewardSchema;\n\n/**\n * @internal\n */\nconst ERC1155RewardContentsSchema = /* @__PURE__ */(() => ERC1155RewardSchema.extend({\n  totalRewards: BigNumberishSchema.default(\"1\")\n}))();\n\n/**\n * @internal\n */\nconst PackRewardsSchema = /* @__PURE__ */(() => z.object({\n  erc20Rewards: z.array(ERC20RewardSchema).default([]),\n  erc721Rewards: z.array(ERC721RewardSchema).default([]),\n  erc1155Rewards: z.array(ERC1155RewardSchema).default([])\n}))();\n\n/**\n * @internal\n */\nconst PackRewardsOutputSchema = /* @__PURE__ */(() => z.object({\n  erc20Rewards: z.array(ERC20RewardContentsSchema).default([]),\n  erc721Rewards: z.array(ERC721RewardContentsSchema).default([]),\n  erc1155Rewards: z.array(ERC1155RewardContentsSchema).default([])\n}))();\n\n/**\n * @internal\n */\nconst PackMetadataInputSchema = /* @__PURE__ */(() => PackRewardsOutputSchema.extend({\n  packMetadata: NFTInputOrUriSchema,\n  rewardsPerPack: BigNumberishSchema.default(\"1\"),\n  openStartTime: RawDateSchema.default(new Date())\n}))();\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\nexport { ERC20WrappableSchema as E, PackRewardsSchema as P, ERC721WrappableSchema as a, ERC1155WrappableSchema as b, PackRewardsOutputSchema as c, PackMetadataInputSchema as d };\n","import { BigNumber, utils, constants } from 'ethers';\nimport { f as fetchCurrencyMetadata, C as ContractEncoder } from './fetchCurrencyValue-32d08b05.browser.esm.js';\nimport { h as hasERC20Allowance } from './hasERC20Allowance-654a940b.browser.esm.js';\nimport { n as normalizePriceValue } from './normalizePriceValue-9851c0eb.browser.esm.js';\nimport { dK as FEATURE_PACK_VRF, cs as ContractWrapper, aL as resolveAddress, aY as LINK_TOKEN_ADDRESS, dL as PACK_CONTRACT_ROLES, bj as AbiSchema, c3 as PackContractSchema, H as getRoleHash } from './index-33cd3415.browser.esm.js';\nimport { a as assertEnabled } from './assertEnabled-d1700f0b.browser.esm.js';\nimport { a as ContractEvents, C as ContractMetadata, b as ContractAppURI, G as GasCostEstimator, d as detectContractFeature } from './contract-appuri-5c40af52.browser.esm.js';\nimport { i as isTokenApprovedForTransfer } from './marketplace-e3129e2f.browser.esm.js';\nimport { b as uploadOrExtractURI } from './QueryParams-32a56510.browser.esm.js';\nimport { f as buildTransactionFunction, T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\nimport { C as ContractRoyalty, a as ContractOwner } from './contract-owner-49e75547.browser.esm.js';\nimport { C as ContractRoles } from './contract-roles-71988d2e.browser.esm.js';\nimport { S as StandardErc1155 } from './erc-1155-standard-a5888d37.browser.esm.js';\nimport IPackVRFAbi from '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport { E as Erc20 } from './erc-20-9a18a51c.browser.esm.js';\nimport { c as PackRewardsOutputSchema, d as PackMetadataInputSchema } from './pack-29c3a58f.browser.esm.js';\nimport 'zod';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport '@thirdweb-dev/storage';\nimport './setErc20Allowance-7f76f677.browser.esm.js';\nimport './signature-d3ea643d.browser.esm.js';\nimport '@thirdweb-dev/merkletree';\nimport 'uuid';\nimport './erc-1155-7ce9bee1.browser.esm.js';\nimport 'fast-deep-equal';\nimport './drop-claim-conditions-e6f2abbf.browser.esm.js';\n\nclass PackVRF {\n  featureName = FEATURE_PACK_VRF.name;\n  constructor(network, address, storage, options, chainId) {\n    let contractWrapper = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new ContractWrapper(network, address, IPackVRFAbi, options, storage);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.chainId = chainId;\n    this.events = new ContractEvents(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /**\n   * Open pack\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const amount = 1;\n   * const receipt = await contract.pack.open(tokenId, amount);\n   * ```\n   *\n   * @remarks\n   * Open a pack using Chainlink VRFs random number generation\n   * This will return a transaction result with the requestId of the open request, NOT the contents of the pack\n   * To get the contents of the pack, you must call claimRewards once the VRF request has been fulfilled\n   * You can use the canClaimRewards method to check if the VRF request has been fulfilled\n   *\n   * @param tokenId - the id of the pack to open\n   * @param amount - Optional: the amount of packs to open, defaults to 1\n   * @returns\n   * @twfeature PackVRF\n   */\n  open = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (tokenId) {\n      let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this.contractWrapper,\n        method: \"openPack\",\n        args: [tokenId, amount],\n        overrides: {\n          // Higher gas limit for opening packs\n          gasLimit\n        },\n        parse: receipt => {\n          let id = BigNumber.from(0);\n          try {\n            const event = _this.contractWrapper.parseLogs(\"PackOpenRequested\", receipt?.logs);\n            id = event[0].args.requestId;\n          } catch (e) {}\n          return {\n            receipt,\n            id\n          };\n        }\n      });\n    };\n  })());\n\n  /**\n   * Claim the rewards from an opened pack\n   *\n   * @example\n   * ```javascript\n   * const rewards = await contract.pack.claimRewards();\n   * ```\n   *\n   * @remarks This will return the contents of the pack\n   * @remarks Make sure to check if the VRF request has been fulfilled using canClaimRewards() before calling this method\n   * @returns The random rewards from opening a pack\n   * @twfeature PackVRF\n   */\n  claimRewards = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this2 = this;\n    return async function () {\n      let gasLimit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 500000;\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this2.contractWrapper,\n        method: \"claimRewards\",\n        args: [],\n        overrides: {\n          // Higher gas limit for opening packs\n          gasLimit\n        },\n        parse: async receipt => {\n          const event = _this2.contractWrapper.parseLogs(\"PackOpened\", receipt?.logs);\n          if (event.length === 0) {\n            throw new Error(\"PackOpened event not found\");\n          }\n          const rewards = event[0].args.rewardUnitsDistributed;\n          return await _this2.parseRewards(rewards);\n        }\n      });\n    };\n  })());\n  async parseRewards(rewards) {\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n    for (const reward of rewards) {\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), reward.assetContract);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward: utils.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: reward.totalAmount.toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n\n  /**\n   * Setup a listener for when a pack is opened\n   *\n   * @example\n   * ```javascript\n   * const unsubscribe = await contract.pack.addPackOpenEventListener((packId, openerAddress, rewards) => {\n   *  console.log(`Pack ${packId} was opened by ${openerAddress} and contained:`, rewards);\n   * });\n   * ```\n   *\n   * @param callback - the listener to call when a pack is opened\n   * @returns A unsubscribe function to cleanup the listener\n   * @twfeature PackVRF\n   */\n  async addPackOpenEventListener(callback) {\n    return this.events.addEventListener(\"PackOpened\", async event => {\n      callback(event.data.packId.toString(), event.data.opener, await this.parseRewards(event.data.rewardUnitsDistributed));\n    });\n  }\n\n  /**\n   * Check if a specific wallet can claim rewards after opening a pack\n   *\n   * @example\n   * ```javascript\n   * const canClaim = await contract.pack.canClaimRewards(\"{{wallet_address}}\");\n   * ```\n   * @param claimerAddress - Optional: the address to check if they can claim rewards, defaults to the connected address\n   * @returns whether the connected address can claim rewards after opening a pack\n   * @twfeature PackVRF\n   */\n  async canClaimRewards(claimerAddress) {\n    const address = await resolveAddress(claimerAddress || (await this.contractWrapper.getSignerAddress()));\n    return await this.contractWrapper.read(\"canClaimRewards\", [address]);\n  }\n\n  /**\n   * Open a pack and claim the rewards\n   * @remarks This function will only start the flow of opening a pack, the rewards will be granted automatically to the connected address after VRF request is fulfilled\n   *\n   * @example\n   * ```javascript\n   * const packId = 0;\n   * const amount = 1;\n   * const { id } = await contract.pack.openAndClaim(packId, amount);\n   * ```\n   *\n   * @param packId - The id of the pack to open\n   * @param amount - Optional: the amount of packs to open, defaults to 1\n   * @param gasLimit - Optional: the gas limit to use for the VRF callback transaction, defaults to 500000\n   * @returns\n   * @twfeature PackVRF\n   */\n  async openAndClaim(packId) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n    const receipt = await this.contractWrapper.sendTransaction(\"openPackAndClaimRewards\", [packId, amount, gasLimit], {\n      // Higher gas limit for opening packs\n      gasLimit: BigNumber.from(500000)\n    });\n    let id = BigNumber.from(0);\n    try {\n      const event = this.contractWrapper.parseLogs(\"PackOpenRequested\", receipt?.logs);\n      id = event[0].args.requestId;\n    } catch (e) {}\n    return {\n      receipt,\n      id\n    };\n  }\n\n  /**\n   * Get the LINK balance of the contract\n   *\n   * @example\n   * ```javascript\n   * const balance = await contract.pack.getLinkBalance();\n   * ```\n   *\n   * @returns The balance of LINK in the contract\n   * @twfeature PackVRF\n   */\n  async getLinkBalance() {\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n    return this.getLinkContract(ERC20Abi).balanceOf(this.contractWrapper.address);\n  }\n\n  /**\n   * Transfer LINK to this contract\n   *\n   * @example\n   * ```javascript\n   * const amount = 1;\n   * await contract.pack.transferLink(amount);\n   * ```\n   *\n   * @param amount - the amount of LINK to transfer to the contract\n   * @twfeature PackVRF\n   */\n  async transferLink(amount) {\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n    await this.getLinkContract(ERC20Abi).transfer(this.contractWrapper.address, amount);\n  }\n  getLinkContract(ERC20Abi) {\n    const linkAddress = LINK_TOKEN_ADDRESS[this.chainId];\n    if (!linkAddress) {\n      throw new Error(`No LINK token address found for chainId ${this.chainId}`);\n    }\n    const contract = new ContractWrapper(this.contractWrapper.getSignerOrProvider(), linkAddress, ERC20Abi, this.contractWrapper.options, this.storage);\n    return new Erc20(contract, this.storage, this.chainId);\n  }\n}\n\n/**\n * Create lootboxes of NFTs with rarity based open mechanics.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"pack\");\n * ```\n *\n * @public\n */\n// TODO create extension wrappers\nclass Pack extends StandardErc1155 {\n  static contractRoles = PACK_CONTRACT_ROLES;\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per pack\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular pack\n   * contract.royalties.setTokenRoyaltyInfo(packId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  /**\n   * If enabled in the contract, use the Chainlink VRF functionality to open packs\n   */\n  get vrf() {\n    return assertEnabled(this._vrf, FEATURE_PACK_VRF);\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options.gasless && \"openzeppelin\" in options.gasless ? {\n      ...options,\n      gasless: {\n        ...options.gasless,\n        openzeppelin: {\n          ...options.gasless.openzeppelin,\n          useEOAForwarder: true\n        }\n      }\n    } : options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, PackContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Pack.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.owner = new ContractOwner(this.contractWrapper);\n    this._vrf = this.detectVrf();\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n    this._vrf?.onNetworkUpdated(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a single Pack\n   *\n   * @remarks Get all the data associated with every pack in this contract.\n   *\n   * By default, returns the first 100 packs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const pack = await contract.get(0);\n   * console.log(packs;\n   * ```\n   */\n  async get(tokenId) {\n    return this.erc1155.get(tokenId);\n  }\n\n  /**\n   * Get All Packs\n   *\n   * @remarks Get all the data associated with every pack in this contract.\n   *\n   * By default, returns the first 100 packs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const packs = await contract.getAll();\n   * console.log(packs;\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The pack metadata for all packs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc1155.getAll(queryParams);\n  }\n\n  /**\n   * Get Owned Packs\n   *\n   * @remarks Get all the data associated with the packs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the packs of\n   * const address = \"{{wallet_address}}\";\n   * const packss = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The pack metadata for all the owned packs in the contract.\n   */\n  async getOwned(walletAddress) {\n    return this.erc1155.getOwned(walletAddress);\n  }\n\n  /**\n   * Get the number of packs created\n   * @returns The total number of packs minted in this contract\n   * @public\n   */\n  async getTotalCount() {\n    return this.erc1155.totalCount();\n  }\n\n  /**\n   * Get whether users can transfer packs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [getRoleHash(\"transfer\"), constants.AddressZero]);\n    return !anyoneCanTransfer;\n  }\n\n  /**\n   * Get Pack Contents\n   * @remarks Get the rewards contained inside a pack.\n   *\n   * @param packId - The id of the pack to get the contents of.\n   * @returns  The contents of the pack.\n   *\n   * @example\n   * ```javascript\n   * const packId = 0;\n   * const contents = await contract.getPackContents(packId);\n   * console.log(contents.erc20Rewards);\n   * console.log(contents.erc721Rewards);\n   * console.log(contents.erc1155Rewards);\n   * ```\n   */\n  async getPackContents(packId) {\n    const {\n      contents,\n      perUnitAmounts\n    } = await this.contractWrapper.read(\"getPackContents\", [packId]);\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n    for (let i = 0; i < contents.length; i++) {\n      const reward = contents[i];\n      const amount = perUnitAmounts[i];\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), reward.assetContract);\n            const quantityPerReward = utils.formatUnits(amount, tokenMetadata.decimals);\n            const totalRewards = utils.formatUnits(BigNumber.from(reward.totalAmount).div(amount), tokenMetadata.decimals);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward,\n              totalRewards\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: amount.toString(),\n              totalRewards: BigNumber.from(reward.totalAmount).div(amount).toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Pack\n   * @remarks Create a new pack with the given metadata and rewards and mint it to the connected wallet. See {@link Pack.createTo}\n   *\n   * @param metadataWithRewards - the metadata and rewards to include in the pack\n   * @example\n   * ```javascript\n   * const pack = {\n   *   // The metadata for the pack NFT itself\n   *   packMetadata: {\n   *     name: \"My Pack\",\n   *     description: \"This is a new pack\",\n   *     image: \"ipfs://...\",\n   *   },\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n   *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n   * }\n   *\n   * const tx = await contract.create(pack);\n   * ```\n   */\n  create = /* @__PURE__ */buildTransactionFunction(async metadataWithRewards => {\n    const signerAddress = await this.contractWrapper.getSignerAddress();\n    return this.createTo.prepare(signerAddress, metadataWithRewards);\n  });\n\n  /**\n   * Add Pack Contents\n   * @remarks Add contents to an existing pack. See {@link Pack.addPackContents}\n   *\n   * @param packId - token Id of the pack to add contents to\n   * @param packContents - the rewards to include in the pack\n   * @example\n   * ```javascript\n   * const packContents = {\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   * }\n   *\n   * const tx = await contract.addPackContents(packId, packContents);\n   * ```\n   */\n  addPackContents = /* @__PURE__ */buildTransactionFunction(async (packId, packContents) => {\n    const [signerAddress, parsedContents] = await Promise.all([this.contractWrapper.getSignerAddress(), PackRewardsOutputSchema.parseAsync(packContents)]);\n    const {\n      contents,\n      numOfRewardUnits\n    } = await this.toPackContentArgs(parsedContents);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"addPackContents\",\n      args: [packId, contents, numOfRewardUnits, signerAddress],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"PackUpdated\", receipt?.logs);\n        if (event.length === 0) {\n          throw new Error(\"PackUpdated event not found\");\n        }\n        const id = event[0].args.packId;\n        return {\n          id: id,\n          receipt,\n          data: () => this.erc1155.get(id)\n        };\n      }\n    });\n  });\n\n  /**\n   * Create Pack To Wallet\n   * @remarks Create a new pack with the given metadata and rewards and mint it to the specified address.\n   *\n   * @param to - the address to mint the pack to\n   * @param metadataWithRewards - the metadata and rewards to include in the pack\n   *\n   * @example\n   * ```javascript\n   * const pack = {\n   *   // The metadata for the pack NFT itself\n   *   packMetadata: {\n   *     name: \"My Pack\",\n   *     description: \"This is a new pack\",\n   *     image: \"ipfs://...\",\n   *   },\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n   *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n   * }\n   *\n   * const tx = await contract.createTo(\"0x...\", pack);\n   * ```\n   */\n  createTo = /* @__PURE__ */buildTransactionFunction(async (to, metadataWithRewards) => {\n    const [uri, parsedMetadata, toAddress] = await Promise.all([uploadOrExtractURI(metadataWithRewards.packMetadata, this.storage), PackMetadataInputSchema.parseAsync(metadataWithRewards), resolveAddress(to)]);\n    const {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    } = parsedMetadata;\n    const rewardsData = {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n    const {\n      contents,\n      numOfRewardUnits\n    } = await this.toPackContentArgs(rewardsData);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"createPack\",\n      args: [contents, numOfRewardUnits, uri, parsedMetadata.openStartTime, parsedMetadata.rewardsPerPack, toAddress],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"PackCreated\", receipt?.logs);\n        if (event.length === 0) {\n          throw new Error(\"PackCreated event not found\");\n        }\n        const packId = event[0].args.packId;\n        return {\n          id: packId,\n          receipt,\n          data: () => this.erc1155.get(packId)\n        };\n      }\n    });\n  });\n\n  /**\n   * Open Pack\n   *\n   * @remarks - Open a pack to reveal the contained rewards. This will burn the specified pack and\n   * the contained assets will be transferred to the opening users wallet.\n   *\n   * @param tokenId - the token ID of the pack you want to open\n   * @param amount - the amount of packs you want to open\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0\n   * const amount = 1\n   * const tx = await contract.open(tokenId, amount);\n   * ```\n   */\n  open = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (tokenId) {\n      let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n      if (_this._vrf) {\n        throw new Error(\"This contract is using Chainlink VRF, use `contract.vrf.open()` or `contract.vrf.openAndClaim()` instead\");\n      }\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this.contractWrapper,\n        method: \"openPack\",\n        args: [tokenId, amount],\n        overrides: {\n          // Higher gas limit for opening packs\n          gasLimit\n        },\n        parse: async receipt => {\n          const event = _this.contractWrapper.parseLogs(\"PackOpened\", receipt?.logs);\n          if (event.length === 0) {\n            throw new Error(\"PackOpened event not found\");\n          }\n          const rewards = event[0].args.rewardUnitsDistributed;\n          const erc20Rewards = [];\n          const erc721Rewards = [];\n          const erc1155Rewards = [];\n          for (const reward of rewards) {\n            switch (reward.tokenType) {\n              case 0:\n                {\n                  const tokenMetadata = await fetchCurrencyMetadata(_this.contractWrapper.getProvider(), reward.assetContract);\n                  erc20Rewards.push({\n                    contractAddress: reward.assetContract,\n                    quantityPerReward: utils.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()\n                  });\n                  break;\n                }\n              case 1:\n                {\n                  erc721Rewards.push({\n                    contractAddress: reward.assetContract,\n                    tokenId: reward.tokenId.toString()\n                  });\n                  break;\n                }\n              case 2:\n                {\n                  erc1155Rewards.push({\n                    contractAddress: reward.assetContract,\n                    tokenId: reward.tokenId.toString(),\n                    quantityPerReward: reward.totalAmount.toString()\n                  });\n                  break;\n                }\n            }\n          }\n          return {\n            erc20Rewards,\n            erc721Rewards,\n            erc1155Rewards\n          };\n        }\n      });\n    };\n  })());\n\n  /** *****************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async toPackContentArgs(metadataWithRewards) {\n    const contents = [];\n    const numOfRewardUnits = [];\n    const {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    } = metadataWithRewards;\n    const provider = this.contractWrapper.getProvider();\n    const owner = await this.contractWrapper.getSignerAddress();\n    for (const erc20 of erc20Rewards) {\n      const normalizedQuantity = await normalizePriceValue(provider, erc20.quantityPerReward, erc20.contractAddress);\n      // Multiply the quantity of one reward by the number of rewards\n      const totalQuantity = normalizedQuantity.mul(erc20.totalRewards);\n      const hasAllowance = await hasERC20Allowance(this.contractWrapper, erc20.contractAddress, totalQuantity);\n      if (!hasAllowance) {\n        throw new Error(`ERC20 token with contract address \"${erc20.contractAddress}\" does not have enough allowance to transfer.\\n\\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\\n\\nawait sdk.getToken(\"${erc20.contractAddress}\").setAllowance(\"${this.getAddress()}\", ${totalQuantity});\\n\\n`);\n      }\n      numOfRewardUnits.push(erc20.totalRewards);\n      contents.push({\n        assetContract: erc20.contractAddress,\n        tokenType: 0,\n        totalAmount: totalQuantity,\n        tokenId: 0\n      });\n    }\n    for (const erc721 of erc721Rewards) {\n      const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc721.contractAddress, erc721.tokenId, owner);\n      if (!isApproved) {\n        throw new Error(`ERC721 token \"${erc721.tokenId}\" with contract address \"${erc721.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getNFTCollection(\"${erc721.contractAddress}\").setApprovalForToken(\"${this.getAddress()}\", ${erc721.tokenId});\\n\\n`);\n      }\n      numOfRewardUnits.push(\"1\");\n      contents.push({\n        assetContract: erc721.contractAddress,\n        tokenType: 1,\n        totalAmount: 1,\n        tokenId: erc721.tokenId\n      });\n    }\n    for (const erc1155 of erc1155Rewards) {\n      const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc1155.contractAddress, erc1155.tokenId, owner);\n      if (!isApproved) {\n        throw new Error(`ERC1155 token \"${erc1155.tokenId}\" with contract address \"${erc1155.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getEdition(\"${erc1155.contractAddress}\").setApprovalForAll(\"${this.getAddress()}\", true);\\n\\n`);\n      }\n      numOfRewardUnits.push(erc1155.totalRewards);\n      contents.push({\n        assetContract: erc1155.contractAddress,\n        tokenType: 2,\n        totalAmount: BigNumber.from(erc1155.quantityPerReward).mul(BigNumber.from(erc1155.totalRewards)),\n        tokenId: erc1155.tokenId\n      });\n    }\n    return {\n      contents,\n      numOfRewardUnits\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n  detectVrf() {\n    if (detectContractFeature(this.contractWrapper, \"PackVRF\")) {\n      return new PackVRF(this.contractWrapper.getSignerOrProvider(), this.contractWrapper.address, this.storage, this.contractWrapper.options, this.chainId);\n    }\n    return undefined;\n  }\n}\n\nexport { Pack };\n","import { Contract, BigNumber } from 'ethers';\nimport invariant from 'tiny-invariant';\nimport { I as InterfaceId_IERC721, a as InterfaceId_IERC1155, D as DEFAULT_QUERY_ALL_COUNT } from './QueryParams-32a56510.browser.esm.js';\nimport { cs as ContractWrapper, dE as MAX_BPS } from './index-33cd3415.browser.esm.js';\nimport { a as fetchCurrencyValue } from './fetchCurrencyValue-32d08b05.browser.esm.js';\n\n/**\n * This method checks if the given token is approved for the transferrerContractAddress contract.\n * This is particularly useful for contracts that need to transfer NFTs on the users' behalf\n *\n * @internal\n * @param provider - The connected provider\n * @param transferrerContractAddress - The address of the marketplace contract\n * @param assetContract - The address of the asset contract.\n * @param tokenId - The token id of the token.\n * @param owner - The address of the account that owns the token.\n * @returns  True if the transferrerContractAddress is approved on the token, false otherwise.\n */\nasync function isTokenApprovedForTransfer(provider, transferrerContractAddress, assetContract, tokenId, owner) {\n  try {\n    const ERC165Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC165.json')).default;\n    const erc165 = new Contract(assetContract, ERC165Abi, provider);\n    const [isERC721, isERC1155] = await Promise.all([erc165.supportsInterface(InterfaceId_IERC721), erc165.supportsInterface(InterfaceId_IERC1155)]);\n    if (isERC721) {\n      const ERC721Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC721.json')).default;\n      const asset = new Contract(assetContract, ERC721Abi, provider);\n      const approved = await asset.isApprovedForAll(owner, transferrerContractAddress);\n      if (approved) {\n        return true;\n      }\n\n      // Handle reverts in case of non-existent tokens\n      let approvedAddress;\n      try {\n        approvedAddress = await asset.getApproved(tokenId);\n      } catch (e) {}\n      return approvedAddress?.toLowerCase() === transferrerContractAddress.toLowerCase();\n    } else if (isERC1155) {\n      const ERC1155Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC1155.json')).default;\n      const asset = new Contract(assetContract, ERC1155Abi, provider);\n      return await asset.isApprovedForAll(owner, transferrerContractAddress);\n    } else {\n      console.error(\"Contract does not implement ERC 1155 or ERC 721.\");\n      return false;\n    }\n  } catch (err) {\n    console.error(\"Failed to check if token is approved\", err);\n    return false;\n  }\n}\n\n/**\n * Checks if the marketplace is approved to make transfers on the assetContract\n * If not, it tries to set the approval.\n * @param contractWrapper - The contract wrapper to use\n * @param marketplaceAddress - The address of the marketplace contract\n * @param assetContract - The address of the asset contract.\n * @param tokenId - The token id of the token.\n * @param from - The address of the account that owns the token.\n */\nasync function handleTokenApproval(contractWrapper, marketplaceAddress, assetContract, tokenId, from) {\n  const ERC165Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC165.json')).default;\n  const erc165 = new ContractWrapper(contractWrapper.getSignerOrProvider(), assetContract, ERC165Abi, contractWrapper.options, contractWrapper.storage);\n  const [isERC721, isERC1155] = await Promise.all([erc165.read(\"supportsInterface\", [InterfaceId_IERC721]), erc165.read(\"supportsInterface\", [InterfaceId_IERC1155])]);\n  // check for token approval\n  if (isERC721) {\n    const ERC721Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC721.json')).default;\n    const asset = new ContractWrapper(contractWrapper.getSignerOrProvider(), assetContract, ERC721Abi, contractWrapper.options, contractWrapper.storage);\n    const approved = await asset.read(\"isApprovedForAll\", [from, marketplaceAddress]);\n    if (!approved) {\n      const isTokenApproved = (await asset.read(\"getApproved\", [tokenId])).toLowerCase() === marketplaceAddress.toLowerCase();\n      if (!isTokenApproved) {\n        await asset.sendTransaction(\"setApprovalForAll\", [marketplaceAddress, true]);\n      }\n    }\n  } else if (isERC1155) {\n    const ERC1155Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC1155.json')).default;\n    const asset = new ContractWrapper(contractWrapper.getSignerOrProvider(), assetContract, ERC1155Abi, contractWrapper.options, contractWrapper.storage);\n    const approved = await asset.read(\"isApprovedForAll\", [from, marketplaceAddress]);\n    if (!approved) {\n      await asset.sendTransaction(\"setApprovalForAll\", [marketplaceAddress, true]);\n    }\n  } else {\n    throw Error(\"Contract must implement ERC 1155 or ERC 721.\");\n  }\n}\n\n/**\n * Used to verify fields in new listing.\n * @internal\n */\n// TODO this should be done in zod\nfunction validateNewListingParam(param) {\n  invariant(param.assetContractAddress !== undefined && param.assetContractAddress !== null, \"Asset contract address is required\");\n  invariant(param.buyoutPricePerToken !== undefined && param.buyoutPricePerToken !== null, \"Buyout price is required\");\n  invariant(param.listingDurationInSeconds !== undefined && param.listingDurationInSeconds !== null, \"Listing duration is required\");\n  invariant(param.startTimestamp !== undefined && param.startTimestamp !== null, \"Start time is required\");\n  invariant(param.tokenId !== undefined && param.tokenId !== null, \"Token ID is required\");\n  invariant(param.quantity !== undefined && param.quantity !== null, \"Quantity is required\");\n  switch (param.type) {\n    case \"NewAuctionListing\":\n      {\n        invariant(param.reservePricePerToken !== undefined && param.reservePricePerToken !== null, \"Reserve price is required\");\n      }\n  }\n}\n\n/**\n * Maps a contract offer to the strict interface\n *\n * @internal\n * @param offer - The offer to map\n * @returns  An `Offer` object\n */\nasync function mapOffer(provider, listingId, offer) {\n  return {\n    quantity: offer.quantityDesired,\n    pricePerToken: offer.pricePerToken,\n    currencyContractAddress: offer.currency,\n    buyerAddress: offer.offeror,\n    quantityDesired: offer.quantityWanted,\n    currencyValue: await fetchCurrencyValue(provider, offer.currency, offer.quantityWanted.mul(offer.pricePerToken)),\n    listingId\n  };\n}\nfunction isWinningBid(winningPrice, newBidPrice, bidBuffer) {\n  bidBuffer = BigNumber.from(bidBuffer);\n  winningPrice = BigNumber.from(winningPrice);\n  newBidPrice = BigNumber.from(newBidPrice);\n  if (winningPrice.eq(BigNumber.from(0))) {\n    return false;\n  }\n  const buffer = newBidPrice.sub(winningPrice).mul(MAX_BPS).div(winningPrice);\n  return buffer.gte(bidBuffer);\n}\nasync function getAllInBatches(start, end, fn) {\n  const batches = [];\n  while (end - start > DEFAULT_QUERY_ALL_COUNT) {\n    batches.push(fn(start, start + DEFAULT_QUERY_ALL_COUNT - 1));\n    start += DEFAULT_QUERY_ALL_COUNT;\n  }\n  batches.push(fn(start, end - 1));\n  return await Promise.all(batches);\n}\n\nexport { isWinningBid as a, getAllInBatches as g, handleTokenApproval as h, isTokenApprovedForTransfer as i, mapOffer as m, validateNewListingParam as v };\n","import { cs as ContractWrapper } from './index-33cd3415.browser.esm.js';\n\n/**\n * @internal\n */\nasync function hasERC20Allowance(contractToApprove, currencyAddress, value) {\n  const provider = contractToApprove.getProvider();\n  const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n  const erc20 = new ContractWrapper(provider, currencyAddress, ERC20Abi, {}, contractToApprove.storage);\n  const owner = await contractToApprove.getSignerAddress();\n  const spender = contractToApprove.address;\n  const allowance = await erc20.read(\"allowance\", [owner, spender]);\n  return allowance.gte(value);\n}\n\nexport { hasERC20Allowance as h };\n"],"names":["StandardErc1155","chainId","this","_chainId","constructor","contractWrapper","storage","erc1155","Erc1155","onNetworkUpdated","network","updateSignerOrProvider","getAddress","address","get","tokenId","totalSupply","balanceOf","balance","isApproved","operator","transfer","buildTransactionFunction","_this","async","to","amount","data","arguments","length","undefined","prepare","transferBatch","_this2","tokenIds","amounts","fromAddress","setApprovalForAll","approved","airdrop","_this3","addresses","CommonWrappableSchema","z","object","contractAddress","AddressOrEnsSchema","ERC20WrappableSchema","extend","quantity","AmountSchema","ERC721WrappableSchema","BigNumberishSchema","ERC1155WrappableSchema","ERC20RewardSchema","omit","quantityPerReward","ERC721RewardSchema","ERC1155RewardSchema","ERC20RewardContentsSchema","totalRewards","default","ERC721RewardContentsSchema","ERC1155RewardContentsSchema","PackRewardsOutputSchema","erc20Rewards","array","erc721Rewards","erc1155Rewards","PackMetadataInputSchema","packMetadata","NFTInputOrUriSchema","rewardsPerPack","openStartTime","RawDateSchema","Date","PackVRF","featureName","FEATURE_PACK_VRF","name","options","ContractWrapper","IPackVRFAbi","events","ContractEvents","open","gasLimit","Transaction","fromContractWrapper","method","args","overrides","parse","receipt","id","BigNumber","from","parseLogs","logs","requestId","e","claimRewards","event","Error","rewards","rewardUnitsDistributed","parseRewards","reward","tokenType","tokenMetadata","fetchCurrencyMetadata","getProvider","assetContract","push","utils","totalAmount","decimals","toString","addPackOpenEventListener","callback","addEventListener","packId","opener","canClaimRewards","claimerAddress","resolveAddress","getSignerAddress","read","openAndClaim","sendTransaction","getLinkBalance","ERC20Abi","getLinkContract","transferLink","linkAddress","LINK_TOKEN_ADDRESS","contract","getSignerOrProvider","Erc20","Pack","static","PACK_CONTRACT_ROLES","vrf","assertEnabled","_vrf","abi","super","gasless","openzeppelin","useEOAForwarder","AbiSchema","metadata","ContractMetadata","PackContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","royalties","ContractRoyalty","encoder","ContractEncoder","estimator","GasCostEstimator","interceptor","ContractInterceptor","owner","ContractOwner","detectVrf","getAll","queryParams","getOwned","walletAddress","getTotalCount","totalCount","isTransferRestricted","getRoleHash","constants","getPackContents","contents","perUnitAmounts","i","div","create","signerAddress","createTo","metadataWithRewards","addPackContents","packContents","parsedContents","Promise","all","parseAsync","numOfRewardUnits","toPackContentArgs","uri","parsedMetadata","toAddress","uploadOrExtractURI","rewardsData","provider","erc20","totalQuantity","normalizePriceValue","mul","hasERC20Allowance","erc721","isTokenApprovedForTransfer","call","functionName","detectContractFeature","transferrerContractAddress","ERC165Abi","erc165","Contract","isERC721","isERC1155","supportsInterface","InterfaceId_IERC721","InterfaceId_IERC1155","ERC721Abi","asset","isApprovedForAll","approvedAddress","getApproved","toLowerCase","ERC1155Abi","console","error","err","handleTokenApproval","marketplaceAddress","validateNewListingParam","param","invariant","assetContractAddress","buyoutPricePerToken","listingDurationInSeconds","startTimestamp","type","reservePricePerToken","mapOffer","listingId","offer","quantityDesired","pricePerToken","currencyContractAddress","currency","buyerAddress","offeror","quantityWanted","currencyValue","fetchCurrencyValue","isWinningBid","winningPrice","newBidPrice","bidBuffer","eq","sub","MAX_BPS","gte","getAllInBatches","start","end","fn","batches","DEFAULT_QUERY_ALL_COUNT","contractToApprove","currencyAddress","value","spender"],"sourceRoot":""}