{"version":3,"file":"static/js/8199.96f1ae02.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/nft-drop-ee9ded99.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/erc-721-standard-4c4125d2.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/contract-sales-918c7cb8.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/contract-platform-fee-e756e68f.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/contract-interceptor-d7b164a7.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/thirdweb-checkout-f6974aaf.browser.esm.js"],"sourcesContent":["import { BigNumber, constants } from 'ethers';\nimport { D as DEFAULT_QUERY_ALL_COUNT } from './QueryParams-32a56510.browser.esm.js';\nimport { dG as NFT_BASE_CONTRACT_ROLES, cs as ContractWrapper, bj as AbiSchema, bT as DropErc721ContractSchema, cQ as FEATURE_NFT_REVEALABLE, H as getRoleHash } from './index-33cd3415.browser.esm.js';\nimport { f as buildTransactionFunction, T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport { C as ContractMetadata, b as ContractAppURI, G as GasCostEstimator, a as ContractEvents } from './contract-appuri-5c40af52.browser.esm.js';\nimport { C as ContractEncoder } from './fetchCurrencyValue-32d08b05.browser.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\nimport { C as ContractRoyalty, D as DelayedReveal, a as ContractOwner } from './contract-owner-49e75547.browser.esm.js';\nimport { C as ContractPlatformFee } from './contract-platform-fee-e756e68f.browser.esm.js';\nimport { C as ContractRoles } from './contract-roles-71988d2e.browser.esm.js';\nimport { C as ContractPrimarySale } from './contract-sales-918c7cb8.browser.esm.js';\nimport { D as DropClaimConditions } from './drop-claim-conditions-e6f2abbf.browser.esm.js';\nimport { S as StandardErc721 } from './erc-721-standard-4c4125d2.browser.esm.js';\nimport { P as PaperCheckout } from './thirdweb-checkout-f6974aaf.browser.esm.js';\nimport './setErc20Allowance-7f76f677.browser.esm.js';\nimport 'zod';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport '@thirdweb-dev/storage';\nimport './signature-d3ea643d.browser.esm.js';\nimport './normalizePriceValue-9851c0eb.browser.esm.js';\nimport '@thirdweb-dev/merkletree';\nimport './assertEnabled-d1700f0b.browser.esm.js';\nimport 'uuid';\nimport 'fast-deep-equal';\nimport './erc-721-27306550.browser.esm.js';\n\n/**\n * Setup a collection of one-of-one NFTs that are minted as users claim them.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"nft-drop\");\n * ```\n *\n * @internal\n * @deprecated use contract.erc721 instead\n */\nclass NFTDrop extends StandardErc721 {\n  static contractRoles = NFT_BASE_CONTRACT_ROLES;\n\n  /**\n   * @internal\n   */\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.claimConditions.set(claimConditions);\n   * ```\n   */\n\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   */\n\n  /**\n   * Checkout\n   * @remarks Create a FIAT currency checkout for your NFT drop.\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, DropErc721ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, NFTDrop.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.claimConditions = new DropClaimConditions(this.contractWrapper, this.metadata, this.storage);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.revealer = new DelayedReveal(this.contractWrapper, this.storage, FEATURE_NFT_REVEALABLE.name, () => this.erc721.nextTokenIdToMint());\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.owner = new ContractOwner(this.contractWrapper);\n    this.checkout = new PaperCheckout(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total count NFTs in this drop contract, both claimed and unclaimed\n   */\n  async totalSupply() {\n    const [claimed, unclaimed] = await Promise.all([this.totalClaimedSupply(), this.totalUnclaimedSupply()]);\n    return claimed.add(unclaimed);\n  }\n\n  /**\n   * Get All Claimed NFTs\n   *\n   * @remarks Fetch all the NFTs (and their owners) that have been claimed in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTs = await contract.getAllClaimed();\n   * const firstOwner = claimedNFTs[0].owner;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata and their ownersfor all NFTs queried.\n   */\n  async getAllClaimed(queryParams) {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(queryParams?.count || DEFAULT_QUERY_ALL_COUNT).toNumber();\n    const maxId = Math.min((await this.contractWrapper.read(\"nextTokenIdToClaim\", [])).toNumber(), start + count);\n    return await Promise.all(Array.from(Array(maxId).keys()).map(i => this.get(i.toString())));\n  }\n\n  /**\n   * Get All Unclaimed NFTs\n   *\n   * @remarks Fetch all the NFTs that have been not been claimed yet in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTs = await contract.getAllUnclaimed();\n   * const firstUnclaimedNFT = unclaimedNFTs[0].name;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAllUnclaimed(queryParams) {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(queryParams?.count || DEFAULT_QUERY_ALL_COUNT).toNumber();\n    const firstTokenId = BigNumber.from(Math.max((await this.contractWrapper.read(\"nextTokenIdToClaim\", [])).toNumber(), start));\n    const maxId = BigNumber.from(Math.min((await this.contractWrapper.read(\"nextTokenIdToMint\", [])).toNumber(), firstTokenId.toNumber() + count));\n    return await Promise.all(Array.from(Array(maxId.sub(firstTokenId).toNumber()).keys()).map(i => this.erc721.getTokenMetadata(firstTokenId.add(i).toString())));\n  }\n\n  /**\n   * Get the claimed supply\n   *\n   * @remarks Get the number of claimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTCount = await contract.totalClaimedSupply();\n   * console.log(`NFTs claimed so far: ${claimedNFTCount}`);\n   * ```\n   * @returns The unclaimed supply\n   */\n  async totalClaimedSupply() {\n    return this.erc721.totalClaimedSupply();\n  }\n\n  /**\n   * Get the unclaimed supply\n   *\n   * @remarks Get the number of unclaimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTCount = await contract.totalUnclaimedSupply();\n   * console.log(`NFTs left to claim: ${unclaimedNFTCount}`);\n   * ```\n   * @returns The unclaimed supply\n   */\n  async totalUnclaimedSupply() {\n    return this.erc721.totalUnclaimedSupply();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [getRoleHash(\"transfer\"), constants.AddressZero]);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create a batch of unique NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many unique NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   */\n  createBatch = /* @__PURE__ */buildTransactionFunction(async (metadatas, options) => {\n    return this.erc721.lazyMint.prepare(metadatas, options);\n  });\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   *\n   * @deprecated Use `contract.erc721.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, quantity) {\n    let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return this.erc721.getClaimTransaction(destinationAddress, quantity, {\n      checkERC20Allowance\n    });\n  }\n\n  /**\n   * Claim unique NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 1; // how many unique NFTs you want to claim\n   *\n   * const tx = await contract.claimTo(address, quantity);\n   * const receipt = tx[0].receipt; // the transaction receipt\n   * const claimedTokenId = tx[0].id; // the id of the NFT claimed\n   * const claimedNFT = await tx[0].data(); // (optional) get the claimed NFT metadata\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   *\n   * @returns  an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  claimTo = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (destinationAddress, quantity) {\n      let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      return _this.erc721.claimTo.prepare(destinationAddress, quantity, {\n        checkERC20Allowance\n      });\n    };\n  })());\n\n  /**\n   * Claim NFTs to the connected wallet.\n   *\n   * @remarks See {@link NFTDrop.claimTo}\n   *\n   * @returns  an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  claim = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this2 = this;\n    return async function (quantity) {\n      let checkERC20Allowance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return _this2.claimTo.prepare(await _this2.contractWrapper.getSignerAddress(), quantity, checkERC20Allowance);\n    };\n  })());\n\n  /**\n   * Burn a single NFT\n   *\n   * @param tokenId - the token Id to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.burnToken(tokenId);\n   * ```\n   *\n   */\n  burn = /* @__PURE__ */buildTransactionFunction(async tokenId => {\n    return this.erc721.burn.prepare(tokenId);\n  });\n\n  /******************************\n   * STANDARD ERC721 FUNCTIONS\n   ******************************/\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc721.get(tokenId);\n  }\n\n  /**\n   * Get the current owner of a given NFT within this Contract\n   *\n   * @param tokenId - the tokenId of the NFT\n   * @returns The address of the owner\n   */\n  async ownerOf(tokenId) {\n    return this.erc721.ownerOf(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * console.log(balance);\n   * ```\n   */\n  async balanceOf(address) {\n    return this.erc721.balanceOf(address);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance() {\n    return this.erc721.balance();\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc721.isApproved(address, operator);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0;\n   * await contract.transfer(walletAddress, tokenId);\n   * ```\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction(async (to, tokenId) => {\n    return this.erc721.transfer.prepare(to, tokenId);\n  });\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  setApprovalForAll = /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\n    return this.erc721.setApprovalForAll.prepare(operator, approved);\n  });\n\n  /**\n   * Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specified token.\n   * @param operator - the operator's address\n   * @param tokenId - the tokenId to give approval for\n   *\n   * @internal\n   */\n  setApprovalForToken = /* @__PURE__ */buildTransactionFunction(async (operator, tokenId) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"approve\",\n      args: [operator, tokenId]\n    });\n  });\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { NFTDrop };\n","import { aL as resolveAddress } from './index-33cd3415.browser.esm.js';\nimport { f as buildTransactionFunction, T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport { E as Erc721 } from './erc-721-27306550.browser.esm.js';\n\n/**\n * Standard ERC721 NFT functions\n * @remarks Basic functionality for a ERC721 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.transfer(walletAddress, tokenId);\n * ```\n * @public\n */\nclass StandardErc721 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc721 = new Erc721(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * console.log(nfts);\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc721.getAll(queryParams);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * console.log(nfts);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async getOwned(walletAddress, queryParams) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    return this.erc721.getOwned(walletAddress, queryParams);\n  }\n\n  /**\n   * Get Owned Token Ids\n   * @remarks Get all the token ids of NFTs owned by a specific wallet (no metadata)\n   */\n  async getOwnedTokenIds(walletAddress) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    return this.erc721.getOwnedTokenIds(walletAddress);\n  }\n\n  /**\n   * Get total minted supply count\n   */\n  async totalSupply() {\n    return this.erc721.totalCirculatingSupply();\n  }\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc721.get(tokenId);\n  }\n\n  /**\n   * Get the current owner of a given NFT within this Contract\n   *\n   * @param tokenId - the tokenId of the NFT\n   * @returns The address of the owner\n   */\n  async ownerOf(tokenId) {\n    return this.erc721.ownerOf(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * console.log(balance);\n   * ```\n   */\n  async balanceOf(address) {\n    return this.erc721.balanceOf(address);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance() {\n    return this.erc721.balance();\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc721.isApproved(address, operator);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0;\n   * await contract.transfer(walletAddress, tokenId);\n   * ```\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction(async (to, tokenId) => {\n    return this.erc721.transfer.prepare(to, tokenId);\n  });\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  setApprovalForAll = /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\n    return this.erc721.setApprovalForAll.prepare(operator, approved);\n  });\n\n  /**\n   * Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specified token.\n   * @param operator - the operator's address\n   * @param tokenId - the tokenId to give approval for\n   *\n   * @internal\n   */\n  setApprovalForToken = /* @__PURE__ */buildTransactionFunction(async (operator, tokenId) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"approve\",\n      args: [await resolveAddress(operator), tokenId]\n    });\n  });\n}\n\nexport { StandardErc721 as S };\n","import { f as buildTransactionFunction, T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport { d7 as FEATURE_PRIMARY_SALE } from './index-33cd3415.browser.esm.js';\n\n/**\n * Handle primary sales recipients\n * @remarks Configure primary sale recipients for an entire contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const salesRecipient = await contract.sales.getRecipient();\n * await contract.sales.setRecipient(recipientWalletAddress);\n * ```\n * @public\n */\nclass ContractPrimarySale {\n  featureName = FEATURE_PRIMARY_SALE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the primary sale recipient\n   * @returns The wallet address.\n   * @example\n   * ```javascript\n   * const salesRecipient = await contract.sales.getRecipient();\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  async getRecipient() {\n    const result = await this.contractWrapper.read(\"primarySaleRecipient\", []);\n    return result;\n  }\n\n  /**\n   * Set the primary sale recipient\n   * @param recipient - the wallet address\n   * @example\n   * ```javascript\n   * await contract.sales.setRecipient(recipientWalletAddress);\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  setRecipient = /* @__PURE__ */buildTransactionFunction(async recipient => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPrimarySaleRecipient\",\n      args: [recipient]\n    });\n  });\n}\n\nexport { ContractPrimarySale as C };\n","import { f as buildTransactionFunction, T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport { du as FEATURE_PLATFORM_FEE, bH as CommonPlatformFeeSchema } from './index-33cd3415.browser.esm.js';\n\n/**\n * Handle platform fees and recipients\n * @remarks Configure platform fees for a contract, which can be applied on certain paid transactions\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const feeInfo = await contract.platformFees.get();\n * await contract.platformFees.set({\n *   platform_fee_basis_points: 100, // 1% fee\n *   platform_fee_recipient: \"0x...\" // the fee recipient\n * })\n * ```\n * @public\n */\nclass ContractPlatformFee {\n  featureName = FEATURE_PLATFORM_FEE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the platform fee recipient and basis points\n   *\n   * @example\n   * ```javascript\n   * const feeInfo = await contract.platformFees.get();\n   * console.log(feeInfo.platform_fee_recipient);\n   * console.log(feeInfo.platform_fee_basis_points);\n   * ```\n   * @twfeature PlatformFee\n   */\n  async get() {\n    const [platformFeeRecipient, platformFeeBps] = await this.contractWrapper.read(\"getPlatformFeeInfo\", []);\n    return CommonPlatformFeeSchema.parseAsync({\n      platform_fee_recipient: platformFeeRecipient,\n      platform_fee_basis_points: platformFeeBps\n    });\n  }\n\n  /**\n   * Set the platform fee recipient and basis points\n   *\n   * @example\n   * ```javascript\n   * await contract.platformFees.set({\n   *   platform_fee_basis_points: 100, // 1% fee\n   *   platform_fee_recipient: \"0x...\" // the fee recipient\n   * })\n   * ```\n   *\n   * @param platformFeeInfo - the platform fee information\n   * @twfeature PlatformFee\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async platformFeeInfo => {\n    const parsed = await CommonPlatformFeeSchema.parseAsync(platformFeeInfo);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPlatformFeeInfo\",\n      args: [parsed.platform_fee_recipient, parsed.platform_fee_basis_points]\n    });\n  });\n}\n\nexport { ContractPlatformFee as C };\n","/**\n * Allows overriding transaction behavior for this contract\n * @internal\n */\nclass ContractInterceptor {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * The next transaction executed will add/replace any overrides passed via the passed in hook.\n   * @remarks Overridden values will be applied to the next transaction executed.\n   * @example\n   * ```javascript\n   * contract.interceptor.overrideNextTransaction(() => ({\n   *   gasLimit: 3000000,\n   * }));\n   * ```\n   * @param hook - the hook to add or replace any CallOverrides (gas limit, gas price, nonce, from, value, etc...)\n   * @public\n   */\n  overrideNextTransaction(hook) {\n    this.contractWrapper.withTransactionOverride(hook);\n  }\n}\n\nexport { ContractInterceptor as C };\n","import { aS as ChainId } from './index-33cd3415.browser.esm.js';\nimport invariant from 'tiny-invariant';\n\nconst PAPER_API_BASE = `https://paper.xyz/api`;\nconst PAPER_API_VERSION = `2022-08-12`;\n\n/**\n * @internal\n */\nconst PAPER_API_URL = `${PAPER_API_BASE}/${PAPER_API_VERSION}/platform/thirdweb`;\nconst PAPER_CHAIN_ID_MAP = {\n  [ChainId.Mainnet]: \"Ethereum\",\n  [ChainId.Goerli]: \"Goerli\",\n  [ChainId.Polygon]: \"Polygon\",\n  [ChainId.Mumbai]: \"Mumbai\",\n  [ChainId.Avalanche]: \"Avalanche\"\n};\n\n/**\n * @internal\n */\nfunction parseChainIdToPaperChain(chainId) {\n  invariant(chainId in PAPER_CHAIN_ID_MAP, `chainId not supported by paper: ${chainId}`);\n  return PAPER_CHAIN_ID_MAP[chainId];\n}\n/**\n *\n * @param contractAddress - the contract address\n * @param chainId - the chain id\n * @internal\n * @returns The paper xyz contract id\n * @throws if the contract is not registered on paper xyz\n */\nasync function fetchRegisteredCheckoutId(contractAddress, chainId) {\n  const paperChain = parseChainIdToPaperChain(chainId);\n  const res = await fetch(`${PAPER_API_URL}/register-contract?contractAddress=${contractAddress}&chain=${paperChain}`);\n  const json = await res.json();\n  invariant(json.result.id, \"Contract is not registered with paper\");\n  return json.result.id;\n}\n\n/**\n * The parameters for creating a paper.xyz checkout link.\n * @public\n */\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\n\nconst DEFAULT_PARAMS = {\n  expiresInMinutes: 15,\n  feeBearer: \"BUYER\",\n  sendEmailOnSuccess: true,\n  redirectAfterPayment: false\n};\n\n/**\n * @internal\n */\nasync function createCheckoutLinkIntent(contractId, params) {\n  const res = await fetch(`${PAPER_API_URL}/checkout-link-intent`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      contractId,\n      ...DEFAULT_PARAMS,\n      ...params,\n      metadata: {\n        ...params.metadata,\n        via_platform: \"thirdweb\"\n      },\n      // overrides that are hard coded\n      hideNativeMint: true,\n      hidePaperWallet: !!params.walletAddress,\n      hideExternalWallet: true,\n      hidePayWithCrypto: true,\n      usePaperKey: false\n    })\n  });\n  const json = await res.json();\n  invariant(json.checkoutLinkIntentUrl, \"Failed to create checkout link intent\");\n  return json.checkoutLinkIntentUrl;\n}\n\n/**\n * @internal\n */\nclass PaperCheckout {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n  async getCheckoutId() {\n    return fetchRegisteredCheckoutId(this.contractWrapper.address, await this.contractWrapper.getChainID());\n  }\n  async isEnabled() {\n    try {\n      return !!(await this.getCheckoutId());\n    } catch (err) {\n      return false;\n    }\n  }\n  async createLinkIntent(params) {\n    return await createCheckoutLinkIntent(await this.getCheckoutId(), params);\n  }\n}\n\nexport { PaperCheckout as P };\n"],"names":["NFTDrop","StandardErc721","static","NFT_BASE_CONTRACT_ROLES","constructor","network","address","storage","options","arguments","length","undefined","abi","chainId","super","ContractWrapper","this","AbiSchema","parse","metadata","ContractMetadata","contractWrapper","DropErc721ContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","royalties","ContractRoyalty","sales","ContractPrimarySale","claimConditions","DropClaimConditions","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","platformFees","ContractPlatformFee","revealer","DelayedReveal","FEATURE_NFT_REVEALABLE","name","erc721","nextTokenIdToMint","interceptor","ContractInterceptor","owner","ContractOwner","checkout","PaperCheckout","onNetworkUpdated","updateSignerOrProvider","getAddress","totalSupply","claimed","unclaimed","Promise","all","totalClaimedSupply","totalUnclaimedSupply","add","getAllClaimed","queryParams","start","BigNumber","from","toNumber","count","DEFAULT_QUERY_ALL_COUNT","maxId","Math","min","read","Array","keys","map","i","get","toString","getAllUnclaimed","firstTokenId","max","sub","getTokenMetadata","isTransferRestricted","getRoleHash","constants","createBatch","buildTransactionFunction","async","metadatas","lazyMint","prepare","getClaimTransaction","destinationAddress","quantity","checkERC20Allowance","claimTo","_this","claim","_this2","getSignerAddress","burn","tokenId","ownerOf","balanceOf","balance","isApproved","operator","transfer","to","setApprovalForAll","approved","setApprovalForToken","Transaction","fromContractWrapper","method","args","overrides","call","functionName","_chainId","Erc721","getAll","getOwned","walletAddress","resolveAddress","getOwnedTokenIds","totalCirculatingSupply","featureName","FEATURE_PRIMARY_SALE","getRecipient","setRecipient","recipient","FEATURE_PLATFORM_FEE","platformFeeRecipient","platformFeeBps","CommonPlatformFeeSchema","parseAsync","platform_fee_recipient","platform_fee_basis_points","set","parsed","platformFeeInfo","overrideNextTransaction","hook","withTransactionOverride","PAPER_API_URL","PAPER_CHAIN_ID_MAP","ChainId","Mainnet","Goerli","Polygon","Mumbai","Avalanche","fetchRegisteredCheckoutId","contractAddress","paperChain","invariant","parseChainIdToPaperChain","res","fetch","json","result","id","DEFAULT_PARAMS","expiresInMinutes","feeBearer","sendEmailOnSuccess","redirectAfterPayment","getCheckoutId","getChainID","isEnabled","err","createLinkIntent","params","contractId","headers","body","JSON","stringify","via_platform","hideNativeMint","hidePaperWallet","hideExternalWallet","hidePayWithCrypto","usePaperKey","checkoutLinkIntentUrl","createCheckoutLinkIntent"],"sourceRoot":""}