"use strict";(self.webpackChunkmango=self.webpackChunkmango||[]).push([[5848],{71450:(t,r,e)=>{e.d(r,{c:()=>n});var a=e(70592),i=e(33409);function n(t){return(0,i.i)(t)?a.aV:t}},48394:(t,r,e)=>{e.d(r,{C:()=>n});var a=e(3494),i=e(70592);class n{featureName=(()=>i.du.name)();constructor(t){this.contractWrapper=t}async get(){const[t,r]=await this.contractWrapper.read("getPlatformFeeInfo",[]);return i.bH.parseAsync({platform_fee_recipient:t,platform_fee_basis_points:r})}set=(()=>(0,a.f)((async t=>{const r=await i.bH.parseAsync(t);return a.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setPlatformFeeInfo",args:[r.platform_fee_recipient,r.platform_fee_basis_points]})})))()}},78473:(t,r,e)=>{e.d(r,{a:()=>m,g:()=>g,h:()=>p,i:()=>d,m:()=>l,v:()=>u});var a=e(10974),i=e(2776),n=e(3404),o=e(26680),s=e(70592),c=e(33409);async function d(t,r,i,n,s){try{const d=(await e.e(4811).then(e.t.bind(e,94811,19))).default,p=new a.NZ(i,d,t),[u,l]=await Promise.all([p.supportsInterface(o.I),p.supportsInterface(o.a)]);if(u){const o=(await Promise.resolve().then(e.t.bind(e,57305,19))).default,d=new a.NZ(i,o,t);if(await d.isApprovedForAll(s,r))return!0;let p;try{p=await d.getApproved(n)}catch(c){}return p?.toLowerCase()===r.toLowerCase()}if(l){const n=(await Promise.resolve().then(e.t.bind(e,59355,19))).default,o=new a.NZ(i,n,t);return await o.isApprovedForAll(s,r)}return console.error("Contract does not implement ERC 1155 or ERC 721."),!1}catch(d){return console.error("Failed to check if token is approved",d),!1}}async function p(t,r,a,i,n){const c=(await e.e(4811).then(e.t.bind(e,94811,19))).default,d=new s.cs(t.getSignerOrProvider(),a,c,t.options,t.storage),[p,u]=await Promise.all([d.read("supportsInterface",[o.I]),d.read("supportsInterface",[o.a])]);if(p){const o=(await Promise.resolve().then(e.t.bind(e,57305,19))).default,c=new s.cs(t.getSignerOrProvider(),a,o,t.options,t.storage);if(!await c.read("isApprovedForAll",[n,r])){(await c.read("getApproved",[i])).toLowerCase()===r.toLowerCase()||await c.sendTransaction("setApprovalForAll",[r,!0])}}else{if(!u)throw Error("Contract must implement ERC 1155 or ERC 721.");{const i=(await Promise.resolve().then(e.t.bind(e,59355,19))).default,o=new s.cs(t.getSignerOrProvider(),a,i,t.options,t.storage);await o.read("isApprovedForAll",[n,r])||await o.sendTransaction("setApprovalForAll",[r,!0])}}}function u(t){if((0,n.A)(void 0!==t.assetContractAddress&&null!==t.assetContractAddress,"Asset contract address is required"),(0,n.A)(void 0!==t.buyoutPricePerToken&&null!==t.buyoutPricePerToken,"Buyout price is required"),(0,n.A)(void 0!==t.listingDurationInSeconds&&null!==t.listingDurationInSeconds,"Listing duration is required"),(0,n.A)(void 0!==t.startTimestamp&&null!==t.startTimestamp,"Start time is required"),(0,n.A)(void 0!==t.tokenId&&null!==t.tokenId,"Token ID is required"),(0,n.A)(void 0!==t.quantity&&null!==t.quantity,"Quantity is required"),"NewAuctionListing"===t.type)(0,n.A)(void 0!==t.reservePricePerToken&&null!==t.reservePricePerToken,"Reserve price is required")}async function l(t,r,e){return{quantity:e.quantityDesired,pricePerToken:e.pricePerToken,currencyContractAddress:e.currency,buyerAddress:e.offeror,quantityDesired:e.quantityWanted,currencyValue:await(0,c.a)(t,e.currency,e.quantityWanted.mul(e.pricePerToken)),listingId:r}}function m(t,r,e){if(e=i.gH.from(e),t=i.gH.from(t),r=i.gH.from(r),t.eq(i.gH.from(0)))return!1;return r.sub(t).mul(s.dE).div(t).gte(e)}async function g(t,r,e){const a=[];for(;r-t>o.D;)a.push(e(t,t+o.D-1)),t+=o.D;return a.push(e(t,r-1)),await Promise.all(a)}},96137:(t,r,e)=>{e.d(r,{M:()=>v,a:()=>b,b:()=>k});var a=e(2776),i=e(10974),n=e(81237),o=e(73594),s=e(3404),c=e(71450),d=e(33409),p=e(4265),u=e(16487),l=e(70592),m=e(78473),g=e(26680),f=e(3494),h=e(6492),w=e(97665),y=e(36859),A=e(78527);const C=(()=>w.z.object({assetContractAddress:l.b9,tokenId:l.b6,quantity:l.b6.default(1),currencyContractAddress:l.b9.default(l.aV),pricePerToken:l.cw,startTimestamp:h.R.default(new Date),endTimestamp:h.E,isReservedListing:w.z.boolean().default(!1)}))();let W=function(t){return t[t.UNSET=0]="UNSET",t[t.Created=1]="Created",t[t.Completed=2]="Completed",t[t.Cancelled=3]="Cancelled",t[t.Active=4]="Active",t[t.Expired=5]="Expired",t}({});class v{featureName=(()=>l.dA.name)();constructor(t,r){this.contractWrapper=t,this.storage=r,this.events=new y.a(this.contractWrapper),this.encoder=new d.C(this.contractWrapper),this.interceptor=new A.C(this.contractWrapper),this.estimator=new y.G(this.contractWrapper)}getAddress(){return this.contractWrapper.address}async getTotalCount(){return await this.contractWrapper.read("totalListings",[])}async getAll(t){const r=await this.getTotalCount(),e=a.gH.from(t?.start||0).toNumber(),i=r.toNumber();if(0===i)throw new Error("No listings exist on the contract.");let n=[];n=(await(0,m.g)(e,i,((t,r)=>this.contractWrapper.read("getAllListings",[t,r])))).flat();const o=await this.applyFilter(n,t);return await Promise.all(o.map((t=>this.mapListing(t))))}async getAllValid(t){const r=await this.getTotalCount(),e=a.gH.from(t?.start||0).toNumber(),i=r.toNumber();if(0===i)throw new Error("No listings exist on the contract.");let n=[];n=(await(0,m.g)(e,i,((t,r)=>this.contractWrapper.read("getAllValidListings",[t,r])))).flat();const o=await this.applyFilter(n,t);return await Promise.all(o.map((t=>this.mapListing(t))))}async getListing(t){const r=await this.contractWrapper.read("getListing",[t]);return await this.mapListing(r)}async isBuyerApprovedForListing(t,r){if(!(await this.validateListing(a.gH.from(t))).isReservedListing)throw new Error(`Listing ${t} is not a reserved listing.`);return await this.contractWrapper.read("isBuyerApprovedForListing",[t,await(0,l.aL)(r)])}async isCurrencyApprovedForListing(t,r){return await this.validateListing(a.gH.from(t)),await this.contractWrapper.read("isCurrencyApprovedForListing",[t,await(0,l.aL)(r)])}async currencyPriceForListing(t,r){const e=await this.validateListing(a.gH.from(t)),i=await(0,l.aL)(r);if(i===e.currencyContractAddress)return e.pricePerToken;if(!await this.isCurrencyApprovedForListing(t,i))throw new Error(`Currency ${i} is not approved for Listing ${t}.`);return await this.contractWrapper.read("currencyPriceForListing",[t,i])}createListing=(()=>(0,f.f)((async t=>{const r=await C.parseAsync(t);await(0,m.h)(this.contractWrapper,this.getAddress(),r.assetContractAddress,r.tokenId,await this.contractWrapper.getSignerAddress());const e=await(0,p.n)(this.contractWrapper.getProvider(),r.pricePerToken,r.currencyContractAddress),i=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;r.startTimestamp.lt(i)&&(r.startTimestamp=a.gH.from(i));const n=f.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"createListing",args:[{assetContract:r.assetContractAddress,tokenId:r.tokenId,quantity:r.quantity,currency:(0,c.c)(r.currencyContractAddress),pricePerToken:e,startTimestamp:r.startTimestamp,endTimestamp:r.endTimestamp,reserved:r.isReservedListing}],parse:t=>({id:this.contractWrapper.parseLogs("NewListing",t?.logs)[0].args.listingId,receipt:t})});return n.setGasLimitMultiple(1.2),n})))();createListingsBatch=(()=>(0,f.f)((async t=>{const r=(await Promise.all(t.map((t=>this.createListing.prepare(t))))).map((t=>t.encode())),e=f.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[r],parse:t=>this.contractWrapper.parseLogs("NewListing",t?.logs).map((r=>({id:r.args.listingId,receipt:t})))});return e.setGasLimitMultiple(1.2),e})))();updateListing=(()=>(0,f.f)((async(t,r)=>{const e=await C.parseAsync(r);await(0,m.h)(this.contractWrapper,this.getAddress(),e.assetContractAddress,e.tokenId,await this.contractWrapper.getSignerAddress());const a=await(0,p.n)(this.contractWrapper.getProvider(),e.pricePerToken,e.currencyContractAddress),i=f.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"updateListing",args:[t,{assetContract:e.assetContractAddress,tokenId:e.tokenId,quantity:e.quantity,currency:(0,c.c)(e.currencyContractAddress),pricePerToken:a,startTimestamp:e.startTimestamp,endTimestamp:e.endTimestamp,reserved:e.isReservedListing}],parse:t=>({id:this.contractWrapper.parseLogs("UpdatedListing",t?.logs)[0].args.listingId,receipt:t})});return i.setGasLimitMultiple(1.2),i})))();cancelListing=(()=>(0,f.f)((async t=>{const r=f.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"cancelListing",args:[t]});return r.setGasLimitMultiple(1.2),r})))();buyFromListing=(()=>(0,f.f)((async(t,r,e)=>{e&&(e=await(0,l.aL)(e));const i=await this.validateListing(a.gH.from(t)),{valid:n,error:o}=await this.isStillValidListing(i,r);if(!n)throw new Error(`Listing ${t} is no longer valid. ${o}`);const s=e||await this.contractWrapper.getSignerAddress(),c=a.gH.from(r),d=a.gH.from(i.pricePerToken).mul(c),p=await this.contractWrapper.getCallOverrides()||{};await(0,u.s)(this.contractWrapper,d,i.currencyContractAddress,p);const m=f.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"buyFromListing",args:[t,s,c,i.currencyContractAddress,d],overrides:p});return m.setGasLimitMultiple(1.2),m})))();approveBuyerForReservedListing=(()=>(0,f.f)((async(t,r)=>{if(await this.isBuyerApprovedForListing(t,r))throw new Error(`Buyer ${r} already approved for listing ${t}.`);{const e=f.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approveBuyerForListing",args:[t,r,!0]});return e.setGasLimitMultiple(1.2),e}})))();revokeBuyerApprovalForReservedListing=(()=>(0,f.f)((async(t,r)=>{if(await this.isBuyerApprovedForListing(t,r)){const e=f.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approveBuyerForListing",args:[t,r,!1]});return e.setGasLimitMultiple(1.2),e}throw new Error(`Buyer ${r} not approved for listing ${t}.`)})))();approveCurrencyForListing=(()=>(0,f.f)((async(t,r,e)=>{const i=await this.validateListing(a.gH.from(t)),n=await(0,l.aL)(r);n===i.currencyContractAddress&&(0,s.A)(e===i.pricePerToken,"Approving listing currency with a different price.");const o=await this.contractWrapper.read("currencyPriceForListing",[t,n]);(0,s.A)(e===o,"Currency already approved with this price.");const c=f.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approveCurrencyForListing",args:[t,n,e]});return c.setGasLimitMultiple(1.2),c})))();revokeCurrencyApprovalForListing=(()=>(0,f.f)((async(t,r)=>{const e=await this.validateListing(a.gH.from(t)),i=await(0,l.aL)(r);if(i===e.currencyContractAddress)throw new Error("Can't revoke approval for main listing currency.");const n=await this.contractWrapper.read("currencyPriceForListing",[t,i]);(0,s.A)(!n.isZero(),"Currency not approved.");const o=f.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approveCurrencyForListing",args:[t,i,a.gH.from(0)]});return o.setGasLimitMultiple(1.2),o})))();async validateListing(t){try{return await this.getListing(t)}catch(r){throw console.error(`Error getting the listing with id ${t}`),r}}async mapListing(t){let r=W.UNSET;const e=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;switch(t.status){case 1:r=a.gH.from(t.startTimestamp).gt(e)?W.Created:a.gH.from(t.endTimestamp).lt(e)?W.Expired:W.Active;break;case 2:r=W.Completed;break;case 3:r=W.Cancelled}return{assetContractAddress:t.assetContract,currencyContractAddress:t.currency,pricePerToken:t.pricePerToken.toString(),currencyValuePerToken:await(0,d.a)(this.contractWrapper.getProvider(),t.currency,t.pricePerToken),id:t.listingId.toString(),tokenId:t.tokenId.toString(),quantity:t.quantity.toString(),startTimeInSeconds:a.gH.from(t.startTimestamp).toNumber(),asset:await(0,g.c)(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),endTimeInSeconds:a.gH.from(t.endTimestamp).toNumber(),creatorAddress:t.listingCreator,isReservedListing:t.reserved,status:r}}async isStillValidListing(t,r){if(!await(0,m.i)(this.contractWrapper.getProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,t.creatorAddress))return{valid:!1,error:`Token '${t.tokenId}' from contract '${t.assetContractAddress}' is not approved for transfer`};const a=this.contractWrapper.getProvider(),n=(await e.e(4811).then(e.t.bind(e,94811,19))).default,o=new i.NZ(t.assetContractAddress,n,a),s=await o.supportsInterface(g.I),c=await o.supportsInterface(g.a);if(s){const r=(await Promise.resolve().then(e.t.bind(e,57305,19))).default,n=new i.NZ(t.assetContractAddress,r,a);let o;try{o=await n.ownerOf(t.tokenId)}catch(d){}const s=o?.toLowerCase()===t.creatorAddress.toLowerCase();return{valid:s,error:s?void 0:`Seller is not the owner of Token '${t.tokenId}' from contract '${t.assetContractAddress} anymore'`}}if(c){const n=(await Promise.resolve().then(e.t.bind(e,59355,19))).default,o=new i.NZ(t.assetContractAddress,n,a),s=(await o.balanceOf(t.creatorAddress,t.tokenId)).gte(r||t.quantity);return{valid:s,error:s?void 0:`Seller does not have enough balance of Token '${t.tokenId}' from contract '${t.assetContractAddress} to fulfill the listing`}}return{valid:!1,error:"Contract does not implement ERC 1155 or ERC 721."}}async applyFilter(t,r){let e=[...t];if(r){if(r.seller){const t=await(0,l.aL)(r.seller);e=e.filter((r=>r.listingCreator.toString().toLowerCase()===t?.toString().toLowerCase()))}if(r.tokenContract){const t=await(0,l.aL)(r.tokenContract);e=e.filter((r=>r.assetContract.toString().toLowerCase()===t?.toString().toLowerCase()))}void 0!==r.tokenId&&(e=e.filter((t=>t.tokenId.toString()===r?.tokenId?.toString())))}return r?.count&&r.count<e.length?e.slice(0,r.count):e}}const L=(()=>w.z.object({assetContractAddress:l.b9,tokenId:l.b6,quantity:l.b6.default(1),currencyContractAddress:l.b9.default(l.aV),minimumBidAmount:l.cw,buyoutBidAmount:l.cw,timeBufferInSeconds:l.b6.default(900),bidBufferBps:l.b6.default(500),startTimestamp:h.R.default(new Date),endTimestamp:h.E}))();class b{featureName=(()=>l.dB.name)();constructor(t,r){this.contractWrapper=t,this.storage=r,this.events=new y.a(this.contractWrapper),this.encoder=new d.C(this.contractWrapper),this.interceptor=new A.C(this.contractWrapper),this.estimator=new y.G(this.contractWrapper)}getAddress(){return this.contractWrapper.address}async getTotalCount(){return await this.contractWrapper.read("totalAuctions",[])}async getAll(t){const r=await this.getTotalCount(),e=a.gH.from(t?.start||0).toNumber(),i=r.toNumber();if(0===i)throw new Error("No auctions exist on the contract.");let n=[];n=(await(0,m.g)(e,i,((t,r)=>this.contractWrapper.read("getAllAuctions",[t,r])))).flat();const o=await this.applyFilter(n,t);return await Promise.all(o.map((t=>this.mapAuction(t))))}async getAllValid(t){const r=await this.getTotalCount(),e=a.gH.from(t?.start||0).toNumber(),i=r.toNumber();if(0===i)throw new Error("No auctions exist on the contract.");let n=[];n=(await(0,m.g)(e,i,((t,r)=>this.contractWrapper.read("getAllValidAuctions",[t,r])))).flat();const o=await this.applyFilter(n,t);return await Promise.all(o.map((t=>this.mapAuction(t))))}async getAuction(t){const r=await this.contractWrapper.read("getAuction",[t]);return await this.mapAuction(r)}async getWinningBid(t){await this.validateAuction(a.gH.from(t));const r=await this.contractWrapper.read("getWinningBid",[t]);if(r._bidder!==n.L)return await this.mapBid(t.toString(),r._bidder,r._currency,r._bidAmount.toString())}async isWinningBid(t,r){return await this.contractWrapper.read("isNewWinningBid",[t,r])}async getWinner(t){const r=await this.validateAuction(a.gH.from(t)),e=await this.contractWrapper.read("getWinningBid",[t]),i=a.gH.from(Math.floor(Date.now()/1e3)),o=a.gH.from(r.endTimeInSeconds);if(i.gt(o)&&e._bidder!==n.L)return e._bidder;const s=new y.a(this.contractWrapper),c=(await s.getEvents("AuctionClosed")).find((r=>r.data.auctionId.eq(a.gH.from(t))));if(!c)throw new Error(`Could not find auction with ID ${t} in closed auctions`);return c.data.winningBidder}createAuction=(()=>(0,f.f)((async t=>{const r=L.parse(t);await(0,m.h)(this.contractWrapper,this.getAddress(),r.assetContractAddress,r.tokenId,await this.contractWrapper.getSignerAddress());const e=await(0,p.n)(this.contractWrapper.getProvider(),r.buyoutBidAmount,r.currencyContractAddress),i=await(0,p.n)(this.contractWrapper.getProvider(),r.minimumBidAmount,r.currencyContractAddress),n=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;r.startTimestamp.lt(n)&&(r.startTimestamp=a.gH.from(n));const o=f.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"createAuction",args:[{assetContract:r.assetContractAddress,tokenId:r.tokenId,quantity:r.quantity,currency:(0,c.c)(r.currencyContractAddress),minimumBidAmount:i,buyoutBidAmount:e,timeBufferInSeconds:r.timeBufferInSeconds,bidBufferBps:r.bidBufferBps,startTimestamp:r.startTimestamp,endTimestamp:r.endTimestamp}],parse:t=>({id:this.contractWrapper.parseLogs("NewAuction",t.logs)[0].args.auctionId,receipt:t})});return o.setGasLimitMultiple(1.2),o})))();createAuctionsBatch=(()=>(0,f.f)((async t=>{const r=(await Promise.all(t.map((t=>this.createAuction.prepare(t))))).map((t=>t.encode())),e=f.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[r],parse:t=>this.contractWrapper.parseLogs("NewAuction",t?.logs).map((r=>({id:r.args.auctionId,receipt:t})))});return e.setGasLimitMultiple(1.2),e})))();buyoutAuction=(()=>(0,f.f)((async t=>{const r=await this.validateAuction(a.gH.from(t)),e=await(0,d.f)(this.contractWrapper.getProvider(),r.currencyContractAddress);return this.makeBid.prepare(t,o.formatUnits(r.buyoutBidAmount,e.decimals))})))();makeBid=(()=>(0,f.f)((async(t,r)=>{const e=await this.validateAuction(a.gH.from(t)),i=await(0,p.n)(this.contractWrapper.getProvider(),r,e.currencyContractAddress);if(i.eq(a.gH.from(0)))throw new Error("Cannot make a bid with 0 value");if(a.gH.from(e.buyoutBidAmount).gt(0)&&i.gt(e.buyoutBidAmount))throw new Error("Bid amount must be less than or equal to buyoutBidAmount");if(await this.getWinningBid(t)){const r=await this.isWinningBid(t,i);(0,s.A)(r,"Bid price is too low based on the current winning bid and the bid buffer")}else{const t=i,r=a.gH.from(e.minimumBidAmount);(0,s.A)(t.gte(r),"Bid price is too low based on minimum bid amount")}const n=await this.contractWrapper.getCallOverrides()||{};await(0,u.s)(this.contractWrapper,i,e.currencyContractAddress,n);const o=f.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"bidInAuction",overrides:n,args:[t,i]});return o.setGasLimitMultiple(1.2),o})))();cancelAuction=(()=>(0,f.f)((async t=>{if(await this.getWinningBid(t))throw new Error("Bids already made.");const r=f.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"cancelAuction",args:[t]});return r.setGasLimitMultiple(1.2),r})))();closeAuctionForBidder=(()=>(0,f.f)((async(t,r)=>{r||(r=await this.contractWrapper.getSignerAddress());const e=await this.validateAuction(a.gH.from(t));try{const r=f.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"collectAuctionTokens",args:[a.gH.from(t)]});return r.setGasLimitMultiple(1.2),r}catch(i){throw i.message.includes("Marketplace: auction still active.")?new l.w(t.toString(),e.endTimeInSeconds.toString()):i}})))();closeAuctionForSeller=(()=>(0,f.f)((async t=>{const r=await this.validateAuction(a.gH.from(t));try{const r=f.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"collectAuctionPayout",args:[a.gH.from(t)]});return r.setGasLimitMultiple(1.2),r}catch(e){throw e.message.includes("Marketplace: auction still active.")?new l.w(t.toString(),r.endTimeInSeconds.toString()):e}})))();executeSale=(()=>(0,f.f)((async t=>{const r=await this.validateAuction(a.gH.from(t));try{const r=await this.getWinningBid(t);(0,s.A)(r,"No winning bid found");const e=this.encoder.encode("collectAuctionPayout",[t]),a=this.encoder.encode("collectAuctionTokens",[t]),i=f.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[[e,a]]});return i.setGasLimitMultiple(1.2),i}catch(e){throw e.message.includes("Marketplace: auction still active.")?new l.w(t.toString(),r.endTimeInSeconds.toString()):e}})))();async getBidBufferBps(t){return(await this.getAuction(t)).bidBufferBps}async getMinimumNextBid(t){const[r,e,i]=await Promise.all([this.getBidBufferBps(t),this.getWinningBid(t),this.validateAuction(a.gH.from(t))]),n=e?a.gH.from(e.bidAmount):a.gH.from(i.minimumBidAmount),o=n.add(n.mul(r).div(1e4));return(0,d.a)(this.contractWrapper.getProvider(),i.currencyContractAddress,o)}async validateAuction(t){try{return await this.getAuction(t)}catch(r){throw console.error(`Error getting the auction with id ${t}`),r}}async mapAuction(t){let r=W.UNSET;const e=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;switch(t.status){case 1:r=a.gH.from(t.startTimestamp).gt(e)?W.Created:a.gH.from(t.endTimestamp).lt(e)?W.Expired:W.Active;break;case 2:r=W.Completed;break;case 3:r=W.Cancelled}return{id:t.auctionId.toString(),creatorAddress:t.auctionCreator,assetContractAddress:t.assetContract,tokenId:t.tokenId.toString(),quantity:t.quantity.toString(),currencyContractAddress:t.currency,minimumBidAmount:t.minimumBidAmount.toString(),minimumBidCurrencyValue:await(0,d.a)(this.contractWrapper.getProvider(),t.currency,t.minimumBidAmount),buyoutBidAmount:t.buyoutBidAmount.toString(),buyoutCurrencyValue:await(0,d.a)(this.contractWrapper.getProvider(),t.currency,t.buyoutBidAmount),timeBufferInSeconds:a.gH.from(t.timeBufferInSeconds).toNumber(),bidBufferBps:a.gH.from(t.bidBufferBps).toNumber(),startTimeInSeconds:a.gH.from(t.startTimestamp).toNumber(),endTimeInSeconds:a.gH.from(t.endTimestamp).toNumber(),asset:await(0,g.c)(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),status:r}}async mapBid(t,r,e,a){const i=await(0,l.aL)(r),n=await(0,l.aL)(e);return{auctionId:t,bidderAddress:i,currencyContractAddress:n,bidAmount:a,bidAmountCurrencyValue:await(0,d.a)(this.contractWrapper.getProvider(),n,a)}}async applyFilter(t,r){let e=[...t];if(r){if(r.seller){const t=await(0,l.aL)(r.seller);e=e.filter((r=>r.auctionCreator.toString().toLowerCase()===t?.toString().toLowerCase()))}if(r.tokenContract){const t=await(0,l.aL)(r.tokenContract);e=e.filter((r=>r.assetContract.toString().toLowerCase()===t?.toString().toLowerCase()))}void 0!==r.tokenId&&(e=e.filter((t=>t.tokenId.toString()===r?.tokenId?.toString())))}return r?.count&&r.count<e.length?e.slice(0,r.count):e}}const T=(()=>w.z.object({assetContractAddress:l.b9,tokenId:l.b6,quantity:l.b6.default(1),currencyContractAddress:l.b9.default(l.aV),totalPrice:l.cw,endTimestamp:h.E}))();class k{featureName=(()=>l.dC.name)();constructor(t,r){this.contractWrapper=t,this.storage=r,this.events=new y.a(this.contractWrapper),this.encoder=new d.C(this.contractWrapper),this.interceptor=new A.C(this.contractWrapper),this.estimator=new y.G(this.contractWrapper)}getAddress(){return this.contractWrapper.address}async getTotalCount(){return await this.contractWrapper.read("totalOffers",[])}async getAll(t){const r=await this.getTotalCount(),e=a.gH.from(t?.start||0).toNumber(),i=r.toNumber();if(0===i)throw new Error("No offers exist on the contract.");let n=[];n=(await(0,m.g)(e,i,((t,r)=>this.contractWrapper.read("getAllOffers",[t,r])))).flat();const o=await this.applyFilter(n,t);return await Promise.all(o.map((t=>this.mapOffer(t))))}async getAllValid(t){const r=await this.getTotalCount(),e=a.gH.from(t?.start||0).toNumber(),i=r.toNumber();if(0===i)throw new Error("No offers exist on the contract.");let n=[];n=(await(0,m.g)(e,i,((t,r)=>this.contractWrapper.read("getAllValidOffers",[t,r])))).flat();const o=await this.applyFilter(n,t);return await Promise.all(o.map((t=>this.mapOffer(t))))}async getOffer(t){const r=await this.contractWrapper.read("getOffer",[t]);return await this.mapOffer(r)}makeOffer=(()=>(0,f.f)((async t=>{const r=await T.parseAsync(t),e=await this.contractWrapper.getChainID(),a=(0,d.i)(r.currencyContractAddress)?l.aW[e].wrapped.address:r.currencyContractAddress,i=await(0,p.n)(this.contractWrapper.getProvider(),r.totalPrice,a),n=await this.contractWrapper.getCallOverrides();return await(0,u.s)(this.contractWrapper,i,a,n),f.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"makeOffer",args:[{assetContract:r.assetContractAddress,tokenId:r.tokenId,quantity:r.quantity,currency:a,totalPrice:i,expirationTimestamp:r.endTimestamp}],parse:t=>({id:this.contractWrapper.parseLogs("NewOffer",t?.logs)[0].args.offerId,receipt:t})})})))();cancelOffer=(()=>(0,f.f)((async t=>f.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"cancelOffer",args:[t]}))))();acceptOffer=(()=>(0,f.f)((async t=>{const r=await this.validateOffer(a.gH.from(t)),{valid:e,error:i}=await this.isStillValidOffer(r);if(!e)throw new Error(`Offer ${t} is no longer valid. ${i}`);const n=await this.contractWrapper.getCallOverrides()||{};return await(0,m.h)(this.contractWrapper,this.getAddress(),r.assetContractAddress,r.tokenId,await this.contractWrapper.getSignerAddress()),f.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"acceptOffer",args:[t],overrides:n})})))();async validateOffer(t){try{return await this.getOffer(t)}catch(r){throw console.error(`Error getting the offer with id ${t}`),r}}async mapOffer(t){let r=W.UNSET;const e=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;switch(t.status){case 1:r=a.gH.from(t.expirationTimestamp).lt(e)?W.Expired:W.Active;break;case 2:r=W.Completed;break;case 3:r=W.Cancelled}return{id:t.offerId.toString(),offerorAddress:t.offeror,assetContractAddress:t.assetContract,currencyContractAddress:t.currency,tokenId:t.tokenId.toString(),quantity:t.quantity.toString(),totalPrice:t.totalPrice.toString(),currencyValue:await(0,d.a)(this.contractWrapper.getProvider(),t.currency,t.totalPrice),asset:await(0,g.c)(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),endTimeInSeconds:a.gH.from(t.expirationTimestamp).toNumber(),status:r}}async isStillValidOffer(t){if(a.gH.from(Math.floor(Date.now()/1e3)).gt(t.endTimeInSeconds))return{valid:!1,error:`Offer with ID ${t.id} has expired`};const r=await this.contractWrapper.getChainID(),i=(0,d.i)(t.currencyContractAddress)?l.aW[r].wrapped.address:t.currencyContractAddress,n=this.contractWrapper.getProvider(),o=(await Promise.resolve().then(e.t.bind(e,96337,19))).default,s=new l.cs(n,i,o,{},this.storage);if((await s.read("balanceOf",[t.offerorAddress])).lt(t.totalPrice))return{valid:!1,error:`Offeror ${t.offerorAddress} doesn't have enough balance of token ${i}`};return(await s.read("allowance",[t.offerorAddress,this.getAddress()])).lt(t.totalPrice)?{valid:!1,error:`Offeror ${t.offerorAddress} hasn't approved enough amount of token ${i}`}:{valid:!0,error:""}}async applyFilter(t,r){let e=[...t];if(r){if(r.offeror){const t=await(0,l.aL)(r.offeror);e=e.filter((r=>r.offeror.toString().toLowerCase()===t?.toString().toLowerCase()))}if(r.tokenContract){const t=await(0,l.aL)(r.tokenContract);e=e.filter((r=>r.assetContract.toString().toLowerCase()===t?.toString().toLowerCase()))}void 0!==r.tokenId&&(e=e.filter((t=>t.tokenId.toString()===r?.tokenId?.toString())))}return r?.count&&r.count<e.length?e.slice(0,r.count):e}}}}]);
//# sourceMappingURL=5848.6b38d12b.chunk.js.map