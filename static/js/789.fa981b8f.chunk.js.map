{"version":3,"file":"static/js/789.fa981b8f.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/dist/WagmiConnector-2f14002d.browser.esm.js","../node_modules/@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/dist/errors-9edc08c8.browser.esm.js","../node_modules/@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/dist/normalizeChainId-1fb9aedf.browser.esm.js","../node_modules/@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.browser.esm.js"],"sourcesContent":["import { defaultChains } from '@thirdweb-dev/chains';\nimport EventEmitter from 'eventemitter3';\n\nclass WagmiConnector extends EventEmitter {\n  /** Unique connector id */\n\n  /** Connector name */\n\n  /** Chains connector supports */\n\n  /** Options to use with connector */\n\n  /** Whether connector is usable */\n\n  constructor(_ref) {\n    let {\n      chains = defaultChains,\n      options\n    } = _ref;\n    super();\n    this.chains = chains;\n    this.options = options;\n  }\n  getBlockExplorerUrls(chain) {\n    const explorers = chain.explorers?.map(x => x.url) ?? [];\n    return explorers.length > 0 ? explorers : undefined;\n  }\n  isChainUnsupported(chainId) {\n    return !this.chains.some(x => x.chainId === chainId);\n  }\n  updateChains(chains) {\n    this.chains = chains;\n  }\n}\n\nexport { WagmiConnector as W };\n","import { _ as _defineProperty } from './defineProperty-350fc508.browser.esm.js';\n\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors per EIP-1474.\n * @see https://eips.ethereum.org/EIPS/eip-1474\n */\nclass RpcError extends Error {\n  constructor( /** Human-readable string */\n  message, options) {\n    const {\n      cause,\n      code,\n      data\n    } = options;\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error('\"message\" must be a nonempty string.');\n    }\n    super(`${message}. Cause: ${JSON.stringify(cause)}`);\n    this.cause = cause;\n    this.code = code;\n    this.data = data;\n  }\n}\n\n/**\n * @internal\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * @see https://eips.ethereum.org/EIPS/eip-1193\n */\nclass ProviderRpcError extends RpcError {\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   * `code` must be an integer in the `1000 <= 4999` range.\n   */\n  constructor( /** Human-readable string */\n  message, options) {\n    const {\n      cause,\n      code,\n      data\n    } = options;\n    if (!(Number.isInteger(code) && code >= 1000 && code <= 4999)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n    super(message, {\n      cause,\n      code,\n      data\n    });\n  }\n}\n\n/**\n * @internal\n */\nclass AddChainError extends Error {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"name\", \"AddChainError\");\n    _defineProperty(this, \"message\", \"Error adding chain\");\n  }\n}\n\n/**\n * @internal\n */\nclass ChainNotConfiguredError extends Error {\n  constructor(_ref) {\n    let {\n      chainId,\n      connectorId\n    } = _ref;\n    super(`Chain \"${chainId}\" not configured for connector \"${connectorId}\".`);\n    _defineProperty(this, \"name\", \"ChainNotConfigured\");\n  }\n}\nclass ConnectorNotFoundError extends Error {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"name\", \"ConnectorNotFoundError\");\n    _defineProperty(this, \"message\", \"Connector not found\");\n  }\n}\nclass ResourceUnavailableError extends RpcError {\n  constructor(cause) {\n    super(\"Resource unavailable\", {\n      cause,\n      code: -32002\n    });\n    _defineProperty(this, \"name\", \"ResourceUnavailable\");\n  }\n}\n/**\n * @internal\n */\nclass SwitchChainError extends ProviderRpcError {\n  constructor(cause) {\n    super(\"Error switching chain\", {\n      cause,\n      code: 4902\n    });\n    _defineProperty(this, \"name\", \"SwitchChainError\");\n  }\n}\n/**\n * @internal\n */\nclass UserRejectedRequestError extends ProviderRpcError {\n  constructor(cause) {\n    super(\"User rejected request\", {\n      cause,\n      code: 4001\n    });\n    _defineProperty(this, \"name\", \"UserRejectedRequestError\");\n  }\n}\n\n/**\n * @internal\n */\n// Ethers does not have an error type so we can use this for casting\n// https://github.com/ethers-io/ethers.js/blob/main/packages/logger/src.ts/index.ts#L268\n\nexport { AddChainError as A, ChainNotConfiguredError as C, ProviderRpcError as P, ResourceUnavailableError as R, SwitchChainError as S, UserRejectedRequestError as U, ConnectorNotFoundError as a };\n","/**\n * @internal\n */\nfunction normalizeChainId(chainId) {\n  if (typeof chainId === \"string\") {\n    return Number.parseInt(chainId, chainId.trim().substring(0, 2) === \"0x\" ? 16 : 10);\n  }\n  if (typeof chainId === \"bigint\") {\n    return Number(chainId);\n  }\n  return chainId;\n}\n\nexport { normalizeChainId as n };\n","import { _ as _defineProperty } from '../../../../dist/defineProperty-350fc508.browser.esm.js';\nimport { W as WagmiConnector } from '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\nimport { U as UserRejectedRequestError, a as ConnectorNotFoundError, S as SwitchChainError } from '../../../../dist/errors-9edc08c8.browser.esm.js';\nimport BloctoSDK from '@blocto/sdk';\nimport { utils, providers } from 'ethers';\nimport { w as walletIds } from '../../../../dist/walletIds-dff6dced.browser.esm.js';\nimport { g as getValidPublicRPCUrl } from '../../../../dist/url-a45219bd.browser.esm.js';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-1fb9aedf.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\nclass BloctoConnector extends WagmiConnector {\n  constructor(_ref) {\n    let {\n      chains,\n      options = {}\n    } = _ref;\n    super({\n      chains,\n      options\n    });\n    _defineProperty(this, \"id\", walletIds.blocto);\n    _defineProperty(this, \"name\", \"Blocto\");\n    _defineProperty(this, \"ready\", true);\n    this._onAccountsChangedBind = this.onAccountsChanged.bind(this);\n    this._onChainChangedBind = this.onChainChanged.bind(this);\n    this._onDisconnectBind = this.onDisconnect.bind(this);\n  }\n  async connect(config) {\n    try {\n      const provider = await this.getProvider(config);\n      this.setupListeners();\n      this.emit(\"message\", {\n        type: \"connecting\"\n      });\n      const accounts = await provider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const account = utils.getAddress(accounts[0]);\n      const id = await this.getChainId();\n      const unsupported = this.isChainUnsupported(id);\n      return {\n        account,\n        chain: {\n          id,\n          unsupported\n        },\n        provider\n      };\n    } catch (error) {\n      this._handleConnectReset();\n      if (this._isUserRejectedRequestError(error)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw error;\n    }\n  }\n  async disconnect() {\n    const provider = await this.getProvider();\n    await provider.request({\n      method: \"wallet_disconnect\"\n    });\n    this.removeListeners();\n    this._handleConnectReset();\n  }\n  async getAccount() {\n    const provider = await this.getProvider();\n    const accounts = await provider.request({\n      method: \"eth_accounts\"\n    });\n    const [address] = accounts || [];\n    if (!address) {\n      throw new Error(\"No accounts found\");\n    }\n    return address;\n  }\n  async getChainId() {\n    const provider = await this.getProvider();\n    const chainId = await provider.request({\n      method: \"eth_chainId\"\n    });\n    return normalizeChainId(chainId);\n  }\n  getProvider() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this._provider) {\n      const _chainId = chainId ?? this.chains[0]?.chainId ?? 1;\n      const _rpc = this.chains.find(x => x.chainId === _chainId)?.rpc[0];\n      this._provider = new BloctoSDK({\n        ethereum: {\n          chainId: _chainId,\n          rpc: _rpc\n        },\n        appId: this.options.appId\n      })?.ethereum;\n    }\n    if (!this._provider) {\n      throw new ConnectorNotFoundError();\n    }\n    return Promise.resolve(this._provider);\n  }\n  async getSigner() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const [provider, account] = await Promise.all([this.getProvider(), this.getAccount()]);\n    return new providers.Web3Provider(provider, chainId).getSigner(account);\n  }\n  async isAuthorized() {\n    return !!this._provider?._blocto?.sessionKeyEnv ?? false;\n  }\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    const id = utils.hexValue(chainId);\n    const chain = this.chains.find(x => x.chainId === chainId);\n    if (!chain) {\n      throw new SwitchChainError(new Error(\"chain not found on connector.\"));\n    }\n    const blocktoSupportedChainList = await provider.supportChainList();\n    const isBloctoSupportChain = blocktoSupportedChainList[`${chainId}`];\n    if (!isBloctoSupportChain) {\n      throw new SwitchChainError(new Error(`Blocto unsupported chain: ${id}`));\n    }\n    try {\n      await provider.request({\n        method: \"wallet_addEthereumChain\",\n        params: [{\n          chainId: id,\n          rpcUrls: getValidPublicRPCUrl(chain) // no client id on purpose here\n        }]\n      });\n      await provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: id\n        }]\n      });\n      return chain;\n    } catch (error) {\n      if (this._isUserRejectedRequestError(error)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw new SwitchChainError(error);\n    }\n  }\n  onAccountsChanged() {\n    // not supported yet\n  }\n  async onChainChanged(chain) {\n    const id = normalizeChainId(chain);\n    const unsupported = this.isChainUnsupported(id);\n    const account = await this.getAccount();\n    this.emit(\"change\", {\n      chain: {\n        id,\n        unsupported\n      },\n      account\n    });\n  }\n  onDisconnect() {\n    this.emit(\"disconnect\");\n  }\n  async setupListeners() {\n    const provider = await this.getProvider();\n    provider.on(\"accountsChanged\", this._onAccountsChangedBind);\n    provider.on(\"chainChanged\", this._onChainChangedBind);\n    provider.on(\"disconnect\", this._onDisconnectBind);\n  }\n  async removeListeners() {\n    const provider = await this.getProvider();\n    provider.off(\"accountsChanged\", this._onAccountsChangedBind);\n    provider.off(\"chainChanged\", this._onChainChangedBind);\n    provider.off(\"disconnect\", this._onDisconnectBind);\n  }\n  _isUserRejectedRequestError(error) {\n    return /(user rejected)/i.test(error.message);\n  }\n  _handleConnectReset() {\n    this._provider = undefined;\n  }\n}\n\nexport { BloctoConnector };\n"],"names":["WagmiConnector","EventEmitter","constructor","_ref","chains","defaultChains","options","super","this","getBlockExplorerUrls","chain","explorers","map","x","url","length","undefined","isChainUnsupported","chainId","some","updateChains","RpcError","Error","message","cause","code","data","Number","isInteger","JSON","stringify","ProviderRpcError","AddChainError","arguments","_defineProperty","ChainNotConfiguredError","connectorId","ConnectorNotFoundError","ResourceUnavailableError","SwitchChainError","UserRejectedRequestError","normalizeChainId","parseInt","trim","substring","BloctoConnector","walletIds","blocto","_onAccountsChangedBind","onAccountsChanged","bind","_onChainChangedBind","onChainChanged","_onDisconnectBind","onDisconnect","connect","config","provider","getProvider","setupListeners","emit","type","accounts","request","method","account","utils","id","getChainId","unsupported","error","_handleConnectReset","_isUserRejectedRequestError","disconnect","removeListeners","getAccount","address","_provider","_chainId","_rpc","find","rpc","BloctoSDK","ethereum","appId","Promise","resolve","getSigner","all","providers","isAuthorized","_blocto","sessionKeyEnv","switchChain","supportChainList","params","rpcUrls","getValidPublicRPCUrl","on","off","test"],"sourceRoot":""}