{"version":3,"file":"static/js/5997.97daad24.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/dist/WagmiConnector-2f14002d.browser.esm.js","../node_modules/@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/dist/errors-9edc08c8.browser.esm.js","../node_modules/@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.browser.esm.js"],"sourcesContent":["import { defaultChains } from '@thirdweb-dev/chains';\nimport EventEmitter from 'eventemitter3';\n\nclass WagmiConnector extends EventEmitter {\n  /** Unique connector id */\n\n  /** Connector name */\n\n  /** Chains connector supports */\n\n  /** Options to use with connector */\n\n  /** Whether connector is usable */\n\n  constructor(_ref) {\n    let {\n      chains = defaultChains,\n      options\n    } = _ref;\n    super();\n    this.chains = chains;\n    this.options = options;\n  }\n  getBlockExplorerUrls(chain) {\n    const explorers = chain.explorers?.map(x => x.url) ?? [];\n    return explorers.length > 0 ? explorers : undefined;\n  }\n  isChainUnsupported(chainId) {\n    return !this.chains.some(x => x.chainId === chainId);\n  }\n  updateChains(chains) {\n    this.chains = chains;\n  }\n}\n\nexport { WagmiConnector as W };\n","import { _ as _defineProperty } from './defineProperty-350fc508.browser.esm.js';\n\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors per EIP-1474.\n * @see https://eips.ethereum.org/EIPS/eip-1474\n */\nclass RpcError extends Error {\n  constructor( /** Human-readable string */\n  message, options) {\n    const {\n      cause,\n      code,\n      data\n    } = options;\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error('\"message\" must be a nonempty string.');\n    }\n    super(`${message}. Cause: ${JSON.stringify(cause)}`);\n    this.cause = cause;\n    this.code = code;\n    this.data = data;\n  }\n}\n\n/**\n * @internal\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * @see https://eips.ethereum.org/EIPS/eip-1193\n */\nclass ProviderRpcError extends RpcError {\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   * `code` must be an integer in the `1000 <= 4999` range.\n   */\n  constructor( /** Human-readable string */\n  message, options) {\n    const {\n      cause,\n      code,\n      data\n    } = options;\n    if (!(Number.isInteger(code) && code >= 1000 && code <= 4999)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n    super(message, {\n      cause,\n      code,\n      data\n    });\n  }\n}\n\n/**\n * @internal\n */\nclass AddChainError extends Error {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"name\", \"AddChainError\");\n    _defineProperty(this, \"message\", \"Error adding chain\");\n  }\n}\n\n/**\n * @internal\n */\nclass ChainNotConfiguredError extends Error {\n  constructor(_ref) {\n    let {\n      chainId,\n      connectorId\n    } = _ref;\n    super(`Chain \"${chainId}\" not configured for connector \"${connectorId}\".`);\n    _defineProperty(this, \"name\", \"ChainNotConfigured\");\n  }\n}\nclass ConnectorNotFoundError extends Error {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"name\", \"ConnectorNotFoundError\");\n    _defineProperty(this, \"message\", \"Connector not found\");\n  }\n}\nclass ResourceUnavailableError extends RpcError {\n  constructor(cause) {\n    super(\"Resource unavailable\", {\n      cause,\n      code: -32002\n    });\n    _defineProperty(this, \"name\", \"ResourceUnavailable\");\n  }\n}\n/**\n * @internal\n */\nclass SwitchChainError extends ProviderRpcError {\n  constructor(cause) {\n    super(\"Error switching chain\", {\n      cause,\n      code: 4902\n    });\n    _defineProperty(this, \"name\", \"SwitchChainError\");\n  }\n}\n/**\n * @internal\n */\nclass UserRejectedRequestError extends ProviderRpcError {\n  constructor(cause) {\n    super(\"User rejected request\", {\n      cause,\n      code: 4001\n    });\n    _defineProperty(this, \"name\", \"UserRejectedRequestError\");\n  }\n}\n\n/**\n * @internal\n */\n// Ethers does not have an error type so we can use this for casting\n// https://github.com/ethers-io/ethers.js/blob/main/packages/logger/src.ts/index.ts#L268\n\nexport { AddChainError as A, ChainNotConfiguredError as C, ProviderRpcError as P, ResourceUnavailableError as R, SwitchChainError as S, UserRejectedRequestError as U, ConnectorNotFoundError as a };\n","import { _ as _defineProperty } from '../../../../dist/defineProperty-350fc508.browser.esm.js';\nimport { U as UserRejectedRequestError, S as SwitchChainError } from '../../../../dist/errors-9edc08c8.browser.esm.js';\nimport { utils, providers } from 'ethers';\nimport { w as walletIds } from '../../../../dist/walletIds-dff6dced.browser.esm.js';\nimport { g as getValidPublicRPCUrl } from '../../../../dist/url-a45219bd.browser.esm.js';\nimport { W as WagmiConnector } from '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\nconst chainsToRequest = new Set([1, 137, 10, 42161, 56]);\nconst NAMESPACE = \"eip155\";\nconst REQUESTED_CHAINS_KEY = \"wagmi.requestedChains\";\nconst ADD_ETH_CHAIN_METHOD = \"wallet_addEthereumChain\";\nconst LAST_USED_CHAIN_ID = \"last-used-chain-id\";\nclass WalletConnectConnector extends WagmiConnector {\n  constructor(config) {\n    super({\n      ...config,\n      options: {\n        isNewChainsStale: true,\n        ...config.options\n      }\n    });\n    _defineProperty(this, \"id\", walletIds.walletConnect);\n    _defineProperty(this, \"name\", \"WalletConnect\");\n    _defineProperty(this, \"ready\", true);\n    _defineProperty(this, \"onAccountsChanged\", accounts => {\n      if (accounts.length === 0) {\n        this.emit(\"disconnect\");\n      } else {\n        if (accounts[0]) {\n          this.emit(\"change\", {\n            account: utils.getAddress(accounts[0])\n          });\n        }\n      }\n    });\n    _defineProperty(this, \"onChainChanged\", async chainId => {\n      const id = Number(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      await this._storage.setItem(LAST_USED_CHAIN_ID, String(chainId));\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    _defineProperty(this, \"onDisconnect\", async () => {\n      await this._setRequestedChainsIds([]);\n      await this._storage.removeItem(LAST_USED_CHAIN_ID);\n      this.emit(\"disconnect\");\n    });\n    _defineProperty(this, \"onDisplayUri\", uri => {\n      this.emit(\"message\", {\n        type: \"display_uri\",\n        data: uri\n      });\n    });\n    _defineProperty(this, \"onConnect\", () => {\n      this.emit(\"connect\", {\n        provider: this._provider\n      });\n    });\n    this._storage = config.options.storage;\n    this._createProvider();\n    this.filteredChains = this.chains.length > 50 ? this.chains.filter(c => {\n      return chainsToRequest.has(c.chainId);\n    }) : this.chains;\n    this.showWalletConnectModal = this.options.qrcode !== false;\n  }\n  async connect() {\n    let {\n      chainId: chainIdP,\n      pairingTopic\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      let targetChainId = chainIdP;\n      if (!targetChainId) {\n        const lastUsedChainIdStr = await this._storage.getItem(LAST_USED_CHAIN_ID);\n        const lastUsedChainId = lastUsedChainIdStr ? parseInt(lastUsedChainIdStr) : undefined;\n        if (lastUsedChainId && !this.isChainUnsupported(lastUsedChainId)) {\n          targetChainId = lastUsedChainId;\n        } else {\n          targetChainId = this.filteredChains[0]?.chainId;\n        }\n      }\n      if (!targetChainId) {\n        throw new Error(\"No chains found on connector.\");\n      }\n      const provider = await this.getProvider();\n      this.setupListeners();\n      if (provider.session) {\n        await provider.disconnect();\n        const optionalChains = this.filteredChains.filter(chain => chain.chainId !== targetChainId).map(optionalChain => optionalChain.chainId);\n        this.emit(\"message\", {\n          type: \"connecting\"\n        });\n        await provider.connect({\n          pairingTopic,\n          chains: [targetChainId],\n          optionalChains: optionalChains.length > 0 ? optionalChains : [targetChainId]\n        });\n        await this._setRequestedChainsIds(this.filteredChains.map(_ref => {\n          let {\n            chainId\n          } = _ref;\n          return chainId;\n        }));\n      }\n\n      // If session exists and chains are authorized, enable provider for required chain\n      const accounts = await provider.enable();\n      if (!accounts[0]) {\n        throw new Error(\"No accounts found on provider.\");\n      }\n      const account = utils.getAddress(accounts[0]);\n      const id = await this.getChainId();\n      const unsupported = this.isChainUnsupported(id);\n      return {\n        account,\n        chain: {\n          id,\n          unsupported\n        },\n        provider: new providers.Web3Provider(provider)\n      };\n    } catch (error) {\n      if (/user rejected/i.test(error?.message)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw error;\n    }\n  }\n  async disconnect() {\n    const cleanup = () => {\n      if (typeof localStorage === \"undefined\") {\n        return;\n      }\n      for (const key in localStorage) {\n        if (key.startsWith(\"wc@2\")) {\n          localStorage.removeItem(key);\n        }\n      }\n    };\n    cleanup();\n    const provider = await this.getProvider();\n    const disconnectProvider = async () => {\n      try {\n        await provider.disconnect();\n      } catch (error) {\n        if (!/No matching key/i.test(error.message)) {\n          throw error;\n        }\n      } finally {\n        this._removeListeners();\n        await this._setRequestedChainsIds([]);\n        cleanup();\n      }\n    };\n    disconnectProvider();\n  }\n  async getAccount() {\n    const {\n      accounts\n    } = await this.getProvider();\n    if (!accounts[0]) {\n      throw new Error(\"No accounts found on provider.\");\n    }\n    return utils.getAddress(accounts[0]);\n  }\n  async getChainId() {\n    const {\n      chainId\n    } = await this.getProvider();\n    return chainId;\n  }\n  async getProvider() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this._provider) {\n      await this._createProvider();\n    }\n    if (chainId) {\n      await this.switchChain(chainId);\n    }\n    if (!this._provider) {\n      throw new Error(\"No provider found.\");\n    }\n    return this._provider;\n  }\n  async getSigner() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const [provider, account] = await Promise.all([this.getProvider({\n      chainId\n    }), this.getAccount()]);\n    return new providers.Web3Provider(provider, chainId).getSigner(account);\n  }\n  async isAuthorized() {\n    try {\n      const [account, provider] = await Promise.all([this.getAccount(), this.getProvider()]);\n      const isChainsStale = await this._isChainsStale();\n\n      // If an account does not exist on the session, then the connector is unauthorized.\n      if (!account) {\n        return false;\n      }\n\n      // If the chains are stale on the session, then the connector is unauthorized.\n      if (isChainsStale && provider.session) {\n        try {\n          await provider.disconnect();\n        } catch {} // eslint-disable-line no-empty\n        return false;\n      }\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  async switchChain(chainId) {\n    const chain = this.chains.find(chain_ => chain_.chainId === chainId);\n    if (!chain) {\n      throw new SwitchChainError(`Chain with ID: ${chainId}, not found on connector.`);\n    }\n    try {\n      const provider = await this.getProvider();\n      const namespaceChains = this._getNamespaceChainsIds();\n      const namespaceMethods = this._getNamespaceMethods();\n      const isChainApproved = namespaceChains.includes(chainId);\n      if (!isChainApproved && namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) {\n        const firstExplorer = chain.explorers && chain.explorers[0];\n        const blockExplorerUrls = firstExplorer ? {\n          blockExplorerUrls: [firstExplorer.url]\n        } : {};\n        await provider.request({\n          method: ADD_ETH_CHAIN_METHOD,\n          params: [{\n            chainId: utils.hexValue(chain.chainId),\n            chainName: chain.name,\n            nativeCurrency: chain.nativeCurrency,\n            rpcUrls: getValidPublicRPCUrl(chain),\n            // no clientId on purpose\n            ...blockExplorerUrls\n          }]\n        });\n        const requestedChains = await this._getRequestedChainsIds();\n        requestedChains.push(chainId);\n        await this._setRequestedChainsIds(requestedChains);\n      }\n      await provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: utils.hexValue(chainId)\n        }]\n      });\n      return chain;\n    } catch (error) {\n      const message = typeof error === \"string\" ? error : error?.message;\n      if (/user rejected request/i.test(message)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw new SwitchChainError(error);\n    }\n  }\n  async _createProvider() {\n    if (!this._initProviderPromise && \"object\" !== \"undefined\") {\n      this._initProviderPromise = this.initProvider();\n    }\n    return this._initProviderPromise;\n  }\n  async initProvider() {\n    const {\n      default: EthereumProvider,\n      OPTIONAL_EVENTS,\n      OPTIONAL_METHODS\n    } = await import('@walletconnect/ethereum-provider');\n    const [defaultChain, ...optionalChains] = this.filteredChains.map(_ref2 => {\n      let {\n        chainId\n      } = _ref2;\n      return chainId;\n    });\n    if (defaultChain) {\n      // EthereumProvider populates & deduplicates required methods and events internally\n      this._provider = await EthereumProvider.init({\n        showQrModal: this.showWalletConnectModal,\n        projectId: this.options.projectId,\n        methods: [\"eth_sendTransaction\", \"personal_sign\", \"eth_signTypedData_v4\"],\n        optionalMethods: OPTIONAL_METHODS,\n        optionalEvents: OPTIONAL_EVENTS,\n        chains: [defaultChain],\n        optionalChains: optionalChains,\n        metadata: {\n          name: this.options.dappMetadata.name,\n          description: this.options.dappMetadata.description || \"\",\n          url: this.options.dappMetadata.url,\n          icons: [this.options.dappMetadata.logoUrl || \"\"]\n        },\n        rpcMap: Object.fromEntries(this.filteredChains.map(chain => [chain.chainId, chain.rpc[0] || \"\" // TODO: handle chain.rpc being empty array\n        ])),\n        qrModalOptions: this.options.qrModalOptions\n      });\n    }\n  }\n\n  /**\n   * Checks if the target chains match the chains that were\n   * initially requested by the connector for the WalletConnect session.\n   * If there is a mismatch, this means that the chains on the connector\n   * are considered stale, and need to be revalidated at a later point (via\n   * connection).\n   *\n   * There may be a scenario where a dapp adds a chain to the\n   * connector later on, however, this chain will not have been approved or rejected\n   * by the wallet. In this case, the chain is considered stale.\n   *\n   * There are exceptions however:\n   * -  If the wallet supports dynamic chain addition via `eth_addEthereumChain`,\n   *    then the chain is not considered stale.\n   * -  If the `isNewChainsStale` flag is falsy on the connector, then the chain is\n   *    not considered stale.\n   *\n   * For the above cases, chain validation occurs dynamically when the user\n   * attempts to switch chain.\n   *\n   * Also check that dapp supports at least 1 chain from previously approved session.\n   */\n  async _isChainsStale() {\n    const namespaceMethods = this._getNamespaceMethods();\n    if (namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) {\n      return false;\n    }\n    if (!this.options.isNewChainsStale) {\n      return false;\n    }\n    const requestedChains = await this._getRequestedChainsIds();\n    const connectorChains = this.filteredChains.map(_ref3 => {\n      let {\n        chainId\n      } = _ref3;\n      return chainId;\n    });\n    const namespaceChains = this._getNamespaceChainsIds();\n    if (namespaceChains.length && !namespaceChains.some(id => connectorChains.includes(id))) {\n      return false;\n    }\n    return !connectorChains.every(id => requestedChains.includes(id));\n  }\n  async setupListeners() {\n    if (!this._provider) {\n      return;\n    }\n    this._removeListeners();\n    this._provider.on(\"accountsChanged\", this.onAccountsChanged);\n    this._provider.on(\"chainChanged\", this.onChainChanged);\n    this._provider.on(\"disconnect\", this.onDisconnect);\n    this._provider.on(\"session_delete\", this.onDisconnect);\n    this._provider.on(\"display_uri\", this.onDisplayUri);\n    this._provider.on(\"connect\", this.onConnect);\n  }\n  _removeListeners() {\n    if (!this._provider) {\n      return;\n    }\n    this._provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n    this._provider.removeListener(\"chainChanged\", this.onChainChanged);\n    this._provider.removeListener(\"disconnect\", this.onDisconnect);\n    this._provider.removeListener(\"session_delete\", this.onDisconnect);\n    this._provider.removeListener(\"display_uri\", this.onDisplayUri);\n    this._provider.removeListener(\"connect\", this.onConnect);\n  }\n  async _setRequestedChainsIds(chains) {\n    await this._storage.setItem(REQUESTED_CHAINS_KEY, JSON.stringify(chains));\n  }\n  async _getRequestedChainsIds() {\n    const data = await this._storage.getItem(REQUESTED_CHAINS_KEY);\n    return data ? JSON.parse(data) : [];\n  }\n  _getNamespaceChainsIds() {\n    if (!this._provider) {\n      return [];\n    }\n    const chainIds = this._provider.session?.namespaces[NAMESPACE]?.chains?.map(chain => parseInt(chain.split(\":\")[1] || \"\"));\n    return chainIds ?? [];\n  }\n  _getNamespaceMethods() {\n    if (!this._provider) {\n      return [];\n    }\n    const methods = this._provider.session?.namespaces[NAMESPACE]?.methods;\n    return methods ?? [];\n  }\n}\n\nexport { WalletConnectConnector };\n"],"names":["WagmiConnector","EventEmitter","constructor","_ref","chains","defaultChains","options","super","this","getBlockExplorerUrls","chain","explorers","map","x","url","length","undefined","isChainUnsupported","chainId","some","updateChains","RpcError","Error","message","cause","code","data","Number","isInteger","JSON","stringify","ProviderRpcError","AddChainError","arguments","_defineProperty","ChainNotConfiguredError","connectorId","ConnectorNotFoundError","ResourceUnavailableError","SwitchChainError","UserRejectedRequestError","chainsToRequest","Set","NAMESPACE","REQUESTED_CHAINS_KEY","ADD_ETH_CHAIN_METHOD","LAST_USED_CHAIN_ID","WalletConnectConnector","config","isNewChainsStale","walletIds","walletConnect","accounts","emit","account","utils","async","id","unsupported","_storage","setItem","String","_setRequestedChainsIds","removeItem","uri","type","provider","_provider","storage","_createProvider","filteredChains","filter","c","has","showWalletConnectModal","qrcode","connect","chainIdP","pairingTopic","targetChainId","lastUsedChainIdStr","getItem","lastUsedChainId","parseInt","getProvider","setupListeners","session","disconnect","optionalChains","optionalChain","enable","getChainId","providers","error","test","cleanup","localStorage","key","startsWith","_removeListeners","disconnectProvider","getAccount","switchChain","getSigner","Promise","all","isAuthorized","isChainsStale","_isChainsStale","find","chain_","namespaceChains","_getNamespaceChainsIds","namespaceMethods","_getNamespaceMethods","includes","firstExplorer","blockExplorerUrls","request","method","params","chainName","name","nativeCurrency","rpcUrls","getValidPublicRPCUrl","requestedChains","_getRequestedChainsIds","push","_initProviderPromise","initProvider","default","EthereumProvider","OPTIONAL_EVENTS","OPTIONAL_METHODS","defaultChain","_ref2","init","showQrModal","projectId","methods","optionalMethods","optionalEvents","metadata","dappMetadata","description","icons","logoUrl","rpcMap","Object","fromEntries","rpc","qrModalOptions","connectorChains","_ref3","every","on","onAccountsChanged","onChainChanged","onDisconnect","onDisplayUri","onConnect","removeListener","parse","chainIds","namespaces","split"],"sourceRoot":""}