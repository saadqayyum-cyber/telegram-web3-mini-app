"use strict";(self.webpackChunkmango=self.webpackChunkmango||[]).push([[8579],{61857:(i,t,n)=>{n.d(t,{W:()=>o});var e=n(3754),s=n(73026);class o extends s.A{constructor(i){let{chains:t=e.k9b,options:n}=i;super(),this.chains=t,this.options=n}getBlockExplorerUrls(i){const t=i.explorers?.map((i=>i.url))??[];return t.length>0?t:void 0}isChainUnsupported(i){return!this.chains.some((t=>t.chainId===i))}updateChains(i){this.chains=i}}},333:(i,t,n)=>{function e(i){return"string"===typeof i?Number.parseInt(i,"0x"===i.trim().substring(0,2)?16:10):"bigint"===typeof i?Number(i):i}n.d(t,{n:()=>e})},960:(i,t,n)=>{n.d(t,{MagicAuthConnector:()=>g});var e=n(31932),s=n(333),o=n(38045),r=n(48987),a=n(50249),c=n(2590),h=n(61857);n(73026);class d extends h.W{constructor(i){super(i),(0,e._)(this,"id","magic-link"),(0,e._)(this,"name","Magic Link"),(0,e._)(this,"ready",!0),this.magicOptions=i.options}async getAccount(){const i=new o.j(await this.getProvider()).getSigner(),t=await i.getAddress();return t.startsWith("0x")?t:`0x${t}`}async getProvider(){if(this.provider)return this.provider;const i=this.getMagicSDK();return this.provider=i.rpcProvider,this.provider}async getSigner(){const i=new o.j(await this.getProvider());return await i.getSigner()}async isAuthorized(){const i=this.getMagicSDK();try{return await i.user.isLoggedIn()}catch(t){return!1}}onAccountsChanged(i){0===i.length?this.emit("disconnect"):i[0]&&this.emit("change",{account:r.getAddress(i[0])})}onChainChanged(i){const t=(0,s.n)(i),n=this.isChainUnsupported(t);this.emit("change",{chain:{id:t,unsupported:n}})}onDisconnect(){this.emit("disconnect")}async disconnect(){const i=this.getMagicSDK();await i.user.logout()}}class g extends d{constructor(i){super(i),this.magicSdkConfiguration=i.options.magicSdkConfiguration,this._type=i.options.type,this.oauthProviders=i.options.oauthOptions?.providers||[],this.oauthRedirectURI=i.options.oauthOptions?.redirectURI}async connect(i){if(!this.magicOptions.apiKey)throw new Error("Magic API Key is not provided.");try{i.chainId&&this.initializeMagicSDK({chainId:i.chainId});const n=await this.getProvider();this.setupListeners(),this.emit("message",{type:"connecting"});const e=await this.isAuthorized();let s;try{s=await this.getChainId()}catch(t){s=0}if(this._connectedChainId=s,e)return{provider:n,chain:{id:s,unsupported:!1},account:await this.getAccount()};const o=this.getMagicSDK();if("connect"===this._type)("email"in i||"phoneNumber"in i)&&console.warn("Passing email or phoneNumber is not required for Magic Connect"),await o.wallet.connectWithUI();else if("oauthProvider"in i)await o.oauth.loginWithRedirect({provider:i.oauthProvider,redirectURI:this.oauthRedirectURI||window.location.href}),await new Promise((i=>{setTimeout(i,1e4)}));else if("email"in i)await o.auth.loginWithMagicLink({email:i.email,showUI:!0});else{if(!("phoneNumber"in i))throw new Error("Invalid options: Either provide and email, phoneNumber or oauthProvider when using Magic Auth");await o.auth.loginWithSMS({phoneNumber:i.phoneNumber})}const r=await this.getSigner();let a=await r.getAddress();return a.startsWith("0x")||(a=`0x${a}`),{account:a,chain:{id:s,unsupported:!1},provider:n}}catch(n){throw console.error(n),new Error("Something went wrong")}}async getChainId(){const i=this.magicSdkConfiguration?.network;if("object"===typeof i){const t=i.chainId;if(t)return(0,s.n)(t)}throw new Error("Chain ID is not defined")}initializeMagicSDK(){let{chainId:i}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const t={...this.magicSdkConfiguration,extensions:[new a.lq]};if(i){const n=this.chains.find((t=>t.chainId===i));n&&(t.network={rpcUrl:n.rpc[0]||"",chainId:n.chainId})}return this.magicSDK=new c.qM(this.magicOptions.apiKey,t),this.provider=this.magicSDK.rpcProvider,this.magicSDK}getMagicSDK(){return this.magicSDK?this.magicSDK:this.initializeMagicSDK()}async setupListeners(){const i=await this.getProvider();i.on("accountsChanged",this.onAccountsChanged),i.on("chainChanged",this.onChainChanged),i.on("disconnect",this.onDisconnect)}async switchChain(i){const t=this.chains.find((t=>t.chainId===i));if(!t)throw new Error("Chain not found");return this._connectedChainId!==i&&this.initializeMagicSDK({chainId:i}),t}}}}]);
//# sourceMappingURL=8579.78ebbf3a.chunk.js.map