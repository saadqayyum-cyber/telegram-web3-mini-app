{"version":3,"file":"static/js/401.2c43b75b.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/dist/WagmiConnector-2f14002d.browser.esm.js","../node_modules/@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/dist/errors-9edc08c8.browser.esm.js","../node_modules/@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/dist/normalizeChainId-1fb9aedf.browser.esm.js","../node_modules/@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/evm/connectors/frame/dist/thirdweb-dev-wallets-evm-connectors-frame.browser.esm.js"],"sourcesContent":["import { defaultChains } from '@thirdweb-dev/chains';\nimport EventEmitter from 'eventemitter3';\n\nclass WagmiConnector extends EventEmitter {\n  /** Unique connector id */\n\n  /** Connector name */\n\n  /** Chains connector supports */\n\n  /** Options to use with connector */\n\n  /** Whether connector is usable */\n\n  constructor(_ref) {\n    let {\n      chains = defaultChains,\n      options\n    } = _ref;\n    super();\n    this.chains = chains;\n    this.options = options;\n  }\n  getBlockExplorerUrls(chain) {\n    const explorers = chain.explorers?.map(x => x.url) ?? [];\n    return explorers.length > 0 ? explorers : undefined;\n  }\n  isChainUnsupported(chainId) {\n    return !this.chains.some(x => x.chainId === chainId);\n  }\n  updateChains(chains) {\n    this.chains = chains;\n  }\n}\n\nexport { WagmiConnector as W };\n","import { _ as _defineProperty } from './defineProperty-350fc508.browser.esm.js';\n\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors per EIP-1474.\n * @see https://eips.ethereum.org/EIPS/eip-1474\n */\nclass RpcError extends Error {\n  constructor( /** Human-readable string */\n  message, options) {\n    const {\n      cause,\n      code,\n      data\n    } = options;\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error('\"message\" must be a nonempty string.');\n    }\n    super(`${message}. Cause: ${JSON.stringify(cause)}`);\n    this.cause = cause;\n    this.code = code;\n    this.data = data;\n  }\n}\n\n/**\n * @internal\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * @see https://eips.ethereum.org/EIPS/eip-1193\n */\nclass ProviderRpcError extends RpcError {\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   * `code` must be an integer in the `1000 <= 4999` range.\n   */\n  constructor( /** Human-readable string */\n  message, options) {\n    const {\n      cause,\n      code,\n      data\n    } = options;\n    if (!(Number.isInteger(code) && code >= 1000 && code <= 4999)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n    super(message, {\n      cause,\n      code,\n      data\n    });\n  }\n}\n\n/**\n * @internal\n */\nclass AddChainError extends Error {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"name\", \"AddChainError\");\n    _defineProperty(this, \"message\", \"Error adding chain\");\n  }\n}\n\n/**\n * @internal\n */\nclass ChainNotConfiguredError extends Error {\n  constructor(_ref) {\n    let {\n      chainId,\n      connectorId\n    } = _ref;\n    super(`Chain \"${chainId}\" not configured for connector \"${connectorId}\".`);\n    _defineProperty(this, \"name\", \"ChainNotConfigured\");\n  }\n}\nclass ConnectorNotFoundError extends Error {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"name\", \"ConnectorNotFoundError\");\n    _defineProperty(this, \"message\", \"Connector not found\");\n  }\n}\nclass ResourceUnavailableError extends RpcError {\n  constructor(cause) {\n    super(\"Resource unavailable\", {\n      cause,\n      code: -32002\n    });\n    _defineProperty(this, \"name\", \"ResourceUnavailable\");\n  }\n}\n/**\n * @internal\n */\nclass SwitchChainError extends ProviderRpcError {\n  constructor(cause) {\n    super(\"Error switching chain\", {\n      cause,\n      code: 4902\n    });\n    _defineProperty(this, \"name\", \"SwitchChainError\");\n  }\n}\n/**\n * @internal\n */\nclass UserRejectedRequestError extends ProviderRpcError {\n  constructor(cause) {\n    super(\"User rejected request\", {\n      cause,\n      code: 4001\n    });\n    _defineProperty(this, \"name\", \"UserRejectedRequestError\");\n  }\n}\n\n/**\n * @internal\n */\n// Ethers does not have an error type so we can use this for casting\n// https://github.com/ethers-io/ethers.js/blob/main/packages/logger/src.ts/index.ts#L268\n\nexport { AddChainError as A, ChainNotConfiguredError as C, ProviderRpcError as P, ResourceUnavailableError as R, SwitchChainError as S, UserRejectedRequestError as U, ConnectorNotFoundError as a };\n","/**\n * @internal\n */\nfunction normalizeChainId(chainId) {\n  if (typeof chainId === \"string\") {\n    return Number.parseInt(chainId, chainId.trim().substring(0, 2) === \"0x\" ? 16 : 10);\n  }\n  if (typeof chainId === \"bigint\") {\n    return Number(chainId);\n  }\n  return chainId;\n}\n\nexport { normalizeChainId as n };\n","import { _ as _defineProperty } from '../../../../dist/defineProperty-350fc508.browser.esm.js';\nimport { utils, providers } from 'ethers';\nimport { W as WagmiConnector } from '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\nimport { a as ConnectorNotFoundError, U as UserRejectedRequestError, R as ResourceUnavailableError, C as ChainNotConfiguredError, A as AddChainError, S as SwitchChainError } from '../../../../dist/errors-9edc08c8.browser.esm.js';\nimport { g as getValidPublicRPCUrl } from '../../../../dist/url-a45219bd.browser.esm.js';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-1fb9aedf.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\nclass FrameConnector extends WagmiConnector {\n  constructor(_ref) {\n    let {\n      chains,\n      options: suppliedOptions,\n      connectorStorage\n    } = _ref;\n    const options = {\n      shimDisconnect: true,\n      ...suppliedOptions\n    };\n    super({\n      chains,\n      options\n    });\n    _defineProperty(this, \"id\", \"frame\");\n    _defineProperty(this, \"name\", \"Frame\");\n    _defineProperty(this, \"ready\", true);\n    _defineProperty(this, \"shimDisconnectKey\", `${this.id}.shimDisconnect`);\n    _defineProperty(this, \"onAccountsChanged\", accounts => {\n      if (accounts.length === 0) {\n        this.emit(\"disconnect\");\n      } else {\n        this.emit(\"change\", {\n          account: utils.getAddress(accounts[0])\n        });\n      }\n    });\n    _defineProperty(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    _defineProperty(this, \"onDisconnect\", () => {\n      this.emit(\"disconnect\");\n      // Remove shim signalling wallet is disconnected\n      if (this.options.shimDisconnect) {\n        this.connectorStorage.removeItem(this.shimDisconnectKey);\n      }\n    });\n    this.connectorStorage = connectorStorage;\n  }\n  async connect(config) {\n    try {\n      const provider = await this.getProvider();\n      if (!provider) {\n        throw new ConnectorNotFoundError();\n      }\n      this.setupListeners();\n      this.emit(\"message\", {\n        type: \"connecting\"\n      });\n      const accounts = await provider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const account = utils.getAddress(accounts[0]);\n      // Switch to chain if provided\n      let id = await this.getChainId();\n      let unsupported = this.isChainUnsupported(id);\n      if (config?.chainId && id !== config?.chainId) {\n        const chain = await this.switchChain(config?.chainId);\n        id = chain.chainId;\n        unsupported = this.isChainUnsupported(id);\n      }\n\n      // Add shim to storage signalling wallet is connected\n      if (this.options.shimDisconnect) {\n        this.connectorStorage.setItem(this.shimDisconnectKey, \"true\");\n      }\n      return {\n        account,\n        provider,\n        chain: {\n          id,\n          unsupported\n        }\n      };\n    } catch (error) {\n      if (this.isUserRejectedRequestError(error)) {\n        throw new UserRejectedRequestError(error);\n      }\n      if (error.code === -32002) {\n        throw new ResourceUnavailableError(error);\n      }\n      throw error;\n    }\n  }\n  async disconnect() {\n    const provider = await this.getProvider();\n    if (!provider?.removeListener) {\n      return;\n    }\n    provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n    provider.removeListener(\"chainChanged\", this.onChainChanged);\n    provider.removeListener(\"disconnect\", this.onDisconnect);\n    if (!this.isInjected()) {\n      provider.close();\n    }\n\n    // Remove shim signalling wallet is disconnected\n    if (this.options.shimDisconnect) {\n      this.connectorStorage.removeItem(this.shimDisconnectKey);\n    }\n  }\n  async getAccount() {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    const accounts = await provider.request({\n      method: \"eth_accounts\"\n    });\n    // return checksum address\n    return utils.getAddress(accounts[0]);\n  }\n  async getChainId() {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    const chainId = await provider.request({\n      method: \"eth_chainId\"\n    });\n    return normalizeChainId(chainId);\n  }\n  async getProvider() {\n    this._provider = this.isInjected() ? this.injectedProvider() : await this.createProvider();\n    return this._provider;\n  }\n\n  /**\n   * get a `signer` for given `chainId`\n   */\n  async getSigner() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const [provider, account] = await Promise.all([this.getProvider(), this.getAccount()]);\n\n    // ethers.providers.Web3Provider\n    return new providers.Web3Provider(provider, chainId).getSigner(account);\n  }\n  async isAuthorized() {\n    try {\n      if (this.options.shimDisconnect &&\n      // If shim does not exist in storage, wallet is disconnected\n      !this.connectorStorage.getItem(this.shimDisconnectKey)) {\n        return false;\n      }\n      const provider = await this.getProvider();\n      if (!provider) {\n        throw new ConnectorNotFoundError();\n      }\n      const account = await this.getAccount();\n      return !!account;\n    } catch {\n      return false;\n    }\n  }\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    const chainIdHex = utils.hexValue(chainId);\n    try {\n      await Promise.all([provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: chainIdHex\n        }]\n      }), new Promise(res => this.on(\"change\", _ref2 => {\n        let {\n          chain\n        } = _ref2;\n        if (chain?.id === chainId) {\n          res();\n        }\n      }))]);\n      return this.chains.find(x => x.chainId === chainId) ?? {\n        chainId: chainId,\n        name: `Chain ${chainIdHex}`,\n        slug: `${chainIdHex}`,\n        nativeCurrency: {\n          name: \"Ether\",\n          decimals: 18,\n          symbol: \"ETH\"\n        },\n        rpc: [\"\"],\n        chain: \"\",\n        shortName: \"\",\n        testnet: true\n      };\n    } catch (switchChainError) {\n      const chain = this.chains.find(x => x.chainId === chainId);\n      if (!chain) {\n        throw new ChainNotConfiguredError({\n          chainId,\n          connectorId: this.id\n        });\n      }\n\n      // Indicates chain is not added to provider\n      if (switchChainError.code === 4902) {\n        try {\n          await provider.request({\n            method: \"wallet_addEthereumChain\",\n            params: [{\n              chainId: chainIdHex,\n              chainName: chain.name,\n              nativeCurrency: chain.nativeCurrency,\n              rpcUrls: getValidPublicRPCUrl(chain),\n              // no client id on purpose here\n              blockExplorerUrls: this.getBlockExplorerUrls(chain)\n            }]\n          });\n          const currentChainId = await this.getChainId();\n          if (currentChainId !== chainId) {\n            throw new UserRejectedRequestError(new Error(\"User rejected switch after adding network.\"));\n          }\n          return chain;\n        } catch (addChainError) {\n          // if user rejects request to add chain\n          if (this.isUserRejectedRequestError(addChainError)) {\n            throw new UserRejectedRequestError(addChainError);\n          }\n\n          // else other error\n          throw new AddChainError(addChainError.message);\n        }\n      }\n\n      // if user rejects request to switch chain\n      if (this.isUserRejectedRequestError(switchChainError)) {\n        throw new UserRejectedRequestError(switchChainError);\n      }\n\n      // else other error\n      throw new SwitchChainError(switchChainError);\n    }\n  }\n  async watchAsset(_ref3) {\n    let {\n      address,\n      decimals = 18,\n      image,\n      symbol\n    } = _ref3;\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    return provider.request({\n      method: \"wallet_watchAsset\",\n      params: {\n        type: \"ERC20\",\n        options: {\n          address,\n          decimals,\n          image,\n          symbol\n        }\n      }\n    });\n  }\n  async setupListeners() {\n    const provider = await this.getProvider();\n    if (provider.on) {\n      provider.on(\"accountsChanged\", this.onAccountsChanged);\n      provider.on(\"chainChanged\", this.onChainChanged);\n      provider.on(\"disconnect\", this.onDisconnect);\n    }\n  }\n  isUserRejectedRequestError(error) {\n    return error.code === 4001;\n  }\n  injectedProvider() {\n    return window?.ethereum;\n  }\n  isInjected() {\n    return !!this.injectedProvider()?.isFrame;\n  }\n  async createProvider() {\n    const ethProvider = (await import('eth-provider')).default;\n    return ethProvider(\"frame\");\n  }\n}\n\nexport { FrameConnector };\n"],"names":["WagmiConnector","EventEmitter","constructor","_ref","chains","defaultChains","options","super","this","getBlockExplorerUrls","chain","explorers","map","x","url","length","undefined","isChainUnsupported","chainId","some","updateChains","RpcError","Error","message","cause","code","data","Number","isInteger","JSON","stringify","ProviderRpcError","AddChainError","arguments","_defineProperty","ChainNotConfiguredError","connectorId","ConnectorNotFoundError","ResourceUnavailableError","SwitchChainError","UserRejectedRequestError","normalizeChainId","parseInt","trim","substring","FrameConnector","suppliedOptions","connectorStorage","shimDisconnect","id","accounts","emit","account","utils","unsupported","removeItem","shimDisconnectKey","connect","config","provider","getProvider","setupListeners","type","request","method","getChainId","switchChain","setItem","error","isUserRejectedRequestError","disconnect","removeListener","onAccountsChanged","onChainChanged","onDisconnect","isInjected","close","getAccount","_provider","injectedProvider","createProvider","getSigner","Promise","all","providers","isAuthorized","getItem","chainIdHex","params","res","on","_ref2","find","name","slug","nativeCurrency","decimals","symbol","rpc","shortName","testnet","switchChainError","chainName","rpcUrls","getValidPublicRPCUrl","blockExplorerUrls","addChainError","watchAsset","_ref3","address","image","window","ethereum","isFrame","ethProvider","default"],"sourceRoot":""}