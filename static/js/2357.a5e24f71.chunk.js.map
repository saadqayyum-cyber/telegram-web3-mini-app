{"version":3,"file":"static/js/2357.a5e24f71.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/dist/normalizeChainId-1fb9aedf.browser.esm.js","../node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.browser.esm.js"],"sourcesContent":["/**\n * @internal\n */\nfunction normalizeChainId(chainId) {\n  if (typeof chainId === \"string\") {\n    return Number.parseInt(chainId, chainId.trim().substring(0, 2) === \"0x\" ? 16 : 10);\n  }\n  if (typeof chainId === \"bigint\") {\n    return Number(chainId);\n  }\n  return chainId;\n}\n\nexport { normalizeChainId as n };\n","import { _ as _defineProperty } from '../../../../dist/defineProperty-350fc508.browser.esm.js';\nimport { RecoveryShareManagement, UserStatus } from '@paperxyz/embedded-wallet-service-sdk';\nimport { utils } from 'ethers';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-1fb9aedf.browser.esm.js';\nimport { w as walletIds } from '../../../../dist/walletIds-dff6dced.browser.esm.js';\nimport { C as Connector } from '../../../../dist/connector-05689d68.browser.esm.js';\nimport 'eventemitter3';\n\nclass PaperWalletConnector extends Connector {\n  constructor(options) {\n    super();\n    _defineProperty(this, \"id\", walletIds.paper);\n    _defineProperty(this, \"name\", \"Paper Wallet\");\n    _defineProperty(this, \"ready\", true);\n    _defineProperty(this, \"user\", null);\n    _defineProperty(this, \"onAccountsChanged\", async accounts => {\n      if (accounts.length === 0) {\n        await this.onDisconnect();\n      } else {\n        this.emit(\"change\", {\n          account: utils.getAddress(accounts[0])\n        });\n      }\n    });\n    _defineProperty(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.options.chains.findIndex(c => c.chainId === id) === -1;\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    _defineProperty(this, \"onDisconnect\", async () => {\n      this.emit(\"disconnect\");\n    });\n    this.options = options;\n  }\n  getPaperSDK() {\n    if (!this.paper) {\n      this.paper = new Promise(async (resolve, reject) => {\n        const recoveryMethod = this.options.advancedOptions?.recoveryShareManagement;\n        try {\n          const {\n            PaperEmbeddedWalletSdk\n          } = await import('@paperxyz/embedded-wallet-service-sdk');\n          const methodToEnum = {\n            AWS_MANAGED: RecoveryShareManagement.AWS_MANAGED,\n            USER_MANAGED: RecoveryShareManagement.USER_MANAGED\n          };\n          const recoveryShareManagement = recoveryMethod ? methodToEnum[recoveryMethod] : undefined;\n          resolve(new PaperEmbeddedWalletSdk({\n            advancedOptions: {\n              recoveryShareManagement\n            },\n            clientId: this.options.clientId,\n            chain: \"Ethereum\",\n            styles: this.options.styles,\n            onAuthSuccess: this.options.onAuthSuccess\n          }));\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n    return this.paper;\n  }\n  async connect(options) {\n    const paperSDK = await this.getPaperSDK();\n    if (!paperSDK) {\n      throw new Error(\"Paper SDK not initialized\");\n    }\n    const user = await paperSDK.getUser();\n    switch (user.status) {\n      case UserStatus.LOGGED_OUT:\n        {\n          let authResult;\n\n          // Show Google popup\n          if (options?.googleLogin) {\n            const arg = options.googleLogin;\n            authResult = await paperSDK.auth.loginWithGoogle(typeof arg === \"object\" ? arg : undefined);\n          }\n\n          // Headless\n          else if (options?.email && options?.otp) {\n            authResult = await paperSDK.auth.verifyPaperEmailLoginOtp({\n              email: options.email,\n              otp: options.otp,\n              recoveryCode: options.recoveryCode\n            });\n          }\n\n          // Show OTP modal\n          else if (options?.email) {\n            authResult = await paperSDK.auth.loginWithPaperEmailOtp({\n              email: options.email\n            });\n          }\n\n          // Show Full Modal\n          else {\n            authResult = await paperSDK.auth.loginWithPaperModal();\n          }\n          this.user = authResult.user;\n          break;\n        }\n      case UserStatus.LOGGED_IN_WALLET_INITIALIZED:\n        {\n          if (typeof options?.googleLogin === \"object\") {\n            if (options.googleLogin.closeOpenedWindow && options.googleLogin.openedWindow) {\n              options.googleLogin.closeOpenedWindow(options.googleLogin.openedWindow);\n            }\n          }\n          this.user = user;\n          break;\n        }\n    }\n    if (!this.user) {\n      throw new Error(\"Error connecting User\");\n    }\n    if (options?.chainId) {\n      this.switchChain(options.chainId);\n    }\n    this.setupListeners();\n    return this.getAddress();\n  }\n  async disconnect() {\n    const paper = await this.paper;\n    await paper?.auth.logout();\n    this._signer = undefined;\n    this.user = null;\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    return signer.getAddress();\n  }\n  async isConnected() {\n    try {\n      const addr = await this.getAddress();\n      return !!addr;\n    } catch (e) {\n      return false;\n    }\n  }\n  async getProvider() {\n    const signer = await this.getSigner();\n    if (!signer.provider) {\n      throw new Error(\"Provider not found\");\n    }\n    return signer.provider;\n  }\n  async getSigner() {\n    if (this._signer) {\n      return this._signer;\n    }\n    if (!this.user) {\n      const paperSDK = await this.getPaperSDK();\n      const user = await paperSDK.getUser();\n      switch (user.status) {\n        case UserStatus.LOGGED_IN_WALLET_INITIALIZED:\n          {\n            this.user = user;\n            break;\n          }\n      }\n    }\n    const signer = await this.user?.wallet.getEthersJsSigner({\n      rpcEndpoint: this.options.chain.rpc[0] || \"\" // TODO: handle chain.rpc being empty array\n    });\n    if (!signer) {\n      throw new Error(\"Signer not found\");\n    }\n    this._signer = signer;\n    return signer;\n  }\n  async isAuthorized() {\n    return false;\n  }\n  async switchChain(chainId) {\n    const chain = this.options.chains.find(c => c.chainId === chainId);\n    if (!chain) {\n      throw new Error(\"Chain not configured\");\n    }\n\n    // update chain in wallet\n    await this.user?.wallet.setChain({\n      chain: \"Ethereum\"\n    }); // just pass Ethereum no matter what chain we are going to connect\n\n    // update signer\n    this._signer = await this.user?.wallet.getEthersJsSigner({\n      rpcEndpoint: chain.rpc[0] || \"\" // TODO: handle chain.rpc being empty array\n    });\n    this.emit(\"change\", {\n      chain: {\n        id: chainId,\n        unsupported: false\n      }\n    });\n  }\n\n  // private getUser() {\n  //   if (!this.user) {\n  //     throw new Error(\"User not found\");\n  //   }\n  //   return this.user;\n  // }\n\n  async setupListeners() {\n    const provider = await this.getProvider();\n    if (provider.on) {\n      provider.on(\"accountsChanged\", this.onAccountsChanged);\n      provider.on(\"chainChanged\", this.onChainChanged);\n      provider.on(\"disconnect\", this.onDisconnect);\n    }\n  }\n  updateChains(chains) {\n    this.options.chains = chains;\n  }\n  async getEmail() {\n    await this.getProvider();\n    if (!this.user) {\n      throw new Error(\"No user found, Paper Wallet is not connected\");\n    }\n    return this.user.authDetails.email;\n  }\n}\n\nexport { PaperWalletConnector };\n"],"names":["normalizeChainId","chainId","Number","parseInt","trim","substring","PaperWalletConnector","Connector","constructor","options","super","_defineProperty","this","walletIds","paper","async","accounts","length","onDisconnect","emit","account","utils","id","unsupported","chains","findIndex","c","chain","getPaperSDK","Promise","resolve","reject","recoveryMethod","advancedOptions","recoveryShareManagement","PaperEmbeddedWalletSdk","methodToEnum","AWS_MANAGED","RecoveryShareManagement","USER_MANAGED","undefined","clientId","styles","onAuthSuccess","err","connect","paperSDK","Error","user","getUser","status","UserStatus","LOGGED_OUT","authResult","googleLogin","arg","auth","loginWithGoogle","email","otp","verifyPaperEmailLoginOtp","recoveryCode","loginWithPaperEmailOtp","loginWithPaperModal","LOGGED_IN_WALLET_INITIALIZED","closeOpenedWindow","openedWindow","switchChain","setupListeners","getAddress","disconnect","logout","_signer","getSigner","isConnected","e","getProvider","signer","provider","wallet","getEthersJsSigner","rpcEndpoint","rpc","isAuthorized","find","setChain","on","onAccountsChanged","onChainChanged","updateChains","getEmail","authDetails"],"sourceRoot":""}