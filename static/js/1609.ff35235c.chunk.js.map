{"version":3,"file":"static/js/1609.ff35235c.chunk.js","mappings":"yIAGA,MAAMA,UAAuBC,EAAAA,EAW3BC,WAAAA,CAAYC,GACV,IAAI,OACFC,EAASC,EAAAA,IAAa,QACtBC,GACEH,EACJI,QACAC,KAAKJ,OAASA,EACdI,KAAKF,QAAUA,CACjB,CACAG,oBAAAA,CAAqBC,GACnB,MAAMC,EAAYD,EAAMC,WAAWC,KAAIC,GAAKA,EAAEC,OAAQ,GACtD,OAAOH,EAAUI,OAAS,EAAIJ,OAAYK,CAC5C,CACAC,kBAAAA,CAAmBC,GACjB,OAAQV,KAAKJ,OAAOe,MAAKN,GAAKA,EAAEK,UAAYA,GAC9C,CACAE,YAAAA,CAAahB,GACXI,KAAKJ,OAASA,CAChB,E,kBC7BF,SAASiB,EAAiBH,GACxB,MAAuB,kBAAZA,EACFI,OAAOC,SAASL,EAA4C,OAAnCA,EAAQM,OAAOC,UAAU,EAAG,GAAc,GAAK,IAE1D,kBAAZP,EACFI,OAAOJ,GAETA,CACT,C,6JCDA,MAAMQ,UAA2B1B,EAAAA,EAC/BE,WAAAA,CAAYyB,GACVpB,MAAMoB,IACNC,EAAAA,EAAAA,GAAgBpB,KAAM,KAAM,eAC5BoB,EAAAA,EAAAA,GAAgBpB,KAAM,OAAQ,eAC9BoB,EAAAA,EAAAA,GAAgBpB,KAAM,SAAS,GAC/BA,KAAKqB,aAAeF,EAAOrB,OAC7B,CACA,gBAAMwB,GACJ,MAEMC,EAFW,IAAIC,EAAAA,QAAoCxB,KAAKyB,eAEtCC,YAClBC,QAAgBJ,EAAOK,aAC7B,OAAID,EAAQE,WAAW,MACdF,EAEF,KAAKA,GACd,CACA,iBAAMF,GACJ,GAAIzB,KAAK8B,SACP,OAAO9B,KAAK8B,SAEd,MAAMC,EAAQ/B,KAAKgC,cAEnB,OADAhC,KAAK8B,SAAWC,EAAME,YACfjC,KAAK8B,QACd,CACA,eAAMJ,GACJ,MAAMI,EAAW,IAAIN,EAAAA,QAAoCxB,KAAKyB,eAG9D,aADqBK,EAASJ,WAEhC,CACA,kBAAMQ,GACJ,MAAMH,EAAQ/B,KAAKgC,cACnB,IACE,aAAaD,EAAMI,KAAKC,YAC1B,CAAE,MAAOC,GACP,OAAO,CACT,CACF,CACAC,iBAAAA,CAAkBC,GACQ,IAApBA,EAAShC,OACXP,KAAKwC,KAAK,cAEND,EAAS,IACXvC,KAAKwC,KAAK,SAAU,CAClBb,QAASc,EAAAA,WAAiBF,EAAS,KAI3C,CACAG,cAAAA,CAAehC,GACb,MAAMiC,GAAK9B,EAAAA,EAAAA,GAAiBH,GACtBkC,EAAc5C,KAAKS,mBAAmBkC,GAC5C3C,KAAKwC,KAAK,SAAU,CAClBtC,MAAO,CACLyC,KACAC,gBAGN,CACAC,YAAAA,GACE7C,KAAKwC,KAAK,aACZ,CACA,gBAAMM,GACJ,MAAMf,EAAQ/B,KAAKgC,oBACbD,EAAMI,KAAKY,QACnB,EAEF,MAAMC,UAA2B9B,EAC/BxB,WAAAA,CAAYyB,GACVpB,MAAMoB,GACNnB,KAAKiD,sBAAwB9B,EAAOrB,QAAQmD,sBAC5CjD,KAAKkD,MAAQ/B,EAAOrB,QAAQqD,KAC5BnD,KAAKoD,eAAiBjC,EAAOrB,QAAQuD,cAAcC,WAAa,GAChEtD,KAAKuD,iBAAmBpC,EAAOrB,QAAQuD,cAAcG,WACvD,CACA,aAAMC,CAAQ3D,GACZ,IAAKE,KAAKqB,aAAaqC,OACrB,MAAM,IAAIC,MAAM,kCAElB,IACM7D,EAAQY,SACVV,KAAK4D,mBAAmB,CACtBlD,QAASZ,EAAQY,UAGrB,MAAMoB,QAAiB9B,KAAKyB,cAC5BzB,KAAK6D,iBACL7D,KAAKwC,KAAK,UAAW,CACnBW,KAAM,eAIR,MAAMW,QAAwB9D,KAAKkC,eAGnC,IAAIxB,EACJ,IACEA,QAAgBV,KAAK+D,YACvB,CAAE,MAAO1B,GACP3B,EAAU,CACZ,CAIA,GAHAV,KAAKgE,kBAAoBtD,EAGrBoD,EACF,MAAO,CACLhC,WACA5B,MAAO,CACLyC,GAAIjC,EACJkC,aAAa,GAEfjB,cAAe3B,KAAKsB,cAGxB,MAAMS,EAAQ/B,KAAKgC,cACnB,GAAmB,YAAfhC,KAAKkD,OACH,UAAWpD,GAAW,gBAAiBA,IACzCmE,QAAQC,KAAK,wEAETnC,EAAMoC,OAAOC,qBAGnB,GAAI,kBAAmBtE,QACfiC,EAAMsC,MAAMC,kBAAkB,CAClCxC,SAAUhC,EAAQyE,cAClBf,YAAaxD,KAAKuD,kBAAoBiB,OAAOC,SAASC,aAElD,IAAIC,SAAQC,IAEhBC,WAAWD,EAAK,IAAM,SAKrB,GAAI,UAAW9E,QACZiC,EAAM+C,KAAKC,mBAAmB,CAClCC,MAAOlF,EAAQkF,MACfC,QAAQ,QAKP,MAAI,gBAAiBnF,GAQxB,MAAM,IAAI6D,MAAM,uGAPV5B,EAAM+C,KAAKI,aAAa,CAC5BC,YAAarF,EAAQqF,aAOzB,CAEF,MAAM5D,QAAevB,KAAK0B,YAC1B,IAAIC,QAAgBJ,EAAOK,aAI3B,OAHKD,EAAQE,WAAW,QACtBF,EAAU,KAAKA,KAEV,CACLA,UACAzB,MAAO,CACLyC,GAAIjC,EACJkC,aAAa,GAEfd,WAIJ,CAAE,MAAOsD,GAEP,MADAnB,QAAQmB,MAAMA,GACR,IAAIzB,MAAM,uBAClB,CACF,CACA,gBAAMI,GACJ,MAAMsB,EAAiBrF,KAAKiD,uBAAuBqC,QACnD,GAA8B,kBAAnBD,EAA6B,CACtC,MAAME,EAAUF,EAAe3E,QAC/B,GAAI6E,EACF,OAAO1E,EAAAA,EAAAA,GAAiB0E,EAE5B,CACA,MAAM,IAAI5B,MAAM,0BAClB,CACAC,kBAAAA,GACE,IAAI,QACFlD,GACE8E,UAAUjF,OAAS,QAAsBC,IAAjBgF,UAAU,GAAmBA,UAAU,GAAK,CAAC,EACzE,MAAM1F,EAAU,IACXE,KAAKiD,sBACRwC,WAAY,CAAC,IAAIC,EAAAA,KAEnB,GAAIhF,EAAS,CACX,MAAMR,EAAQF,KAAKJ,OAAO+F,MAAKC,GAAKA,EAAElF,UAAYA,IAC9CR,IACFJ,EAAQwF,QAAU,CAChBO,OAAQ3F,EAAM4F,IAAI,IAAM,GAExBpF,QAASR,EAAMQ,SAGrB,CAGA,OAFAV,KAAK+F,SAAW,IAAIC,EAAAA,GAAMhG,KAAKqB,aAAaqC,OAAQ5D,GACpDE,KAAK8B,SAAW9B,KAAK+F,SAAS9D,YACvBjC,KAAK+F,QACd,CACA/D,WAAAA,GACE,OAAKhC,KAAK+F,SAGH/F,KAAK+F,SAFH/F,KAAK4D,oBAGhB,CACA,oBAAMC,GACJ,MAAM/B,QAAiB9B,KAAKyB,cAC5BK,EAASmE,GAAG,kBAAmBjG,KAAKsC,mBACpCR,EAASmE,GAAG,eAAgBjG,KAAK0C,gBACjCZ,EAASmE,GAAG,aAAcjG,KAAK6C,aACjC,CACA,iBAAMqD,CAAYxF,GAChB,MAAMR,EAAQF,KAAKJ,OAAO+F,MAAKC,GAAKA,EAAElF,UAAYA,IAClD,IAAKR,EACH,MAAM,IAAIyD,MAAM,mBAOlB,OALI3D,KAAKgE,oBAAsBtD,GAC7BV,KAAK4D,mBAAmB,CACtBlD,YAGGR,CACT,E","sources":["../node_modules/@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/dist/WagmiConnector-2f14002d.browser.esm.js","../node_modules/@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/dist/normalizeChainId-1fb9aedf.browser.esm.js","../node_modules/@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/evm/connectors/magic/dist/thirdweb-dev-wallets-evm-connectors-magic.browser.esm.js"],"sourcesContent":["import { defaultChains } from '@thirdweb-dev/chains';\nimport EventEmitter from 'eventemitter3';\n\nclass WagmiConnector extends EventEmitter {\n  /** Unique connector id */\n\n  /** Connector name */\n\n  /** Chains connector supports */\n\n  /** Options to use with connector */\n\n  /** Whether connector is usable */\n\n  constructor(_ref) {\n    let {\n      chains = defaultChains,\n      options\n    } = _ref;\n    super();\n    this.chains = chains;\n    this.options = options;\n  }\n  getBlockExplorerUrls(chain) {\n    const explorers = chain.explorers?.map(x => x.url) ?? [];\n    return explorers.length > 0 ? explorers : undefined;\n  }\n  isChainUnsupported(chainId) {\n    return !this.chains.some(x => x.chainId === chainId);\n  }\n  updateChains(chains) {\n    this.chains = chains;\n  }\n}\n\nexport { WagmiConnector as W };\n","/**\n * @internal\n */\nfunction normalizeChainId(chainId) {\n  if (typeof chainId === \"string\") {\n    return Number.parseInt(chainId, chainId.trim().substring(0, 2) === \"0x\" ? 16 : 10);\n  }\n  if (typeof chainId === \"bigint\") {\n    return Number(chainId);\n  }\n  return chainId;\n}\n\nexport { normalizeChainId as n };\n","import { _ as _defineProperty } from '../../../../dist/defineProperty-350fc508.browser.esm.js';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-1fb9aedf.browser.esm.js';\nimport { ethers, utils } from 'ethers';\nimport { OAuthExtension } from '@magic-ext/oauth';\nimport { Magic } from 'magic-sdk';\nimport { W as WagmiConnector } from '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\nconst IS_SERVER = \"object\" === \"undefined\";\nclass MagicBaseConnector extends WagmiConnector {\n  constructor(config) {\n    super(config);\n    _defineProperty(this, \"id\", \"magic-link\");\n    _defineProperty(this, \"name\", \"Magic Link\");\n    _defineProperty(this, \"ready\", !IS_SERVER);\n    this.magicOptions = config.options;\n  }\n  async getAccount() {\n    const provider = new ethers.providers.Web3Provider(await this.getProvider()) // TODO: fix type mismatch\n    ;\n    const signer = provider.getSigner();\n    const account = await signer.getAddress();\n    if (account.startsWith(\"0x\")) {\n      return account;\n    }\n    return `0x${account}`;\n  }\n  async getProvider() {\n    if (this.provider) {\n      return this.provider;\n    }\n    const magic = this.getMagicSDK();\n    this.provider = magic.rpcProvider;\n    return this.provider;\n  }\n  async getSigner() {\n    const provider = new ethers.providers.Web3Provider(await this.getProvider()) // TODO: fix type mismatch\n    ;\n    const signer = await provider.getSigner();\n    return signer;\n  }\n  async isAuthorized() {\n    const magic = this.getMagicSDK();\n    try {\n      return await magic.user.isLoggedIn();\n    } catch (e) {\n      return false;\n    }\n  }\n  onAccountsChanged(accounts) {\n    if (accounts.length === 0) {\n      this.emit(\"disconnect\");\n    } else {\n      if (accounts[0]) {\n        this.emit(\"change\", {\n          account: utils.getAddress(accounts[0])\n        });\n      }\n    }\n  }\n  onChainChanged(chainId) {\n    const id = normalizeChainId(chainId);\n    const unsupported = this.isChainUnsupported(id);\n    this.emit(\"change\", {\n      chain: {\n        id,\n        unsupported\n      }\n    });\n  }\n  onDisconnect() {\n    this.emit(\"disconnect\");\n  }\n  async disconnect() {\n    const magic = this.getMagicSDK();\n    await magic.user.logout();\n  }\n}\nclass MagicAuthConnector extends MagicBaseConnector {\n  constructor(config) {\n    super(config);\n    this.magicSdkConfiguration = config.options.magicSdkConfiguration;\n    this._type = config.options.type;\n    this.oauthProviders = config.options.oauthOptions?.providers || [];\n    this.oauthRedirectURI = config.options.oauthOptions?.redirectURI;\n  }\n  async connect(options) {\n    if (!this.magicOptions.apiKey) {\n      throw new Error(\"Magic API Key is not provided.\");\n    }\n    try {\n      if (options.chainId) {\n        this.initializeMagicSDK({\n          chainId: options.chainId\n        });\n      }\n      const provider = await this.getProvider();\n      this.setupListeners();\n      this.emit(\"message\", {\n        type: \"connecting\"\n      });\n\n      // Check if there is a user logged in\n      const isAuthenticated = await this.isAuthorized();\n\n      // Check if we have a chainId, in case of error just assign 0 for legacy\n      let chainId;\n      try {\n        chainId = await this.getChainId();\n      } catch (e) {\n        chainId = 0;\n      }\n      this._connectedChainId = chainId;\n\n      // if there is a user logged in, return the user\n      if (isAuthenticated) {\n        return {\n          provider,\n          chain: {\n            id: chainId,\n            unsupported: false\n          },\n          account: await this.getAccount()\n        };\n      }\n      const magic = this.getMagicSDK();\n      if (this._type === \"connect\") {\n        if (\"email\" in options || \"phoneNumber\" in options) {\n          console.warn(\"Passing email or phoneNumber is not required for Magic Connect\");\n        }\n        await magic.wallet.connectWithUI();\n      } else {\n        // LOGIN WITH MAGIC LINK WITH OAUTH PROVIDER\n        if (\"oauthProvider\" in options) {\n          await magic.oauth.loginWithRedirect({\n            provider: options.oauthProvider,\n            redirectURI: this.oauthRedirectURI || window.location.href\n          });\n          await new Promise(res => {\n            // never resolve - to keep the app in \"connecting...\" state until the redirect happens\n            setTimeout(res, 10000); // timeout if takes if redirect doesn't happen for 10 seconds (will likely never happen)\n          });\n        }\n\n        // LOGIN WITH MAGIC LINK WITH EMAIL\n        else if (\"email\" in options) {\n          await magic.auth.loginWithMagicLink({\n            email: options.email,\n            showUI: true\n          });\n        }\n\n        // LOGIN WITH MAGIC LINK WITH PHONE NUMBER\n        else if (\"phoneNumber\" in options) {\n          await magic.auth.loginWithSMS({\n            phoneNumber: options.phoneNumber\n          });\n        }\n\n        // error\n        else {\n          throw new Error(\"Invalid options: Either provide and email, phoneNumber or oauthProvider when using Magic Auth\");\n        }\n      }\n      const signer = await this.getSigner();\n      let account = await signer.getAddress();\n      if (!account.startsWith(\"0x\")) {\n        account = `0x${account}`;\n      }\n      return {\n        account,\n        chain: {\n          id: chainId,\n          unsupported: false\n        },\n        provider\n      };\n\n      // throw new UserRejectedRequestError(\"User rejected request\");\n    } catch (error) {\n      console.error(error);\n      throw new Error(\"Something went wrong\");\n    }\n  }\n  async getChainId() {\n    const networkOptions = this.magicSdkConfiguration?.network;\n    if (typeof networkOptions === \"object\") {\n      const chainID = networkOptions.chainId;\n      if (chainID) {\n        return normalizeChainId(chainID);\n      }\n    }\n    throw new Error(\"Chain ID is not defined\");\n  }\n  initializeMagicSDK() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const options = {\n      ...this.magicSdkConfiguration,\n      extensions: [new OAuthExtension()]\n    };\n    if (chainId) {\n      const chain = this.chains.find(c => c.chainId === chainId);\n      if (chain) {\n        options.network = {\n          rpcUrl: chain.rpc[0] || \"\",\n          // TODO handle empty RPC array\n          chainId: chain.chainId\n        };\n      }\n    }\n    this.magicSDK = new Magic(this.magicOptions.apiKey, options);\n    this.provider = this.magicSDK.rpcProvider;\n    return this.magicSDK;\n  }\n  getMagicSDK() {\n    if (!this.magicSDK) {\n      return this.initializeMagicSDK();\n    }\n    return this.magicSDK;\n  }\n  async setupListeners() {\n    const provider = await this.getProvider();\n    provider.on(\"accountsChanged\", this.onAccountsChanged);\n    provider.on(\"chainChanged\", this.onChainChanged);\n    provider.on(\"disconnect\", this.onDisconnect);\n  }\n  async switchChain(chainId) {\n    const chain = this.chains.find(c => c.chainId === chainId);\n    if (!chain) {\n      throw new Error(\"Chain not found\");\n    }\n    if (this._connectedChainId !== chainId) {\n      this.initializeMagicSDK({\n        chainId\n      });\n    }\n    return chain;\n  }\n}\n\nexport { MagicAuthConnector, MagicBaseConnector };\n"],"names":["WagmiConnector","EventEmitter","constructor","_ref","chains","defaultChains","options","super","this","getBlockExplorerUrls","chain","explorers","map","x","url","length","undefined","isChainUnsupported","chainId","some","updateChains","normalizeChainId","Number","parseInt","trim","substring","MagicBaseConnector","config","_defineProperty","magicOptions","getAccount","signer","ethers","getProvider","getSigner","account","getAddress","startsWith","provider","magic","getMagicSDK","rpcProvider","isAuthorized","user","isLoggedIn","e","onAccountsChanged","accounts","emit","utils","onChainChanged","id","unsupported","onDisconnect","disconnect","logout","MagicAuthConnector","magicSdkConfiguration","_type","type","oauthProviders","oauthOptions","providers","oauthRedirectURI","redirectURI","connect","apiKey","Error","initializeMagicSDK","setupListeners","isAuthenticated","getChainId","_connectedChainId","console","warn","wallet","connectWithUI","oauth","loginWithRedirect","oauthProvider","window","location","href","Promise","res","setTimeout","auth","loginWithMagicLink","email","showUI","loginWithSMS","phoneNumber","error","networkOptions","network","chainID","arguments","extensions","OAuthExtension","find","c","rpcUrl","rpc","magicSDK","Magic","on","switchChain"],"sourceRoot":""}