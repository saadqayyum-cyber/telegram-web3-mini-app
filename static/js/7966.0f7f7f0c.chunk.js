"use strict";(self.webpackChunkmango=self.webpackChunkmango||[]).push([[7966],{39162:(t,e,a)=>{a.d(e,{D:()=>g,H:()=>y,g:()=>l,h:()=>m,r:()=>u});var i=a(3678),r=a(89106),n=a(19547),s=a(50992),o=a(2776),c=a(54612),h=a(80777),d=a(95037),p=a(26679);async function m(t){const e=await i.resolveProperties(t);return Object.keys(e).map((t=>{let a=e[t];return"string"===typeof a&&a.startsWith("0x")||(a=r.hexValue(a)),[t,a]})).reduce(((t,e)=>{let[a,i]=e;return{...t,[a]:i}}),{})}async function l(t,e,a){const r=await i.resolveProperties(t),o={sender:r.sender,nonce:r.nonce,initCodeHash:n.keccak256(r.initCode),callDataHash:n.keccak256(r.callData),callGasLimit:r.callGasLimit,verificationGasLimit:r.verificationGasLimit,preVerificationGas:r.preVerificationGas,maxFeePerGas:r.maxFeePerGas,maxPriorityFeePerGas:r.maxPriorityFeePerGas,paymasterAndDataHash:n.keccak256(r.paymasterAndData)},c=s.D.encode([{components:[{type:"address",name:"sender"},{type:"uint256",name:"nonce"},{type:"bytes32",name:"initCodeHash"},{type:"bytes32",name:"callDataHash"},{type:"uint256",name:"callGasLimit"},{type:"uint256",name:"verificationGasLimit"},{type:"uint256",name:"preVerificationGas"},{type:"uint256",name:"maxFeePerGas"},{type:"uint256",name:"maxPriorityFeePerGas"},{type:"bytes32",name:"paymasterAndDataHash"}],name:"hashedUserOp",type:"tuple"}],[{...o}]),h=n.keccak256(c),d=s.D.encode(["bytes32","address","uint256"],[h,e,a]);return n.keccak256(d)}const u=()=>{let t=(()=>{const t=BigInt(Math.floor(4294967296*Math.random())),e=BigInt(Math.floor(4294967296*Math.random())),a=BigInt(Math.floor(4294967296*Math.random())),i=BigInt(Math.floor(4294967296*Math.random())),r=BigInt(Math.floor(4294967296*Math.random())),n=BigInt(Math.floor(4294967296*Math.random()));return t<<BigInt(160)|e<<BigInt(128)|a<<BigInt(96)|i<<BigInt(64)|r<<BigInt(32)|n})().toString(16);return t.length%2!==0&&(t="0"+t),t="0x"+t,o.gH.from(r.concat([t,"0x0000000000000000"]))},g=!1;class y{constructor(t,e,a,i,r){this.bundlerUrl=t,this.entryPointAddress=e,this.chainId=a;const n={};if((0,h.i)(this.bundlerUrl)){const t="undefined"!==typeof globalThis&&"APP_BUNDLE_ID"in globalThis?globalThis.APP_BUNDLE_ID:void 0;r?n["x-secret-key"]=r:i&&(n["x-client-id"]=i,t&&(n["x-bundle-id"]=t)),"undefined"!==typeof globalThis&&"TW_AUTH_TOKEN"in globalThis&&"string"===typeof globalThis.TW_AUTH_TOKEN&&(n.authorization=`Bearer ${globalThis.TW_AUTH_TOKEN}`),"undefined"!==typeof globalThis&&"TW_CLI_AUTH_TOKEN"in globalThis&&"string"===typeof globalThis.TW_CLI_AUTH_TOKEN&&(n.authorization=`Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`,n["x-authorize-wallet"]="true"),(0,d.s)(n)}this.userOpJsonRpcProvider=new c.B({url:this.bundlerUrl,headers:n},{name:"Connected bundler network",chainId:a}),this.initializing=this.validateChainId()}async validateChainId(){if(await(0,p.e)(this.chainId))return;const t=await this.userOpJsonRpcProvider.send("eth_chainId",[]),e=parseInt(t);if(e!==this.chainId)throw new Error(`bundler ${this.bundlerUrl} is on chainId ${e}, but provider is on chainId ${this.chainId}`)}async sendUserOpToBundler(t){await this.initializing;const e=await m(t),a=[e,this.entryPointAddress];return await this.printUserOperation("eth_sendUserOperation",a),await this.userOpJsonRpcProvider.send("eth_sendUserOperation",[e,this.entryPointAddress])}async estimateUserOpGas(t){await this.initializing;const e=await m(t),a=[e,this.entryPointAddress];await this.printUserOperation("eth_estimateUserOperationGas",a);const i=await this.userOpJsonRpcProvider.send("eth_estimateUserOperationGas",[e,this.entryPointAddress]);return{preVerificationGas:o.gH.from(i.preVerificationGas),verificationGas:o.gH.from(i.verificationGas),verificationGasLimit:o.gH.from(i.verificationGasLimit),callGasLimit:o.gH.from(i.callGasLimit).add(p.M)}}async getUserOperationGasPrice(){return await this.initializing,await this.userOpJsonRpcProvider.send("thirdweb_getUserOperationGasPrice",[])}async getUserOperationReceipt(t){return await this.initializing,await this.userOpJsonRpcProvider.send("eth_getUserOperationReceipt",[t])}async zkPaymasterData(t){return await this.initializing,await this.userOpJsonRpcProvider.send("zk_paymasterData",[await m({...t,gas:t.gasLimit})])}async zkBroadcastTransaction(t){return await this.initializing,await this.userOpJsonRpcProvider.send("zk_broadcastTransaction",[t])}async printUserOperation(t,e){}}},27966:(t,e,a)=>{a.d(e,{ZkSyncConnector:()=>P});var i=a(66898),r=a(60091),n=a(39162),s=a(26679),o=a(38298),c=a(2776),h=a(89106),d=a(27190),p=a(48987),m=a(86465),l=a(12220);a(64598),a(26419),a(84983);const u=5e4,g={Transaction:[{name:"txType",type:"uint256"},{name:"from",type:"uint256"},{name:"to",type:"uint256"},{name:"gasLimit",type:"uint256"},{name:"gasPerPubdataByteLimit",type:"uint256"},{name:"maxFeePerGas",type:"uint256"},{name:"maxPriorityFeePerGas",type:"uint256"},{name:"paymaster",type:"uint256"},{name:"nonce",type:"uint256"},{name:"value",type:"uint256"},{name:"data",type:"bytes"},{name:"factoryDeps",type:"bytes32[]"},{name:"paymasterInput",type:"bytes"}]};class y extends o.Signer{constructor(t,e){super(),this.signer=t,(0,l.defineReadOnly)(this,"provider",t.provider),this.httpRpcClient=e}async getAddress(){return await this.signer.getAddress()}async signMessage(t){return await this.signer.signMessage(t)}async signTransaction(t){return await this.signer.signTransaction(t)}connect(t){return new y(this.signer.connect(t),this.httpRpcClient)}_signTypedData(t,e,a){return this.signer._signTypedData(t,e,a)}async sendTransaction(t){return await this.sendZkSyncTransaction(t)}async sendZkSyncTransaction(t){let e=await this.populateTransaction(t);if(!e.chainId)throw new Error("ChainId is required to send a ZkSync transaction");if(!this.provider)throw new Error("Provider is required to send a ZkSync transaction");const a=await this.getAddress(),i=c.gH.from(e.gasLimit||await this.provider.estimateGas(e)).mul(3),r=c.gH.from(e.gasPrice||await this.provider.getGasPrice()).mul(2);e.maxFeePerGas?e.maxFeePerGas=e.maxFeePerGas.mul(2):e.maxFeePerGas=r,e.maxPriorityFeePerGas?e.maxPriorityFeePerGas=e.maxPriorityFeePerGas.mul(2):e.maxPriorityFeePerGas=r,e={...e,from:a,gasLimit:i,gasPrice:r,chainId:(await this.provider.getNetwork()).chainId,nonce:await this.provider.getTransactionCount(a),type:113,value:BigInt(0)};const n=await(this.httpRpcClient?.zkPaymasterData(e));e.customData={gasPerPubdata:u,factoryDeps:[],paymasterParams:{paymaster:n.paymaster,paymasterInput:n.paymasterInput}};const s={txType:113,from:BigInt(e.from||await this.getAddress()).toString(),to:BigInt(e.to||"0x0").toString(),gasLimit:e.gasLimit?Number(e.gasLimit):0,gasPerPubdataByteLimit:u,maxFeePerGas:c.gH.from(e.maxFeePerGas).toNumber(),maxPriorityFeePerGas:c.gH.from(e.maxPriorityFeePerGas).toNumber(),paymaster:BigInt(n.paymaster).toString(),nonce:c.gH.from(e.nonce).toNumber(),value:c.gH.from(e.value).toNumber(),data:e.data||"0x",factoryDeps:[],paymasterInput:h.arrayify(n.paymasterInput)},o=await this._signTypedData({name:"zkSync",version:"2",chainId:e.chainId},g,s),d=this.serialize(e,o),p={from:e.from?.toString()||await this.getAddress(),to:e.to?.toString()||"",gas:e.gasLimit?.toString()||"",maxFeePerGas:e.maxFeePerGas?.toString()||"0",maxPriorityFeePerGas:e.maxPriorityFeePerGas?.toString()||"0",signedTransaction:d,paymaster:n.paymaster},m=(await(this.httpRpcClient?.zkBroadcastTransaction(p))).transactionHash;return await(this.provider?.getTransaction(m))}serialize(t,e){if(!t.customData&&113!==t.type)return d.serialize(t,e);if(!t.chainId)throw Error("Transaction chainId isn't set!");function a(t,e){const a=h.stripZeros(c.gH.from(t).toHexString());if(a.length>32)throw new Error(`Invalid length for ${e}!`);return a}if(!t.from)throw new Error("Explicitly providing `from` field is required for EIP712 transactions!");const i=t.from,r=t.customData??{},n=t.maxFeePerGas||t.gasPrice||0,s=t.maxPriorityFeePerGas||n,o=[a(t.nonce||0,"nonce"),a(s,"maxPriorityFeePerGas"),a(n,"maxFeePerGas"),a(t.gasLimit||0,"gasLimit"),t.to?p.getAddress(t.to):"0x",a(t.value||0,"value"),t.data||"0x"];if(e){const t=h.splitSignature(e);o.push(a(t.recoveryParam,"recoveryParam")),o.push(h.stripZeros(t.r)),o.push(h.stripZeros(t.s))}else o.push(a(t.chainId,"chainId")),o.push("0x"),o.push("0x");if(o.push(a(t.chainId,"chainId")),o.push(p.getAddress(i)),o.push(a(r.gasPerPubdata||u,"gasPerPubdata")),o.push((r.factoryDeps??[]).map((t=>h.hexlify(t)))),r.customSignature&&0===h.arrayify(r.customSignature).length)throw new Error("Empty signatures are not supported!");return o.push(r.customSignature||"0x"),r.paymasterParams?o.push([r.paymasterParams.paymaster,h.hexlify(r.paymasterParams.paymasterInput)]):o.push([]),h.hexConcat([[113],m.encode(o)])}}class P extends r.C{constructor(t){super(),(0,i._)(this,"chainId",1),this.config=t}async connect(t){if(this.personalWallet=t.personalWallet,this.chainId=await(await this.personalWallet.getSigner()).getChainId(),!await(0,s.e)(this.chainId))throw new Error("Invalid zksync chain id");const e=this.config.bundlerUrl||`https://${this.chainId}.bundler.thirdweb.com`,a=this.config.entryPointAddress||s.f;return this.httpRpcClient=new n.H(e,a,this.chainId,this.config.clientId,this.config.secretKey),this.getAddress()}disconnect(){throw new Error("Method not implemented.")}async getAddress(){return(await this.getSigner()).getAddress()}async getSigner(){if(!this.personalWallet)throw new Error("Wallet not connected");return new y(await this.personalWallet.getSigner(),this.httpRpcClient)}switchChain(t){throw new Error("Method not implemented.")}isConnected(){return Promise.resolve(!!this.personalWallet)}setupListeners(){throw new Error("Method not implemented.")}updateChains(t){throw new Error("Method not implemented.")}async getProvider(){if(!this.getSigner())throw new Error("Personal wallet not connected");const t=await this.getSigner();if(!t.provider)throw new Error("Provider not found");return t.provider}}}}]);
//# sourceMappingURL=7966.0f7f7f0c.chunk.js.map