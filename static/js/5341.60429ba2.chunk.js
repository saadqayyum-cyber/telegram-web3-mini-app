"use strict";(self.webpackChunkmango=self.webpackChunkmango||[]).push([[5341],{30695:(t,r,e)=>{e.d(r,{S:()=>o});var a=e(70592),n=e(3494),s=e(84058);class o{get chainId(){return this._chainId}constructor(t,r,e){this.contractWrapper=t,this.storage=r,this.erc721=new s.E(this.contractWrapper,this.storage,e),this._chainId=e}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async getAll(t){return this.erc721.getAll(t)}async getOwned(t,r){return t&&(t=await(0,a.aL)(t)),this.erc721.getOwned(t,r)}async getOwnedTokenIds(t){return t&&(t=await(0,a.aL)(t)),this.erc721.getOwnedTokenIds(t)}async totalSupply(){return this.erc721.totalCirculatingSupply()}async get(t){return this.erc721.get(t)}async ownerOf(t){return this.erc721.ownerOf(t)}async balanceOf(t){return this.erc721.balanceOf(t)}async balance(){return this.erc721.balance()}async isApproved(t,r){return this.erc721.isApproved(t,r)}transfer=(()=>(0,n.f)((async(t,r)=>this.erc721.transfer.prepare(t,r))))();setApprovalForAll=(()=>(0,n.f)((async(t,r)=>this.erc721.setApprovalForAll.prepare(t,r))))();setApprovalForToken=(()=>(0,n.f)((async(t,r)=>n.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approve",args:[await(0,a.aL)(t),r]}))))()}},95572:(t,r,e)=>{e.d(r,{h:()=>n});var a=e(70592);async function n(t,r,n){const s=t.getProvider(),o=(await Promise.resolve().then(e.t.bind(e,96337,19))).default,i=new a.cs(s,r,o,{},t.storage),c=await t.getSignerAddress(),d=t.address;return(await i.read("allowance",[c,d])).gte(n)}},78473:(t,r,e)=>{e.d(r,{a:()=>h,g:()=>w,h:()=>p,i:()=>d,m:()=>l,v:()=>u});var a=e(10974),n=e(2776),s=e(3404),o=e(26680),i=e(70592),c=e(33409);async function d(t,r,n,s,i){try{const d=(await e.e(4811).then(e.t.bind(e,94811,19))).default,p=new a.NZ(n,d,t),[u,l]=await Promise.all([p.supportsInterface(o.I),p.supportsInterface(o.a)]);if(u){const o=(await Promise.resolve().then(e.t.bind(e,57305,19))).default,d=new a.NZ(n,o,t);if(await d.isApprovedForAll(i,r))return!0;let p;try{p=await d.getApproved(s)}catch(c){}return p?.toLowerCase()===r.toLowerCase()}if(l){const s=(await Promise.resolve().then(e.t.bind(e,59355,19))).default,o=new a.NZ(n,s,t);return await o.isApprovedForAll(i,r)}return console.error("Contract does not implement ERC 1155 or ERC 721."),!1}catch(d){return console.error("Failed to check if token is approved",d),!1}}async function p(t,r,a,n,s){const c=(await e.e(4811).then(e.t.bind(e,94811,19))).default,d=new i.cs(t.getSignerOrProvider(),a,c,t.options,t.storage),[p,u]=await Promise.all([d.read("supportsInterface",[o.I]),d.read("supportsInterface",[o.a])]);if(p){const o=(await Promise.resolve().then(e.t.bind(e,57305,19))).default,c=new i.cs(t.getSignerOrProvider(),a,o,t.options,t.storage);if(!await c.read("isApprovedForAll",[s,r])){(await c.read("getApproved",[n])).toLowerCase()===r.toLowerCase()||await c.sendTransaction("setApprovalForAll",[r,!0])}}else{if(!u)throw Error("Contract must implement ERC 1155 or ERC 721.");{const n=(await Promise.resolve().then(e.t.bind(e,59355,19))).default,o=new i.cs(t.getSignerOrProvider(),a,n,t.options,t.storage);await o.read("isApprovedForAll",[s,r])||await o.sendTransaction("setApprovalForAll",[r,!0])}}}function u(t){if((0,s.A)(void 0!==t.assetContractAddress&&null!==t.assetContractAddress,"Asset contract address is required"),(0,s.A)(void 0!==t.buyoutPricePerToken&&null!==t.buyoutPricePerToken,"Buyout price is required"),(0,s.A)(void 0!==t.listingDurationInSeconds&&null!==t.listingDurationInSeconds,"Listing duration is required"),(0,s.A)(void 0!==t.startTimestamp&&null!==t.startTimestamp,"Start time is required"),(0,s.A)(void 0!==t.tokenId&&null!==t.tokenId,"Token ID is required"),(0,s.A)(void 0!==t.quantity&&null!==t.quantity,"Quantity is required"),"NewAuctionListing"===t.type)(0,s.A)(void 0!==t.reservePricePerToken&&null!==t.reservePricePerToken,"Reserve price is required")}async function l(t,r,e){return{quantity:e.quantityDesired,pricePerToken:e.pricePerToken,currencyContractAddress:e.currency,buyerAddress:e.offeror,quantityDesired:e.quantityWanted,currencyValue:await(0,c.a)(t,e.currency,e.quantityWanted.mul(e.pricePerToken)),listingId:r}}function h(t,r,e){if(e=n.gH.from(e),t=n.gH.from(t),r=n.gH.from(r),t.eq(n.gH.from(0)))return!1;return r.sub(t).mul(i.dE).div(t).gte(e)}async function w(t,r,e){const a=[];for(;r-t>o.D;)a.push(e(t,t+o.D-1)),t+=o.D;return a.push(e(t,r-1)),await Promise.all(a)}},25341:(t,r,e)=>{e.r(r),e.d(r,{Multiwrap:()=>g});var a=e(73594),n=e(33409),s=e(95572),o=e(4265),i=e(70592),c=e(78473),d=e(26680),p=e(3494),u=e(36859),l=e(74825),h=e(90755),w=e(30695);e(6373),e(40462),e(92377),e(122);class g extends w.S{static contractRoles=(()=>i.dI)();constructor(t,r,e){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},s=arguments.length>4?arguments[4]:void 0,o=arguments.length>5?arguments[5]:void 0;super(arguments.length>6&&void 0!==arguments[6]?arguments[6]:new i.cs(t,r,s,a,e),e,o),this.abi=i.bj.parse(s||[]),this.metadata=new u.C(this.contractWrapper,i.dJ,this.storage),this.app=new u.b(this.contractWrapper,this.metadata,this.storage),this.roles=new h.C(this.contractWrapper,g.contractRoles),this.encoder=new n.C(this.contractWrapper),this.estimator=new u.G(this.contractWrapper),this.events=new u.a(this.contractWrapper),this.royalties=new l.C(this.contractWrapper,this.metadata),this.owner=new l.a(this.contractWrapper)}async getWrappedContents(t){const r=await this.contractWrapper.read("getWrappedContents",[t]),e=[],s=[],o=[];for(const i of r)switch(i.tokenType){case 0:{const t=await(0,n.f)(this.contractWrapper.getProvider(),i.assetContract);e.push({contractAddress:i.assetContract,quantity:a.formatUnits(i.totalAmount,t.decimals)});break}case 1:s.push({contractAddress:i.assetContract,tokenId:i.tokenId});break;case 2:o.push({contractAddress:i.assetContract,tokenId:i.tokenId,quantity:i.totalAmount.toString()})}return{erc20Tokens:e,erc721Tokens:s,erc1155Tokens:o}}wrap=(()=>(0,p.f)((async(t,r,e)=>{const[a,n,s]=await Promise.all([(0,d.b)(r,this.storage),this.toTokenStructList(t),(0,i.aL)(e||await this.contractWrapper.getSignerAddress())]);return p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"wrap",args:[n,a,s],parse:t=>{const r=this.contractWrapper.parseLogs("TokensWrapped",t?.logs);if(0===r.length)throw new Error("TokensWrapped event not found");const e=r[0].args.tokenIdOfWrappedToken;return{id:e,receipt:t,data:()=>this.get(e)}}})})))();unwrap=(()=>(0,p.f)((async(t,r)=>{const e=await(0,i.aL)(r||await this.contractWrapper.getSignerAddress());return p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"unwrap",args:[t,e]})})))();async toTokenStructList(t){const r=[],e=this.contractWrapper.getProvider(),a=await this.contractWrapper.getSignerAddress();if(t.erc20Tokens)for(const n of t.erc20Tokens){const t=await(0,o.n)(e,n.quantity,n.contractAddress);if(!await(0,s.h)(this.contractWrapper,n.contractAddress,t))throw new Error(`ERC20 token with contract address "${n.contractAddress}" does not have enough allowance to transfer.\n\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\n\nawait sdk.getToken("${n.contractAddress}").setAllowance("${this.getAddress()}", ${n.quantity});\n\n`);r.push({assetContract:n.contractAddress,totalAmount:t,tokenId:0,tokenType:0})}if(t.erc721Tokens)for(const n of t.erc721Tokens){if(!await(0,c.i)(this.contractWrapper.getProvider(),this.getAddress(),n.contractAddress,n.tokenId,a))throw new Error(`ERC721 token "${n.tokenId}" with contract address "${n.contractAddress}" is not approved for transfer.\n\nYou can give approval the multiwrap contract to transfer this token by running:\n\nawait sdk.getNFTCollection("${n.contractAddress}").setApprovalForToken("${this.getAddress()}", ${n.tokenId});\n\n`);r.push({assetContract:n.contractAddress,totalAmount:0,tokenId:n.tokenId,tokenType:1})}if(t.erc1155Tokens)for(const n of t.erc1155Tokens){if(!await(0,c.i)(this.contractWrapper.getProvider(),this.getAddress(),n.contractAddress,n.tokenId,a))throw new Error(`ERC1155 token "${n.tokenId}" with contract address "${n.contractAddress}" is not approved for transfer.\n\nYou can give approval the multiwrap contract to transfer this token by running:\n\nawait sdk.getEdition("${n.contractAddress}").setApprovalForAll("${this.getAddress()}", true);\n\n`);r.push({assetContract:n.contractAddress,totalAmount:n.quantity,tokenId:n.tokenId,tokenType:2})}return r}async prepare(t,r,e){return p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:e})}async call(t,r,e){return this.contractWrapper.call(t,r,e)}}}}]);
//# sourceMappingURL=5341.60429ba2.chunk.js.map