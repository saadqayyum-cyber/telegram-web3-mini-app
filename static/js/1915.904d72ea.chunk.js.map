{"version":3,"file":"static/js/1915.904d72ea.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/dist/http-rpc-client-0a079e80.browser.esm.js","../node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.browser.esm.js"],"sourcesContent":["import { utils, BigNumber, providers } from 'ethers';\nimport { i as isTwUrl } from './url-a45219bd.browser.esm.js';\nimport { s as setAnalyticsHeaders } from './headers-733a8199.browser.esm.js';\nimport { e as isZkSyncChain, M as MANAGED_ACCOUNT_GAS_BUFFER } from './utils-f58e7acc.browser.esm.js';\n\nasync function hexlifyUserOp(\n// TODO: types\nop) {\n  const userOp = await utils.resolveProperties(op);\n  return Object.keys(userOp).map(key => {\n    let val = userOp[key];\n    if (typeof val !== \"string\" || !val.startsWith(\"0x\")) {\n      val = utils.hexValue(val);\n    }\n    return [key, val];\n  }).reduce((set, _ref) => {\n    let [k, v] = _ref;\n    return {\n      ...set,\n      [k]: v\n    };\n  }, {});\n}\n\n// v0.6 userOpHash calculation\nasync function getUserOpHashV06(userOp, entryPoint, chainId) {\n  const op = await utils.resolveProperties(userOp);\n  const hashedUserOp = {\n    sender: op.sender,\n    nonce: op.nonce,\n    initCodeHash: utils.keccak256(op.initCode),\n    callDataHash: utils.keccak256(op.callData),\n    callGasLimit: op.callGasLimit,\n    verificationGasLimit: op.verificationGasLimit,\n    preVerificationGas: op.preVerificationGas,\n    maxFeePerGas: op.maxFeePerGas,\n    maxPriorityFeePerGas: op.maxPriorityFeePerGas,\n    paymasterAndDataHash: utils.keccak256(op.paymasterAndData)\n  };\n  const userOpType = {\n    components: [{\n      type: \"address\",\n      name: \"sender\"\n    }, {\n      type: \"uint256\",\n      name: \"nonce\"\n    }, {\n      type: \"bytes32\",\n      name: \"initCodeHash\"\n    }, {\n      type: \"bytes32\",\n      name: \"callDataHash\"\n    }, {\n      type: \"uint256\",\n      name: \"callGasLimit\"\n    }, {\n      type: \"uint256\",\n      name: \"verificationGasLimit\"\n    }, {\n      type: \"uint256\",\n      name: \"preVerificationGas\"\n    }, {\n      type: \"uint256\",\n      name: \"maxFeePerGas\"\n    }, {\n      type: \"uint256\",\n      name: \"maxPriorityFeePerGas\"\n    }, {\n      type: \"bytes32\",\n      name: \"paymasterAndDataHash\"\n    }],\n    name: \"hashedUserOp\",\n    type: \"tuple\"\n  };\n  const encoded = utils.defaultAbiCoder.encode([userOpType], [{\n    ...hashedUserOp\n  }]);\n  // remove leading word (total length) and trailing word (zero-length signature)\n\n  const userOpHash = utils.keccak256(encoded);\n  const enc = utils.defaultAbiCoder.encode([\"bytes32\", \"address\", \"uint256\"], [userOpHash, entryPoint, chainId]);\n  return utils.keccak256(enc);\n}\nconst generateRandomUint192 = () => {\n  const rand1 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand2 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand3 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand4 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand5 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand6 = BigInt(Math.floor(Math.random() * 0x100000000));\n  return rand1 << BigInt(160) | rand2 << BigInt(128) | rand3 << BigInt(96) | rand4 << BigInt(64) | rand5 << BigInt(32) | rand6;\n};\nconst randomNonce = () => {\n  let hexString = generateRandomUint192().toString(16);\n  if (hexString.length % 2 !== 0) {\n    hexString = \"0\" + hexString;\n  }\n  hexString = \"0x\" + hexString;\n  return BigNumber.from(utils.concat([hexString, \"0x0000000000000000\"]));\n};\n\nconst DEBUG = false; // TODO set as public flag\n\nclass HttpRpcClient {\n  constructor(bundlerUrl, entryPointAddress, chainId, clientId, secretKey) {\n    this.bundlerUrl = bundlerUrl;\n    this.entryPointAddress = entryPointAddress;\n    this.chainId = chainId;\n    const headers = {};\n    if (isTwUrl(this.bundlerUrl)) {\n      const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n      if (secretKey) {\n        headers[\"x-secret-key\"] = secretKey;\n      } else if (clientId) {\n        headers[\"x-client-id\"] = clientId;\n        if (bundleId) {\n          headers[\"x-bundle-id\"] = bundleId;\n        }\n      }\n\n      // Dashboard token\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      setAnalyticsHeaders(headers);\n    }\n    this.userOpJsonRpcProvider = new providers.StaticJsonRpcProvider({\n      url: this.bundlerUrl,\n      headers\n    }, {\n      name: \"Connected bundler network\",\n      chainId\n    });\n    this.initializing = this.validateChainId();\n  }\n  async validateChainId() {\n    if (await isZkSyncChain(this.chainId)) {\n      return;\n    }\n    // validate chainId is in sync with expected chainid\n    const chain = await this.userOpJsonRpcProvider.send(\"eth_chainId\", []);\n    const bundlerChain = parseInt(chain);\n    if (bundlerChain !== this.chainId) {\n      throw new Error(`bundler ${this.bundlerUrl} is on chainId ${bundlerChain}, but provider is on chainId ${this.chainId}`);\n    }\n  }\n\n  /**\n   * send a UserOperation to the bundler\n   * @param userOp1 - The UserOperation to send\n   * @returns userOpHash the id of this operation, for getUserOperationTransaction\n   */\n  async sendUserOpToBundler(userOp1) {\n    await this.initializing;\n    const hexifiedUserOp = await hexlifyUserOp(userOp1);\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n    await this.printUserOperation(\"eth_sendUserOperation\", jsonRequestData);\n    return await this.userOpJsonRpcProvider.send(\"eth_sendUserOperation\", [hexifiedUserOp, this.entryPointAddress]);\n  }\n  async estimateUserOpGas(userOp) {\n    await this.initializing;\n    const hexifiedUserOp = await hexlifyUserOp(userOp);\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n    await this.printUserOperation(\"eth_estimateUserOperationGas\", jsonRequestData);\n    const data = await this.userOpJsonRpcProvider.send(\"eth_estimateUserOperationGas\", [hexifiedUserOp, this.entryPointAddress]);\n    // adds gas buffer to callGasLimit to account for ManagedAccountFactory delegate calls\n    return {\n      preVerificationGas: BigNumber.from(data.preVerificationGas),\n      verificationGas: BigNumber.from(data.verificationGas),\n      verificationGasLimit: BigNumber.from(data.verificationGasLimit),\n      callGasLimit: BigNumber.from(data.callGasLimit).add(MANAGED_ACCOUNT_GAS_BUFFER)\n    };\n  }\n  async getUserOperationGasPrice() {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"thirdweb_getUserOperationGasPrice\", []);\n  }\n  async getUserOperationReceipt(userOpHash) {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"eth_getUserOperationReceipt\", [userOpHash]);\n  }\n  async zkPaymasterData(transactionInput) {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"zk_paymasterData\", [await hexlifyUserOp({\n      ...transactionInput,\n      gas: transactionInput.gasLimit\n    })]);\n  }\n  async zkBroadcastTransaction(transactionInput) {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"zk_broadcastTransaction\", [transactionInput]);\n  }\n  async printUserOperation(method, _ref) {\n    {\n      return;\n    }\n  }\n}\n\nexport { DEBUG as D, HttpRpcClient as H, getUserOpHashV06 as g, hexlifyUserOp as h, randomNonce as r };\n","import { C as Connector } from '../../../../dist/connector-05689d68.browser.esm.js';\nimport { h as hexlifyUserOp, D as DEBUG, r as randomNonce, H as HttpRpcClient, g as getUserOpHashV06 } from '../../../../dist/http-rpc-client-0a079e80.browser.esm.js';\nimport { i as isTwUrl } from '../../../../dist/url-a45219bd.browser.esm.js';\nimport { s as setAnalyticsHeaders } from '../../../../dist/headers-733a8199.browser.esm.js';\nimport { EntryPoint__factory } from '@account-abstraction/contracts';\nimport { utils, Signer, ethers, providers, Contract, BigNumber, constants } from 'ethers';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-350fc508.browser.esm.js';\nimport { signTypedDataInternal, getDynamicFeeData, ThirdwebSDK, LOCAL_NODE_PKEY, getChainProvider, getGasPrice } from '@thirdweb-dev/sdk';\nimport { chainIdToThirdwebRpc } from '../../../wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js';\nimport { c as checkContractWalletSignature, A as ACCOUNT_CORE_ABI, f as ENTRYPOINT_ADDRESS, D as DEFAULT_FACTORY_ADDRESS } from '../../../../dist/utils-f58e7acc.browser.esm.js';\nimport { Celo, CeloAlfajoresTestnet, CeloBaklavaTestnet } from '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\n\n/**\n * an API to external a UserOperation with paymaster info\n */\nclass PaymasterAPI {}\n\nclass VerifyingPaymasterAPI extends PaymasterAPI {\n  constructor(paymasterUrl, entryPoint, clientId, secretKey) {\n    super();\n    this.paymasterUrl = paymasterUrl;\n    this.entryPoint = entryPoint;\n    this.clientId = clientId;\n    this.secretKey = secretKey;\n  }\n  async getPaymasterAndData(userOp) {\n    const headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    if (isTwUrl(this.paymasterUrl)) {\n      if (this.secretKey && this.clientId) {\n        throw new Error(\"Cannot use both secret key and client ID. Please use secretKey for server-side applications and clientId for client-side applications.\");\n      }\n      if (this.secretKey) {\n        headers[\"x-secret-key\"] = this.secretKey;\n      } else if (this.clientId) {\n        headers[\"x-client-id\"] = this.clientId;\n        const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n        if (bundleId) {\n          headers[\"x-bundle-id\"] = bundleId;\n        }\n      }\n\n      // Dashboard token.\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token.\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      setAnalyticsHeaders(headers);\n    }\n\n    // Ask the paymaster to sign the transaction and return a valid paymasterAndData value.\n    const response = await fetch(this.paymasterUrl, {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify({\n        jsonrpc: \"2.0\",\n        id: 1,\n        method: \"pm_sponsorUserOperation\",\n        params: [await hexlifyUserOp(userOp), this.entryPoint]\n      })\n    });\n    const res = await response.json();\n    if (!response.ok) {\n      const error = res.error || response.statusText;\n      const code = res.code || \"UNKNOWN\";\n      throw new Error(`Paymaster error: ${error}\nStatus: ${response.status}\nCode: ${code}`);\n    }\n    if (DEBUG) {\n      console.debug(\"Paymaster result:\", res);\n    }\n    if (res.result) {\n      // some paymasters return a string, some return an object with more data\n      if (typeof res.result === \"string\") {\n        return {\n          paymasterAndData: res.result\n        };\n      } else {\n        return res.result;\n      }\n    } else {\n      const error = res.error?.message || res.error || response.statusText || \"unknown error\";\n      throw new Error(`Paymaster error from ${this.paymasterUrl}: ${error}`);\n    }\n  }\n}\nconst getVerifyingPaymaster = (paymasterUrl, entryPoint, clientId, secretKey) => new VerifyingPaymasterAPI(paymasterUrl, entryPoint, clientId, secretKey);\n\n/**\n * This class encapsulates Ethers.js listener function and necessary UserOperation details to\n * discover a TransactionReceipt for the operation.\n *\n * TODO refactor this to a simple event listener on the entry point\n */\nclass UserOperationEventListener {\n  constructor(resolve, reject, entryPoint, sender, userOpHash, nonce, timeout) {\n    this.resolve = resolve;\n    this.reject = reject;\n    this.entryPoint = entryPoint;\n    this.sender = sender;\n    this.userOpHash = userOpHash;\n    this.nonce = nonce;\n    this.timeout = timeout;\n    _defineProperty(this, \"resolved\", false);\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.boundLisener = this.listenerCallback.bind(this);\n  }\n  start() {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    const filter = this.entryPoint.filters.UserOperationEvent(this.userOpHash);\n    // listener takes time... first query directly:\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    setTimeout(async () => {\n      const res = await this.entryPoint.queryFilter(filter, -10); // look at last 10 blocks\n      if (res.length > 0) {\n        void this.listenerCallback(res[0]);\n      } else {\n        this.entryPoint.once(filter, this.boundLisener);\n      }\n    }, 100);\n  }\n  stop() {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.entryPoint.off(\"UserOperationEvent\", this.boundLisener);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async listenerCallback() {\n    for (var _len = arguments.length, param = new Array(_len), _key = 0; _key < _len; _key++) {\n      param[_key] = arguments[_key];\n    }\n    // TODO clean this up..\n    // eslint-disable-next-line prefer-rest-params\n    const event = arguments[arguments.length - 1];\n    if (!event.args) {\n      console.error(\"got event without args\", event);\n      return;\n    }\n    // TODO: can this happen? we register to event by userOpHash..\n    if (event.args.userOpHash !== this.userOpHash) {\n      console.log(`== event with wrong userOpHash: sender/nonce: event.${event.args.sender}@${event.args.nonce.toString()}!= userOp.${this.sender}@${parseInt(this.nonce?.toString())}`);\n      return;\n    }\n    const transactionReceipt = await event.getTransactionReceipt();\n\n    // before returning the receipt, update the status from the event.\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (!event.args.success) {\n      await this.extractFailureReason(transactionReceipt);\n    }\n    this.stop();\n    this.resolve(transactionReceipt);\n    this.resolved = true;\n  }\n  async extractFailureReason(receipt) {\n    receipt.status = 0;\n    const revertReasonEvents = await this.entryPoint.queryFilter(this.entryPoint.filters.UserOperationRevertReason(this.userOpHash, this.sender), receipt.blockHash);\n    if (revertReasonEvents[0]) {\n      let message = revertReasonEvents[0].args.revertReason;\n      if (message.startsWith(\"0x08c379a0\")) {\n        // Error(string)\n        message = utils.defaultAbiCoder.decode([\"string\"], \"0x\" + message.substring(10)).toString();\n      }\n      this.reject(new Error(`UserOp failed with reason: ${message}`));\n    }\n  }\n}\n\nclass ERC4337EthersSigner extends Signer {\n  // TODO: we have 'erc4337provider', remove shared dependencies or avoid two-way reference\n  constructor(config, originalSigner, erc4337provider, httpRpcClient, smartAccountAPI) {\n    super();\n    utils.defineReadOnly(this, \"provider\", erc4337provider);\n    this.config = config;\n    this.originalSigner = originalSigner;\n    this.erc4337provider = erc4337provider;\n    this.httpRpcClient = httpRpcClient;\n    this.smartAccountAPI = smartAccountAPI;\n    this.approving = false;\n  }\n  // This one is called by Contract. It signs the request and passes in to Provider to be sent.\n  async sendTransaction(transaction, options) {\n    if (!this.approving) {\n      this.approving = true;\n      const tx = await this.smartAccountAPI.createApproveTx();\n      if (tx) {\n        await (await this.sendTransaction(tx)).wait();\n      }\n      this.approving = false;\n    }\n    const tx = await ethers.utils.resolveProperties(transaction);\n    await this.verifyAllNecessaryFields(tx);\n    const multidimensionalNonce = randomNonce();\n    const unsigned = await this.smartAccountAPI.createUnsignedUserOp(this.httpRpcClient, {\n      target: tx.to || \"\",\n      data: tx.data?.toString() || \"0x\",\n      value: tx.value,\n      gasLimit: tx.gasLimit,\n      nonce: multidimensionalNonce,\n      maxFeePerGas: tx.maxFeePerGas,\n      maxPriorityFeePerGas: tx.maxPriorityFeePerGas\n    }, options);\n    const userOperation = await this.smartAccountAPI.signUserOp(unsigned);\n    const transactionResponse = await this.erc4337provider.constructUserOpTransactionResponse(userOperation);\n    try {\n      await this.httpRpcClient.sendUserOpToBundler(userOperation);\n    } catch (error) {\n      throw this.unwrapError(error);\n    }\n    // TODO: handle errors - transaction that is \"rejected\" by bundler is _not likely_ to ever resolve its \"wait()\"\n    return transactionResponse;\n  }\n  unwrapError(errorIn) {\n    try {\n      let errorMsg = \"Unknown Error\";\n      if (errorIn.error) {\n        errorMsg = `The bundler has failed to include UserOperation in a batch: ${errorIn.error}`;\n      } else if (errorIn.body && typeof errorIn.body === \"string\") {\n        const errorBody = JSON.parse(errorIn.body);\n        const errorStatus = errorIn.status || \"UNKNOWN\";\n        const errorCode = errorBody?.code || \"UNKNOWN\";\n        let failedOpMessage = errorBody?.error?.message || errorBody?.error?.data || errorBody?.error || errorIn.reason;\n        if (failedOpMessage?.includes(\"FailedOp\")) {\n          let paymasterInfo = \"\";\n          // TODO: better error extraction methods will be needed\n          const matched = failedOpMessage.match(/FailedOp\\((.*)\\)/);\n          if (matched) {\n            const split = matched[1].split(\",\");\n            paymasterInfo = `(paymaster address: ${split[1]})`;\n            failedOpMessage = split[2];\n          }\n          errorMsg = `The bundler has failed to include UserOperation in a batch: ${failedOpMessage} ${paymasterInfo}`;\n        } else {\n          errorMsg = `RPC error: ${failedOpMessage}\nStatus: ${errorStatus}\nCode: ${errorCode}`;\n        }\n      }\n      const error = new Error(errorMsg);\n      error.stack = errorIn.stack;\n      return error;\n    } catch (error) {}\n    return errorIn;\n  }\n  async verifyAllNecessaryFields(transactionRequest) {\n    if (!transactionRequest.to) {\n      throw new Error(\"Missing call target\");\n    }\n    if (!transactionRequest.data && !transactionRequest.value) {\n      // TBD: banning no-op UserOps seems to make sense on provider level\n      throw new Error(\"Missing call data or value\");\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  connect(provider) {\n    throw new Error(\"changing providers is not supported\");\n  }\n  async getAddress() {\n    if (!this.address) {\n      this.address = await this.erc4337provider.getSenderAccountAddress();\n    }\n    return this.address;\n  }\n\n  /**\n   * Sign a message and return the signature\n   */\n  async signMessage(message) {\n    // Deploy smart wallet if needed\n    const isNotDeployed = await this.smartAccountAPI.checkAccountPhantom();\n    if (isNotDeployed) {\n      console.log(\"Account contract not deployed yet. Deploying account before signing message\");\n      const tx = await this.sendTransaction({\n        to: await this.getAddress(),\n        data: \"0x\"\n      });\n      await tx.wait();\n    }\n    const [chainId, address] = await Promise.all([this.getChainId(), this.getAddress()]);\n    const originalMsgHash = utils.hashMessage(message);\n    let factorySupports712;\n    let signature;\n    const rpcUrl = chainIdToThirdwebRpc(chainId, this.config.clientId);\n    const headers = {};\n    if (isTwUrl(rpcUrl)) {\n      const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n      if (this.config.secretKey) {\n        headers[\"x-secret-key\"] = this.config.secretKey;\n      } else if (this.config.clientId) {\n        headers[\"x-client-id\"] = this.config.clientId;\n        if (bundleId) {\n          headers[\"x-bundle-id\"] = bundleId;\n        }\n      }\n\n      // Dashboard token\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      setAnalyticsHeaders(headers);\n    }\n    try {\n      const provider = new providers.StaticJsonRpcProvider({\n        url: rpcUrl,\n        headers\n      }, chainId);\n      const walletContract = new Contract(address, [\"function getMessageHash(bytes32 _hash) public view returns (bytes32)\"], provider);\n      // if this fails it's a pre 712 factory\n      await walletContract.getMessageHash(originalMsgHash);\n      factorySupports712 = true;\n    } catch {\n      factorySupports712 = false;\n    }\n    if (factorySupports712) {\n      const result = await signTypedDataInternal(this, {\n        name: \"Account\",\n        version: \"1\",\n        chainId,\n        verifyingContract: address\n      }, {\n        AccountMessage: [{\n          name: \"message\",\n          type: \"bytes\"\n        }]\n      }, {\n        message: utils.defaultAbiCoder.encode([\"bytes32\"], [originalMsgHash])\n      });\n      signature = result.signature;\n    } else {\n      signature = await this.originalSigner.signMessage(message);\n    }\n    const isValid = await checkContractWalletSignature(message, signature, address, chainId, this.config.clientId, this.config.secretKey);\n    if (isValid) {\n      return signature;\n    } else {\n      throw new Error(\"Unable to verify signature on smart account, please make sure the smart account is deployed and the signature is valid.\");\n    }\n  }\n  async signTransaction(transaction, options) {\n    const tx = await ethers.utils.resolveProperties(transaction);\n    await this.verifyAllNecessaryFields(tx);\n    const multidimensionalNonce = randomNonce();\n    const unsigned = await this.smartAccountAPI.createUnsignedUserOp(this.httpRpcClient, {\n      target: tx.to || \"\",\n      data: tx.data?.toString() || \"0x\",\n      value: tx.value,\n      gasLimit: tx.gasLimit,\n      nonce: multidimensionalNonce\n    }, options);\n    const userOperation = await this.smartAccountAPI.signUserOp(unsigned);\n    const userOpString = JSON.stringify(await hexlifyUserOp(userOperation));\n    return userOpString;\n  }\n}\n\nclass ERC4337EthersProvider extends providers.BaseProvider {\n  constructor(chainId, config, originalSigner, originalProvider, httpRpcClient, entryPoint, smartAccountAPI) {\n    super({\n      name: \"ERC-4337 Custom Network\",\n      chainId\n    });\n    this.chainId = chainId;\n    this.config = config;\n    this.originalSigner = originalSigner;\n    this.originalProvider = originalProvider;\n    this.httpRpcClient = httpRpcClient;\n    this.entryPoint = entryPoint;\n    this.smartAccountAPI = smartAccountAPI;\n    this.signer = new ERC4337EthersSigner(config, originalSigner, this, httpRpcClient, smartAccountAPI);\n  }\n  getSigner() {\n    return this.signer;\n  }\n  async perform(method, params) {\n    if (method === \"sendTransaction\" || method === \"getTransactionReceipt\") {\n      // TODO: do we need 'perform' method to be available at all?\n      // there is nobody out there to use it for ERC-4337 methods yet, we have nothing to override in fact.\n      throw new Error(\"Should not get here. Investigate.\");\n    }\n    if (method === \"estimateGas\") {\n      // gas estimation does nothing at this layer, sendTransaction will do the gas estimation for the userOp\n      return BigNumber.from(500000);\n    }\n    return await this.originalProvider.perform(method, params);\n  }\n  async getTransaction(transactionHash) {\n    // TODO\n    return await super.getTransaction(transactionHash);\n  }\n  async getTransactionReceipt(transactionHash) {\n    const userOpHash = await transactionHash;\n    const sender = await this.getSenderAccountAddress();\n    return await new Promise((resolve, reject) => {\n      new UserOperationEventListener(resolve, reject, this.entryPoint, sender, userOpHash).start();\n    });\n  }\n  async getSenderAccountAddress() {\n    return await this.smartAccountAPI.getAccountAddress();\n  }\n  async waitForTransaction(transactionHash, confirmations, timeout) {\n    const sender = await this.getSenderAccountAddress();\n    return await new Promise((resolve, reject) => {\n      const listener = new UserOperationEventListener(resolve, reject, this.entryPoint, sender, transactionHash, undefined, timeout);\n      listener.start();\n    });\n  }\n\n  // fabricate a response in a format usable by ethers users...\n  async constructUserOpTransactionResponse(userOp1) {\n    const userOp = await utils.resolveProperties(userOp1);\n    const userOpHash = await this.smartAccountAPI.getUserOpHash(userOp);\n    return {\n      hash: userOpHash,\n      confirmations: 0,\n      from: userOp.sender,\n      nonce: 0,\n      // not the real nonce, but good enough for this purpose\n      gasLimit: BigNumber.from(userOp.callGasLimit),\n      // ??\n      value: BigNumber.from(0),\n      data: utils.hexValue(userOp.callData),\n      // should extract the actual called method from this \"execFromEntryPoint()\" call\n      chainId: this.chainId,\n      wait: async confirmations => {\n        const transactionReceipt = await this.smartAccountAPI.getUserOpReceipt(this.httpRpcClient, userOpHash);\n        if (userOp.initCode.length !== 0) {\n          // checking if the wallet has been deployed by the transaction; it must be if we are here\n          await this.smartAccountAPI.checkAccountPhantom();\n        }\n        return transactionReceipt;\n      }\n    };\n  }\n  async detectNetwork() {\n    return this.originalProvider.detectNetwork();\n  }\n}\n\n/**\n * wrap an existing provider to tunnel requests through Account Abstraction.\n * @param originalProvider - The normal provider\n * @param config - see {@link ClientConfig} for more info\n * @param originalSigner - use this signer as the owner. of this wallet. By default, use the provider's signer\n */\nfunction create4337Provider(config, accountApi, originalProvider, chainId) {\n  const entryPoint = EntryPoint__factory.connect(config.entryPointAddress, originalProvider);\n  const httpRpcClient = new HttpRpcClient(config.bundlerUrl, config.entryPointAddress, chainId, config.clientId, config.secretKey);\n  return new ERC4337EthersProvider(chainId, config, config.localSigner, originalProvider, httpRpcClient, entryPoint, accountApi);\n}\n\nconst DUMMY_SIGNATURE = \"0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c\";\n\n/**\n * Base class for all Smart Wallet ERC-4337 Clients to implement.\n * Subclass should inherit 5 methods to support a specific wallet contract:\n *\n * - getAccountInitCode - return the value to put into the \"initCode\" field, if the account is not yet deployed. should create the account instance using a factory contract.\n * - getNonce - return current account's nonce value\n * - encodeExecute - encode the call from entryPoint through our account to the target contract.\n * - signUserOpHash - sign the hash of a UserOp.\n *\n * The user can use the following APIs:\n * - createUnsignedUserOp - given \"target\" and \"calldata\", fill userOp to perform that operation from the account.\n * - createSignedUserOp - helper to call the above createUnsignedUserOp, and then extract the userOpHash and sign it\n */\nclass BaseAccountAPI {\n  // entryPoint connected to \"zero\" address. allowed to make static calls (e.g. to getSenderAddress)\n\n  /**\n   * base constructor.\n   * subclass SHOULD add parameters that define the owner (signer) of this wallet\n   */\n  constructor(params) {\n    _defineProperty(this, \"isPhantom\", true);\n    this.provider = params.provider;\n    this.entryPointAddress = params.entryPointAddress;\n    this.accountAddress = params.accountAddress;\n    this.paymasterAPI = params.paymasterAPI;\n    this.gasless = params.gasless;\n    this.erc20PaymasterAddress = params.erc20PaymasterAddress;\n    this.erc20TokenAddress = params.erc20TokenAddress;\n\n    // factory \"connect\" define the contract address. the contract \"connect\" defines the \"from\" address.\n    this.entryPointView = EntryPoint__factory.connect(params.entryPointAddress, params.provider).connect(ethers.constants.AddressZero);\n  }\n\n  /**\n   * return the value to put into the \"initCode\" field, if the contract is not yet deployed.\n   * this value holds the \"factory\" address, followed by this account's information\n   */\n\n  /**\n   * return current account's nonce.\n   */\n\n  /**\n   * encode the call from entryPoint through our account to the target contract.\n   * @param target - The target contract address\n   * @param value - The value to send to the target contract\n   * @param data - The calldata to send to the target contract\n   */\n\n  /**\n   * sign a userOp's hash (userOpHash).\n   * @param userOpHash - The hash to sign\n   */\n\n  /**\n   * calculate the account address even before it is deployed\n   */\n\n  /**\n   * check if the contract is already deployed.\n   */\n  async checkAccountPhantom() {\n    if (!this.isPhantom) {\n      // already deployed. no need to check anymore.\n      return this.isPhantom;\n    }\n    const senderAddressCode = await this.provider.getCode(this.getAccountAddress());\n    if (senderAddressCode.length > 2) {\n      this.isPhantom = false;\n    }\n    return this.isPhantom;\n  }\n  /**\n   * return initCode value to into the UserOp.\n   * (either deployment code, or empty hex if contract already deployed)\n   */\n  async getInitCode() {\n    if (await this.checkAccountPhantom()) {\n      return await this.getAccountInitCode();\n    }\n    return \"0x\";\n  }\n\n  /**\n   * return maximum gas used for verification.\n   * NOTE: createUnsignedUserOp will add to this value the cost of creation, if the contract is not yet created.\n   */\n  async getVerificationGasLimit() {\n    return 100000;\n  }\n\n  /**\n   * return userOpHash for signing.\n   * This value matches entryPoint.getUserOpHash (calculated off-chain, to avoid a view call)\n   * @param userOp - userOperation, (signature field ignored)\n   */\n  async getUserOpHash(userOp) {\n    const chainId = await this.provider.getNetwork().then(net => net.chainId);\n    return getUserOpHashV06(userOp, this.entryPointAddress, chainId);\n  }\n\n  /**\n   * return the account's address.\n   * this value is valid even before deploying the contract.\n   */\n  async getAccountAddress() {\n    if (!this.senderAddress) {\n      if (this.accountAddress) {\n        this.senderAddress = this.accountAddress;\n      } else {\n        this.senderAddress = await this.getCounterFactualAddress();\n      }\n    }\n    return this.senderAddress;\n  }\n  async estimateCreationGas(initCode) {\n    if (!initCode || initCode === \"0x\") {\n      return 0;\n    }\n    const deployerAddress = initCode.substring(0, 42);\n    const deployerCallData = \"0x\" + initCode.substring(42);\n    return await this.provider.estimateGas({\n      to: deployerAddress,\n      data: deployerCallData\n    });\n  }\n  async createUnsignedUserOp(httpRpcClient, info, options) {\n    let {\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    } = info;\n    // get fees from bundler if available\n    if (isTwUrl(httpRpcClient.bundlerUrl)) {\n      const bundlerFeeData = await httpRpcClient.getUserOperationGasPrice();\n      maxFeePerGas = BigNumber.from(bundlerFeeData.maxFeePerGas);\n      maxPriorityFeePerGas = BigNumber.from(bundlerFeeData.maxPriorityFeePerGas);\n    } else {\n      // if bundler is not available, try to get fees from the network if not passed explicitly\n      if (!maxFeePerGas || !maxPriorityFeePerGas) {\n        const feeData = await getDynamicFeeData(this.provider);\n        if (!maxPriorityFeePerGas) {\n          maxPriorityFeePerGas = feeData.maxPriorityFeePerGas ?? undefined;\n        }\n        if (!maxFeePerGas) {\n          maxFeePerGas = feeData.maxFeePerGas ?? undefined;\n          const network = await this.provider.getNetwork();\n          const chainId = network.chainId;\n          if (chainId === Celo.chainId || chainId === CeloAlfajoresTestnet.chainId || chainId === CeloBaklavaTestnet.chainId) {\n            maxPriorityFeePerGas = maxFeePerGas;\n          }\n        }\n      }\n    }\n    if (!maxFeePerGas || !maxPriorityFeePerGas) {\n      throw new Error(\"maxFeePerGas or maxPriorityFeePerGas could not be calculated, please pass them explicitely\");\n    }\n    const [sender, nonce] = await Promise.all([this.getAccountAddress(), info.nonce ? Promise.resolve(info.nonce) : this.getNonce()]);\n    const initCode = await this.getInitCode();\n    const value = parseNumber(info.value) ?? BigNumber.from(0);\n    const callData = options?.batchData ? info.data : await this.prepareExecute(info.target, value, info.data).then(async tx => {\n      if (!info.gasLimit) {\n        // estimate gas on the inner transactions to simulate\n        // bundler would not revert otherwise\n        await this.provider.estimateGas({\n          from: sender,\n          to: info.target,\n          data: info.data,\n          value: value\n        });\n      }\n      return tx.encode();\n    });\n    const partialOp = {\n      sender,\n      nonce,\n      initCode,\n      callData,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      callGasLimit: BigNumber.from(1000000),\n      verificationGasLimit: BigNumber.from(1000000),\n      preVerificationGas: BigNumber.from(1000000),\n      paymasterAndData: \"0x\",\n      signature: DUMMY_SIGNATURE\n    };\n\n    // paymaster data + maybe used for estimation as well\n    const gasless = options?.gasless !== undefined ? options.gasless : this.gasless;\n    const useErc20Paymaster = this.erc20PaymasterAddress && this.erc20TokenAddress && (await this.isAccountApproved());\n    if (useErc20Paymaster) {\n      partialOp.paymasterAndData = this.erc20PaymasterAddress;\n      let estimates;\n      try {\n        estimates = await httpRpcClient.estimateUserOpGas(partialOp);\n      } catch (error) {\n        throw this.unwrapBundlerError(error);\n      }\n      partialOp.callGasLimit = estimates.callGasLimit;\n      partialOp.verificationGasLimit = estimates.verificationGasLimit;\n      partialOp.preVerificationGas = estimates.preVerificationGas;\n    } else if (gasless) {\n      const paymasterResult = await this.paymasterAPI.getPaymasterAndData(partialOp);\n      const paymasterAndData = paymasterResult.paymasterAndData;\n      if (paymasterAndData && paymasterAndData !== \"0x\") {\n        partialOp.paymasterAndData = paymasterAndData;\n      }\n      // paymaster can have the gas limits in the response\n      if (paymasterResult.callGasLimit && paymasterResult.verificationGasLimit && paymasterResult.preVerificationGas) {\n        partialOp.callGasLimit = BigNumber.from(paymasterResult.callGasLimit);\n        partialOp.verificationGasLimit = BigNumber.from(paymasterResult.verificationGasLimit);\n        partialOp.preVerificationGas = BigNumber.from(paymasterResult.preVerificationGas);\n      } else {\n        // otherwise fallback to bundler for gas limits\n        let estimates;\n        try {\n          estimates = await httpRpcClient.estimateUserOpGas(partialOp);\n        } catch (error) {\n          throw this.unwrapBundlerError(error);\n        }\n        partialOp.callGasLimit = estimates.callGasLimit;\n        partialOp.verificationGasLimit = estimates.verificationGasLimit;\n        partialOp.preVerificationGas = estimates.preVerificationGas;\n        // need paymaster to re-sign after estimates\n        if (paymasterAndData && paymasterAndData !== \"0x\") {\n          const paymasterResult2 = await this.paymasterAPI.getPaymasterAndData(partialOp);\n          if (paymasterResult2.paymasterAndData && paymasterResult2.paymasterAndData !== \"0x\") {\n            partialOp.paymasterAndData = paymasterResult2.paymasterAndData;\n          }\n        }\n      }\n    } else {\n      // query bundler for gas limits\n      let estimates;\n      try {\n        estimates = await httpRpcClient.estimateUserOpGas(partialOp);\n      } catch (error) {\n        throw this.unwrapBundlerError(error);\n      }\n      partialOp.callGasLimit = estimates.callGasLimit;\n      partialOp.verificationGasLimit = estimates.verificationGasLimit;\n      partialOp.preVerificationGas = estimates.preVerificationGas;\n    }\n    return {\n      ...partialOp,\n      signature: \"\"\n    };\n  }\n\n  /**\n   * Sign the filled userOp.\n   * @param userOp - The UserOperation to sign (with signature field ignored)\n   */\n  async signUserOp(userOp) {\n    const userOpHash = await this.getUserOpHash(userOp);\n    const signature = await this.signUserOpHash(userOpHash);\n    return {\n      ...userOp,\n      signature\n    };\n  }\n\n  /**\n   * get the transaction that has this userOpHash mined, or throws if not found\n   * @param userOpHash - returned by sendUserOpToBundler (or by getUserOpHash..)\n   * @param timeout - stop waiting after this timeout\n   * @param interval - time to wait between polls.\n   * @returns The transaction receipt, or an error if timed out.\n   */\n  async getUserOpReceipt(httpRpcClient, userOpHash) {\n    let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 120000;\n    let interval = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1000;\n    const endtime = Date.now() + timeout;\n    while (Date.now() < endtime) {\n      const userOpReceipt = await httpRpcClient.getUserOperationReceipt(userOpHash);\n      if (userOpReceipt) {\n        // avoid desync with current provider state\n        return await this.provider.waitForTransaction(userOpReceipt.receipt.transactionHash);\n      }\n      await new Promise(resolve => setTimeout(resolve, interval));\n    }\n    throw new Error(\"Timeout waiting for userOp to be mined\");\n  }\n  unwrapBundlerError(error) {\n    const message = error?.error?.message || error.error || error.message || error;\n    return new Error(message);\n  }\n}\nfunction parseNumber(a) {\n  if (!a || a === \"\") {\n    return null;\n  }\n  return BigNumber.from(a.toString());\n}\n\nclass AccountAPI extends BaseAccountAPI {\n  constructor(params, originalProvider) {\n    super({\n      ...params,\n      provider: originalProvider\n    });\n    this.params = params;\n    // Technically dont need the signer here, but we need to encode/estimate gas with it so a signer is required\n    // We don't want to use the localSigner directly since it might be connected to another chain\n    // so we just use the public hardhat pkey instead\n    this.sdk = ThirdwebSDK.fromPrivateKey(LOCAL_NODE_PKEY, params.chain, {\n      clientId: params.clientId,\n      secretKey: params.secretKey,\n      // @ts-expect-error expected chain type error\n      supportedChains: typeof params.chain === \"object\" ? [params.chain] : undefined\n    });\n  }\n  async getChainId() {\n    return await this.provider.getNetwork().then(n => n.chainId);\n  }\n  async getAccountContract() {\n    if (!this.accountContract) {\n      if (this.params.accountInfo?.abi) {\n        this.accountContract = await this.sdk.getContract(await this.getAccountAddress(), this.params.accountInfo.abi);\n      } else {\n        this.accountContract = await this.sdk.getContract(await this.getAccountAddress(), ACCOUNT_CORE_ABI);\n      }\n    }\n    return this.accountContract;\n  }\n  async getAccountInitCode() {\n    const factory = await this.getFactoryContract();\n    const localSigner = await this.params.localSigner.getAddress();\n    const tx = await this.params.factoryInfo.createAccount(factory, localSigner);\n    return utils.hexConcat([factory.getAddress(), tx.encode()]);\n  }\n  async getFactoryContract() {\n    if (this.factoryContract) {\n      return this.factoryContract;\n    }\n    if (this.params.factoryInfo?.abi) {\n      this.factoryContract = await this.sdk.getContract(this.params.factoryAddress, this.params.factoryInfo.abi);\n    } else {\n      this.factoryContract = await this.sdk.getContract(this.params.factoryAddress);\n    }\n    return this.factoryContract;\n  }\n  async getCounterFactualAddress() {\n    if (this.params.accountAddress) {\n      return this.params.accountAddress;\n    }\n    const factory = await this.getFactoryContract();\n    const localSigner = await this.params.localSigner.getAddress();\n    return this.params.factoryInfo.getAccountAddress(factory, localSigner);\n  }\n  async getNonce() {\n    if (await this.checkAccountPhantom()) {\n      return BigNumber.from(0);\n    }\n    const accountContract = await this.getAccountContract();\n    return this.params.accountInfo.getNonce(accountContract);\n  }\n  async prepareExecute(target, value, data) {\n    const accountContract = await this.getAccountContract();\n    return this.params.accountInfo.execute(accountContract, target, value, data);\n  }\n  async prepareExecuteBatch(targets, values, datas) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.prepare(\"executeBatch\", [targets, values, datas]);\n  }\n  async signUserOpHash(userOpHash) {\n    return await this.params.localSigner.signMessage(utils.arrayify(userOpHash));\n  }\n  async isAcountDeployed() {\n    return !(await this.checkAccountPhantom());\n  }\n  async isAccountApproved() {\n    if (!this.params.erc20PaymasterAddress || !this.params.erc20TokenAddress) {\n      return true;\n    }\n    const swAddress = await this.getCounterFactualAddress();\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n    const erc20Token = await this.sdk.getContract(this.params.erc20TokenAddress, ERC20Abi);\n    const allowance = await erc20Token.call(\"allowance\", [swAddress, this.params.erc20PaymasterAddress]);\n    return allowance.gte(BigNumber.from(2).pow(96).sub(1));\n  }\n  async createApproveTx() {\n    if (await this.isAccountApproved()) {\n      return undefined;\n    }\n    const amountToApprove = BigNumber.from(2).pow(96).sub(1);\n    const ethersSigner = new ethers.Wallet(LOCAL_NODE_PKEY, this.provider);\n    const erc20Contract = new Contract(this.params.erc20TokenAddress, [\"function approve(address spender, uint256 amount) public returns (bool)\"], ethersSigner);\n    const tx = {\n      to: this.params.erc20TokenAddress,\n      from: await this.getAccountAddress(),\n      value: 0,\n      data: erc20Contract.interface.encodeFunctionData(\"approve\", [this.params.erc20PaymasterAddress, amountToApprove])\n    };\n    return tx;\n  }\n}\n\nclass SmartWalletConnector extends Connector {\n  constructor(config) {\n    super();\n    this.config = config;\n  }\n  async initialize(params) {\n    const config = this.config;\n    const originalProvider = getChainProvider(config.chain, {\n      clientId: config.clientId,\n      secretKey: config.secretKey\n    });\n    this.chainId = (await originalProvider.getNetwork()).chainId;\n    const bundlerUrl = this.config.bundlerUrl || `https://${this.chainId}.bundler.thirdweb.com`;\n    const paymasterUrl = this.config.paymasterUrl || `https://${this.chainId}.bundler.thirdweb.com`;\n    const entryPointAddress = config.entryPointAddress || ENTRYPOINT_ADDRESS;\n    const localSigner = await params.personalWallet.getSigner();\n    const providerConfig = {\n      chain: config.chain,\n      localSigner,\n      entryPointAddress,\n      bundlerUrl,\n      paymasterAPI: this.config.paymasterAPI ? this.config.paymasterAPI : getVerifyingPaymaster(paymasterUrl, entryPointAddress, this.config.clientId, this.config.secretKey),\n      gasless: config.gasless,\n      factoryAddress: config.factoryAddress || DEFAULT_FACTORY_ADDRESS,\n      accountAddress: params.accountAddress,\n      factoryInfo: {\n        createAccount: config.factoryInfo?.createAccount || this.defaultFactoryInfo().createAccount,\n        getAccountAddress: config.factoryInfo?.getAccountAddress || this.defaultFactoryInfo().getAccountAddress,\n        abi: config.factoryInfo?.abi\n      },\n      accountInfo: {\n        execute: config.accountInfo?.execute || this.defaultAccountInfo().execute,\n        getNonce: config.accountInfo?.getNonce || this.defaultAccountInfo().getNonce,\n        abi: config.accountInfo?.abi\n      },\n      clientId: config.clientId,\n      secretKey: config.secretKey,\n      erc20PaymasterAddress: config.erc20PaymasterAddress,\n      erc20TokenAddress: config.erc20TokenAddress\n    };\n    this.personalWallet = params.personalWallet;\n    const accountApi = new AccountAPI(providerConfig, originalProvider);\n    this.aaProvider = create4337Provider(providerConfig, accountApi, originalProvider, this.chainId);\n    this.accountApi = accountApi;\n  }\n  async connect(connectionArgs) {\n    await this.initialize(connectionArgs);\n    return await this.getAddress();\n  }\n  getProvider() {\n    if (!this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return Promise.resolve(this.aaProvider);\n  }\n  async getSigner() {\n    if (!this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return Promise.resolve(this.aaProvider.getSigner());\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    return signer.getAddress();\n  }\n  async isConnected() {\n    try {\n      const address = await this.getAddress();\n      return !!address;\n    } catch (e) {\n      return false;\n    }\n  }\n  async disconnect() {\n    this.personalWallet = undefined;\n    this.aaProvider = undefined;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    const currentChainId = (await provider.getNetwork()).chainId;\n    if (currentChainId !== chainId) {\n      // only throw if actually trying to switch chains\n      throw new Error(\"Not supported.\");\n    }\n  }\n  setupListeners() {\n    return Promise.resolve();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateChains(chains) {}\n\n  /**\n   * Check whether the connected signer can execute a given transaction using the smart wallet.\n   * @param transaction - The transaction to execute using the smart wallet.\n   * @returns whether the connected signer can execute the transaction using the smart wallet.\n   */\n  async hasPermissionToExecute(transaction) {\n    const accountContract = await this.getAccountContract();\n    const signer = await this.getSigner();\n    const signerAddress = await signer.getAddress();\n    const restrictions = (await accountContract.account.getAllSigners()).filter(item => ethers.utils.getAddress(item.signer) === ethers.utils.getAddress(signerAddress))[0]?.permissions;\n    if (!restrictions) {\n      return false;\n    }\n    return restrictions.approvedCallTargets.includes(transaction.getTarget());\n  }\n\n  /// PREPARED TRANSACTIONS\n\n  /**\n   * Send a single transaction without waiting for confirmations\n   * @param transaction - the transaction to send\n   * @param config - optional the transaction configuration\n   * @returns The awaitable transaction\n   */\n  async send(transaction, options) {\n    const signer = await this.getSigner();\n    return signer.sendTransaction({\n      to: transaction.getTarget(),\n      data: transaction.encode(),\n      value: await transaction.getValue()\n    }, options);\n  }\n\n  /**\n   * Execute a single transaction (waiting for confirmations)\n   * @param transaction - The transaction to execute\n   * @returns The transaction receipt\n   */\n  async execute(transaction, options) {\n    const tx = await this.send(transaction, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n  async sendBatch(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchTx(transactions);\n    return await signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: tx.encode(),\n      value: 0\n    }, {\n      ...options,\n      batchData\n    });\n  }\n\n  /**\n   * Execute multiple transactions in a single batch\n   * @param transactions - The transactions to execute\n   * @returns The transaction receipt\n   */\n  async executeBatch(transactions, options) {\n    const tx = await this.sendBatch(transactions, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /// RAW TRANSACTIONS\n\n  async sendRaw(transaction, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    return signer.sendTransaction(transaction, options);\n  }\n  async executeRaw(transaction, options) {\n    const tx = await this.sendRaw(transaction, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n  async sendBatchRaw(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const batch = await this.prepareBatchRaw(transactions);\n    return signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: batch.tx.encode(),\n      value: 0\n    }, {\n      ...options,\n      batchData: batch.batchData // batched tx flag\n    });\n  }\n  async executeBatchRaw(transactions, options) {\n    const tx = await this.sendBatchRaw(transactions, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /// ESTIMATION\n\n  async estimate(transaction, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return this.estimateTx({\n      target: transaction.getTarget(),\n      data: transaction.encode(),\n      value: await transaction.getValue(),\n      gasLimit: await transaction.getOverrides().gasLimit,\n      maxFeePerGas: await transaction.getOverrides().maxFeePerGas,\n      maxPriorityFeePerGas: await transaction.getOverrides().maxPriorityFeePerGas,\n      nonce: await transaction.getOverrides().nonce\n    }, options);\n  }\n  async estimateRaw(transaction, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const tx = await ethers.utils.resolveProperties(transaction);\n    return this.estimateTx({\n      target: tx.to || constants.AddressZero,\n      data: tx.data?.toString() || \"\",\n      value: tx.value || BigNumber.from(0),\n      gasLimit: tx.gasLimit,\n      maxFeePerGas: tx.maxFeePerGas,\n      maxPriorityFeePerGas: tx.maxPriorityFeePerGas,\n      nonce: tx.nonce\n    }, options);\n  }\n  async estimateBatch(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchTx(transactions);\n    return this.estimateTx({\n      target: tx.getTarget(),\n      data: tx.encode(),\n      value: await tx.getValue(),\n      gasLimit: await tx.getOverrides().gasLimit,\n      maxFeePerGas: await tx.getOverrides().maxFeePerGas,\n      maxPriorityFeePerGas: await tx.getOverrides().maxPriorityFeePerGas,\n      nonce: await tx.getOverrides().nonce\n    }, {\n      ...options,\n      batchData\n    });\n  }\n  async estimateBatchRaw(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchRaw(transactions);\n    return this.estimateTx({\n      target: tx.getTarget(),\n      data: tx.encode(),\n      value: await tx.getValue(),\n      gasLimit: await tx.getOverrides().gasLimit,\n      maxFeePerGas: await tx.getOverrides().maxFeePerGas,\n      maxPriorityFeePerGas: await tx.getOverrides().maxPriorityFeePerGas,\n      nonce: await tx.getOverrides().nonce\n    }, {\n      ...options,\n      batchData\n    });\n  }\n\n  //// DEPLOYMENT\n\n  /**\n   * Manually deploy the smart wallet contract. If already deployed this will throw an error.\n   * Note that this is not necessary as the smart wallet will be deployed automatically on the first transaction the user makes.\n   * @returns The transaction receipt\n   */\n  async deploy(options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const tx = await signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: \"0x\"\n    }, {\n      ...options,\n      batchData: {\n        targets: [],\n        data: [],\n        values: []\n      } // batched tx flag to avoid hitting the Router fallback method\n    });\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /**\n   * Check if the smart wallet contract is deployed\n   * @returns true if the smart wallet contract is deployed\n   */\n  async isDeployed() {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return await this.accountApi.isAcountDeployed();\n  }\n  async deployIfNeeded(options) {\n    const isDeployed = await this.isDeployed();\n    if (!isDeployed) {\n      await this.deploy(options);\n    }\n  }\n\n  //// PERMISSIONS\n\n  async grantPermissions(target, permissions) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.grantPermissions(target, permissions);\n  }\n  async revokePermissions(target) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.revokeAccess(target);\n  }\n  async addAdmin(target) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.grantAdminPermissions(target);\n  }\n  async removeAdmin(target) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.revokeAdminPermissions(target);\n  }\n  async getAllActiveSigners() {\n    const isDeployed = await this.isDeployed();\n    if (isDeployed) {\n      const accountContract = await this.getAccountContract();\n      return accountContract.account.getAllAdminsAndSigners();\n    } else {\n      const personalWallet = await this.personalWallet?.getSigner();\n      if (!personalWallet) {\n        throw new Error(\"Personal wallet not connected\");\n      }\n      return [{\n        isAdmin: true,\n        signer: await personalWallet.getAddress(),\n        permissions: {\n          startDate: new Date(0),\n          expirationDate: new Date(0),\n          nativeTokenLimitPerTransaction: BigNumber.from(0),\n          approvedCallTargets: []\n        }\n      }];\n    }\n  }\n\n  /**\n   * Get the underlying account contract of the smart wallet.\n   * @returns The account contract of the smart wallet.\n   */\n  async getAccountContract() {\n    // getting a new instance everytime\n    // to avoid caching issues pre/post deployment\n    const sdk = ThirdwebSDK.fromSigner(await this.getSigner(), this.config.chain, {\n      clientId: this.config.clientId,\n      secretKey: this.config.secretKey\n    });\n    if (this.config.accountInfo?.abi) {\n      return sdk.getContract(await this.getAddress(), this.config.accountInfo.abi);\n    } else {\n      return sdk.getContract(await this.getAddress(), ACCOUNT_CORE_ABI);\n    }\n  }\n\n  /**\n   * Get the underlying account factory contract of the smart wallet.\n   * @returns The account factory contract.\n   */\n  async getFactoryContract() {\n    if (!this.config.factoryAddress) {\n      throw new Error(\"Factory address not set!\");\n    }\n    const sdk = ThirdwebSDK.fromSigner(await this.getSigner(), this.config.chain, {\n      clientId: this.config.clientId,\n      secretKey: this.config.secretKey\n    });\n    if (this.config.factoryInfo?.abi) {\n      return sdk.getContract(this.config.factoryAddress, this.config.factoryInfo.abi);\n    }\n    return sdk.getContract(this.config.factoryAddress);\n  }\n  defaultFactoryInfo() {\n    return {\n      createAccount: async (factory, owner) => {\n        return factory.prepare(\"createAccount\", [owner, ethers.utils.toUtf8Bytes(\"\")]);\n      },\n      getAccountAddress: async (factory, owner) => {\n        return await factory.call(\"getAddress\", [owner, ethers.utils.toUtf8Bytes(\"\")]);\n      }\n    };\n  }\n  defaultAccountInfo() {\n    return {\n      execute: async (account, target, value, data) => {\n        return account.prepare(\"execute\", [target, value, data]);\n      },\n      getNonce: async account => {\n        return account.call(\"getNonce\", []);\n      }\n    };\n  }\n\n  /// PRIVATE METHODS\n\n  async estimateTx(tx, options) {\n    if (!this.accountApi || !this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    let deployGasLimit = BigNumber.from(0);\n    const [provider, isDeployed] = await Promise.all([this.getProvider(), this.isDeployed()]);\n    if (!isDeployed) {\n      deployGasLimit = await this.estimateDeploymentGasLimit();\n    }\n    const [userOp, gasPrice] = await Promise.all([this.accountApi.createUnsignedUserOp(this.aaProvider.httpRpcClient, tx, options), getGasPrice(provider)]);\n    const resolved = await utils.resolveProperties(userOp);\n    const transactionGasLimit = BigNumber.from(resolved.callGasLimit);\n    const transactionCost = transactionGasLimit.mul(gasPrice);\n    const deployCost = deployGasLimit.mul(gasPrice);\n    const totalCost = deployCost.add(transactionCost);\n    return {\n      ether: utils.formatEther(totalCost),\n      wei: totalCost,\n      details: {\n        deployGasLimit,\n        transactionGasLimit,\n        gasPrice,\n        transactionCost,\n        deployCost,\n        totalCost\n      }\n    };\n  }\n  async estimateDeploymentGasLimit() {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const initCode = await this.accountApi.getInitCode();\n    const [initGas, verificationGasLimit] = await Promise.all([this.accountApi.estimateCreationGas(initCode), this.accountApi.getVerificationGasLimit()]);\n    return BigNumber.from(verificationGasLimit).add(initGas);\n  }\n  async prepareBatchRaw(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const resolvedTxs = await Promise.all(transactions.map(transaction => ethers.utils.resolveProperties(transaction)));\n    const targets = resolvedTxs.map(tx => tx.to || constants.AddressZero);\n    const data = resolvedTxs.map(tx => tx.data || \"0x\");\n    const values = resolvedTxs.map(tx => tx.value || BigNumber.from(0));\n    return {\n      tx: await this.accountApi.prepareExecuteBatch(targets, values, data),\n      batchData: {\n        targets,\n        data,\n        values\n      }\n    };\n  }\n  async prepareBatchTx(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const targets = transactions.map(tx => tx.getTarget());\n    const data = transactions.map(tx => tx.encode());\n    const values = await Promise.all(transactions.map(tx => tx.getValue()));\n    return {\n      tx: await this.accountApi.prepareExecuteBatch(targets, values, data),\n      batchData: {\n        targets,\n        data,\n        values\n      }\n    };\n  }\n}\n\nexport { SmartWalletConnector };\n"],"names":["async","hexlifyUserOp","op","userOp","utils","Object","keys","map","key","val","startsWith","reduce","set","_ref","k","v","getUserOpHashV06","entryPoint","chainId","hashedUserOp","sender","nonce","initCodeHash","initCode","callDataHash","callData","callGasLimit","verificationGasLimit","preVerificationGas","maxFeePerGas","maxPriorityFeePerGas","paymasterAndDataHash","paymasterAndData","encoded","encode","components","type","name","userOpHash","enc","randomNonce","hexString","generateRandomUint192","rand1","BigInt","Math","floor","random","rand2","rand3","rand4","rand5","rand6","toString","length","BigNumber","from","DEBUG","HttpRpcClient","constructor","bundlerUrl","entryPointAddress","clientId","secretKey","this","headers","isTwUrl","bundleId","globalThis","APP_BUNDLE_ID","undefined","TW_AUTH_TOKEN","TW_CLI_AUTH_TOKEN","setAnalyticsHeaders","userOpJsonRpcProvider","providers","url","initializing","validateChainId","isZkSyncChain","chain","send","bundlerChain","parseInt","Error","sendUserOpToBundler","userOp1","hexifiedUserOp","jsonRequestData","printUserOperation","estimateUserOpGas","data","verificationGas","add","MANAGED_ACCOUNT_GAS_BUFFER","getUserOperationGasPrice","getUserOperationReceipt","zkPaymasterData","transactionInput","gas","gasLimit","zkBroadcastTransaction","method","PaymasterAPI","VerifyingPaymasterAPI","paymasterUrl","super","getPaymasterAndData","response","fetch","body","JSON","stringify","jsonrpc","id","params","res","json","ok","error","statusText","code","status","console","debug","result","message","getVerifyingPaymaster","UserOperationEventListener","resolve","reject","timeout","_defineProperty","boundLisener","listenerCallback","bind","start","filter","filters","UserOperationEvent","setTimeout","queryFilter","once","stop","off","_len","arguments","param","Array","_key","event","args","log","transactionReceipt","getTransactionReceipt","success","extractFailureReason","resolved","receipt","revertReasonEvents","UserOperationRevertReason","blockHash","revertReason","decode","substring","ERC4337EthersSigner","Signer","config","originalSigner","erc4337provider","httpRpcClient","smartAccountAPI","approving","sendTransaction","transaction","options","tx","createApproveTx","wait","ethers","verifyAllNecessaryFields","multidimensionalNonce","unsigned","createUnsignedUserOp","target","to","value","userOperation","signUserOp","transactionResponse","constructUserOpTransactionResponse","unwrapError","errorIn","errorMsg","errorBody","parse","errorStatus","errorCode","failedOpMessage","reason","includes","paymasterInfo","matched","match","split","stack","transactionRequest","connect","provider","getAddress","address","getSenderAccountAddress","signMessage","checkAccountPhantom","Promise","all","getChainId","originalMsgHash","factorySupports712","signature","rpcUrl","chainIdToThirdwebRpc","walletContract","Contract","getMessageHash","signTypedDataInternal","version","verifyingContract","AccountMessage","checkContractWalletSignature","signTransaction","ERC4337EthersProvider","originalProvider","signer","getSigner","perform","getTransaction","transactionHash","getAccountAddress","waitForTransaction","confirmations","getUserOpHash","hash","getUserOpReceipt","detectNetwork","BaseAccountAPI","accountAddress","paymasterAPI","gasless","erc20PaymasterAddress","erc20TokenAddress","entryPointView","EntryPoint__factory","isPhantom","getCode","getInitCode","getAccountInitCode","getVerificationGasLimit","getNetwork","then","net","senderAddress","getCounterFactualAddress","estimateCreationGas","deployerAddress","deployerCallData","estimateGas","info","bundlerFeeData","feeData","getDynamicFeeData","Celo","CeloAlfajoresTestnet","CeloBaklavaTestnet","getNonce","a","parseNumber","batchData","prepareExecute","partialOp","isAccountApproved","estimates","unwrapBundlerError","paymasterResult","paymasterResult2","signUserOpHash","interval","endtime","Date","now","userOpReceipt","AccountAPI","sdk","ThirdwebSDK","fromPrivateKey","LOCAL_NODE_PKEY","supportedChains","n","getAccountContract","accountContract","accountInfo","abi","getContract","ACCOUNT_CORE_ABI","factory","getFactoryContract","localSigner","factoryInfo","createAccount","factoryContract","factoryAddress","execute","prepareExecuteBatch","targets","values","datas","prepare","isAcountDeployed","swAddress","ERC20Abi","default","erc20Token","call","gte","pow","sub","amountToApprove","ethersSigner","erc20Contract","interface","encodeFunctionData","SmartWalletConnector","Connector","initialize","getChainProvider","ENTRYPOINT_ADDRESS","personalWallet","providerConfig","DEFAULT_FACTORY_ADDRESS","defaultFactoryInfo","defaultAccountInfo","accountApi","aaProvider","create4337Provider","connectionArgs","getProvider","isConnected","e","disconnect","switchChain","setupListeners","updateChains","chains","hasPermissionToExecute","signerAddress","restrictions","account","getAllSigners","item","permissions","approvedCallTargets","getTarget","getValue","sendBatch","transactions","prepareBatchTx","executeBatch","sendRaw","executeRaw","sendBatchRaw","batch","prepareBatchRaw","executeBatchRaw","estimate","estimateTx","getOverrides","estimateRaw","constants","estimateBatch","estimateBatchRaw","deploy","isDeployed","deployIfNeeded","grantPermissions","revokePermissions","revokeAccess","addAdmin","grantAdminPermissions","removeAdmin","revokeAdminPermissions","getAllActiveSigners","getAllAdminsAndSigners","isAdmin","startDate","expirationDate","nativeTokenLimitPerTransaction","fromSigner","owner","deployGasLimit","estimateDeploymentGasLimit","gasPrice","getGasPrice","transactionGasLimit","transactionCost","mul","deployCost","totalCost","ether","wei","details","initGas","resolvedTxs"],"sourceRoot":""}