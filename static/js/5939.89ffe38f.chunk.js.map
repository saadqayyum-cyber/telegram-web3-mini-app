{"version":3,"file":"static/js/5939.89ffe38f.chunk.js","mappings":"8IAGA,MAAMA,UAAuBC,EAAAA,EAW3BC,WAAAA,CAAYC,GACV,IAAI,OACFC,EAASC,EAAAA,IAAa,QACtBC,GACEH,EACJI,QACAC,KAAKJ,OAASA,EACdI,KAAKF,QAAUA,CACjB,CACAG,oBAAAA,CAAqBC,GACnB,MAAMC,EAAYD,EAAMC,WAAWC,KAAIC,GAAKA,EAAEC,OAAQ,GACtD,OAAOH,EAAUI,OAAS,EAAIJ,OAAYK,CAC5C,CACAC,kBAAAA,CAAmBC,GACjB,OAAQV,KAAKJ,OAAOe,MAAKN,GAAKA,EAAEK,UAAYA,GAC9C,CACAE,YAAAA,CAAahB,GACXI,KAAKJ,OAASA,CAChB,E,0FC1BF,MAAMiB,UAAiBC,MACrBpB,WAAAA,CACAqB,EAASjB,GACP,MAAM,MACJkB,EAAK,KACLC,EAAI,KACJC,GACEpB,EACJ,IAAKqB,OAAOC,UAAUH,GACpB,MAAM,IAAIH,MAAM,8BAElB,IAAKC,GAA8B,kBAAZA,EACrB,MAAM,IAAID,MAAM,wCAElBf,MAAM,GAAGgB,aAAmBM,KAAKC,UAAUN,MAC3ChB,KAAKgB,MAAQA,EACbhB,KAAKiB,KAAOA,EACZjB,KAAKkB,KAAOA,CACd,EAQF,MAAMK,UAAyBV,EAK7BnB,WAAAA,CACAqB,EAASjB,GACP,MAAM,MACJkB,EAAK,KACLC,EAAI,KACJC,GACEpB,EACJ,KAAMqB,OAAOC,UAAUH,IAASA,GAAQ,KAAQA,GAAQ,MACtD,MAAM,IAAIH,MAAM,6DAElBf,MAAMgB,EAAS,CACbC,QACAC,OACAC,QAEJ,EAMF,MAAMM,UAAsBV,MAC1BpB,WAAAA,GACEK,SAAS0B,YACTC,EAAAA,EAAAA,GAAgB1B,KAAM,OAAQ,kBAC9B0B,EAAAA,EAAAA,GAAgB1B,KAAM,UAAW,qBACnC,EAMF,MAAM2B,UAAgCb,MACpCpB,WAAAA,CAAYC,GACV,IAAI,QACFe,EAAO,YACPkB,GACEjC,EACJI,MAAM,UAAUW,oCAA0CkB,QAC1DF,EAAAA,EAAAA,GAAgB1B,KAAM,OAAQ,qBAChC,EAEF,MAAM6B,UAA+Bf,MACnCpB,WAAAA,GACEK,SAAS0B,YACTC,EAAAA,EAAAA,GAAgB1B,KAAM,OAAQ,2BAC9B0B,EAAAA,EAAAA,GAAgB1B,KAAM,UAAW,sBACnC,EAEF,MAAM8B,UAAiCjB,EACrCnB,WAAAA,CAAYsB,GACVjB,MAAM,uBAAwB,CAC5BiB,QACAC,MAAO,SAETS,EAAAA,EAAAA,GAAgB1B,KAAM,OAAQ,sBAChC,EAKF,MAAM+B,UAAyBR,EAC7B7B,WAAAA,CAAYsB,GACVjB,MAAM,wBAAyB,CAC7BiB,QACAC,KAAM,QAERS,EAAAA,EAAAA,GAAgB1B,KAAM,OAAQ,mBAChC,EAKF,MAAMgC,UAAiCT,EACrC7B,WAAAA,CAAYsB,GACVjB,MAAM,wBAAyB,CAC7BiB,QACAC,KAAM,QAERS,EAAAA,EAAAA,GAAgB1B,KAAM,OAAQ,2BAChC,E,gBClHF,SAASiC,EAAiBvB,GACxB,MAAuB,kBAAZA,EACFS,OAAOe,SAASxB,EAA4C,OAAnCA,EAAQyB,OAAOC,UAAU,EAAG,GAAc,GAAK,IAE1D,kBAAZ1B,EACFS,OAAOT,GAETA,CACT,C,qGCAA,MAAM2B,UAAyBC,EAAAA,kBAC7B5C,WAAAA,CAAY6C,GACV,MAkBMzC,EAAU,IAlBO,CACrB0C,KAAM,UACNC,WAAAA,GACE,SAASC,EAASC,GAEhB,KADoBA,GAAUC,UAI9B,OAAOD,CACT,CACA,IAAIE,EAAAA,EAAAA,GAAqBC,WAAWC,QAClC,OAAID,WAAWC,OAAOJ,UAAUK,UACvBF,WAAWC,OAAOJ,SAASK,UAAUC,KAAKP,GAE5CA,EAASI,WAAWC,OAAOJ,SAEtC,MAIGJ,EAAIzC,SAETC,MAAM,CACJH,OAAQ2C,EAAI3C,OACZE,UACAoD,iBAAkBX,EAAIW,kBAE1B,E,iKCmDF,MAAMZ,UAA0B9C,EAAAA,EAC9BE,WAAAA,CAAY6C,GACV,MAQMzC,EAAU,IARO,CACrBqD,gBAAgB,EAChBV,YAAaA,KACX,IAAII,EAAAA,EAAAA,GAAqBC,WAAWC,QAClC,OAAOD,WAAWC,OAAOJ,QAC3B,MAKCJ,EAAIzC,SAETC,MAAM,CACJH,OAAQ2C,EAAI3C,OACZE,aAUF4B,EAAAA,EAAAA,GAAgB1B,KAAM,oBAAqB,4BAM3C0B,EAAAA,EAAAA,GAAgB1B,KAAM,qBAAqBoD,UACjB,IAApBC,EAAS9C,OACXP,KAAKsD,KAAK,cAEVtD,KAAKsD,KAAK,SAAU,CAClBC,QAASC,EAAAA,WAAiBH,EAAS,KAEvC,KAMF3B,EAAAA,EAAAA,GAAgB1B,KAAM,kBAAkBU,IACtC,MAAM+C,GAAKxB,EAAAA,EAAAA,GAAiBvB,GACtBgD,EAAc1D,KAAKS,mBAAmBgD,GAC5CzD,KAAKsD,KAAK,SAAU,CAClBpD,MAAO,CACLuD,KACAC,gBAEF,KAMJhC,EAAAA,EAAAA,GAAgB1B,KAAM,gBAAgBoD,UAIpC,GAAmB,OAAfO,EAAM1C,KAAe,CAEvB,SADuBjB,KAAKyC,cAE1B,IAEE,SAD2BzC,KAAK4D,aAE9B,MAEJ,CAAE,MACA,CAGN,CACA5D,KAAKsD,KAAK,cAGNtD,KAAKF,QAAQqD,sBACTnD,KAAKkD,iBAAiBW,WAAW7D,KAAK8D,kBAC9C,IAEF,MAAMC,EAAYjE,EAAQ2C,cAG1B,GAA4B,kBAAjB3C,EAAQ0C,KAEjBxC,KAAKwC,KAAO1C,EAAQ0C,UACf,GAAIuB,EAAW,CAEpB,MAAMC,EA5KZ,SAAyBrB,GACvB,IAAKA,EACH,MAAO,WAET,MAAMsB,EAAUC,GACVA,EAASC,YACJ,cAELD,EAASE,UACJ,UAELF,EAASG,cACJ,eAELH,EAASI,iBACJ,kBAELJ,EAASK,SACJ,SAELL,EAASM,QACJ,QAELN,EAASO,eACJ,gBAELP,EAASQ,aACJ,aAELR,EAASS,oBAAsBT,EAASU,uBACnC,eAELV,EAASW,QACJ,QAELX,EAASY,SACJ,eAELZ,EAASa,QACJ,QAELb,EAASc,cACJ,cAELd,EAASe,WACJ,WAELf,EAASgB,SAAWhB,EAASiB,cACxB,eAELjB,EAASkB,WACJ,WAELlB,EAAStB,UACJ,eADT,EAMF,GAAID,EAASK,WAAWzC,OAAQ,CAG9B,MAAM8E,EAAU,IAAIC,IACpB,IAAIC,EAAe,EACnB,IAAK,MAAMrB,KAAYvB,EAASK,UAAW,CACzC,IAAIR,EAAOyB,EAAQC,GACd1B,IACHA,EAAO,mBAAmB+C,IAC1BA,GAAgB,GAElBF,EAAQG,IAAIhD,EACd,CACA,MAAMiD,EAAQ,IAAIJ,GAClB,OAAII,EAAMlF,OACDkF,EAEFA,EAAM,IAAM,UACrB,CACA,OAAOxB,EAAQtB,IAAa,UAC9B,CA6F2B+C,CAAgB3B,GACjCjE,EAAQ0C,KACVxC,KAAKwC,KAAO1C,EAAQ0C,KAAKwB,GAGvBhE,KAAKwC,KADqB,kBAAjBwB,EACGA,EAEAA,EAAa,EAG/B,MAEEhE,KAAKwC,KAAO,WAEdxC,KAAKyD,GAAK,WACVzD,KAAK2F,QAAU5B,EACf/D,KAAKkD,iBAAmBX,EAAIW,gBAC9B,CAMA,aAAM0C,GACJ,IAAI9F,EAAU2B,UAAUlB,OAAS,QAAsBC,IAAjBiB,UAAU,GAAmBA,UAAU,GAAK,CAAC,EACnF,IACE,MAAMyC,QAAiBlE,KAAKyC,cAC5B,IAAKyB,EACH,MAAM,IAAIrC,EAAAA,EAEZ7B,KAAK6F,iBAGL7F,KAAKsD,KAAK,UAAW,CACnBwC,KAAM,eAIR,MAAMC,QAAyB7B,EAAS8B,QAAQ,CAC9CC,OAAQ,wBAIJC,EAAsB1C,EAAAA,WAAiBuC,EAAiB,IAG9D,IAAII,QAAyBnG,KAAKoG,aAG9BC,EAAgBrG,KAAKS,mBAAmB0F,GAG5C,GAAIrG,EAAQY,SAAWyF,IAAqBrG,EAAQY,QAElD,UACQV,KAAKsG,YAAYxG,EAAQY,SAE/ByF,EAAmBrG,EAAQY,QAC3B2F,EAAgBrG,KAAKS,mBAAmBX,EAAQY,QAClD,CAAE,MAAO6F,GACPC,QAAQ7C,MAAM,iCAAiC7D,EAAQY,UAAW6F,EACpE,CAIEvG,KAAKF,QAAQqD,sBAETnD,KAAKkD,iBAAiBuD,QAAQzG,KAAK8D,kBAAmB,QAE9D,MAAM4C,EAAiB,CACrBnD,QAAS2C,EACThG,MAAO,CACLuD,GAAI0C,EACJzC,YAAa2C,GAEfnC,YAGF,OADAlE,KAAKsD,KAAK,UAAWoD,GACdA,CACT,CAAE,MAAO/C,GACP,GAAI3D,KAAK2G,2BAA2BhD,GAClC,MAAM,IAAI3B,EAAAA,EAAyB2B,GAErC,IAAoB,QAAhBA,EAAM1C,KACR,MAAM,IAAIa,EAAAA,EAAyB6B,GAErC,MAAMA,CACR,CACF,CAKA,gBAAMiD,GAEJ,MAAM1C,QAAiBlE,KAAKyC,cACvByB,GAAU2C,iBAGf3C,EAAS2C,eAAe,kBAAmB7G,KAAK8G,mBAChD5C,EAAS2C,eAAe,eAAgB7G,KAAK+G,gBAC7C7C,EAAS2C,eAAe,aAAc7G,KAAKgH,cAGvChH,KAAKF,QAAQqD,sBAETnD,KAAKkD,iBAAiBW,WAAW7D,KAAK8D,mBAEhD,CAKA,gBAAMF,GACJ,MAAMM,QAAiBlE,KAAKyC,cAC5B,IAAKyB,EACH,MAAM,IAAIrC,EAAAA,EAEZ,MAAMwB,QAAiBa,EAAS8B,QAAQ,CACtCC,OAAQ,iBAKV,OAAOzC,EAAAA,WAAiBH,EAAS,GACnC,CAKA,gBAAM+C,GACJ,MAAMlC,QAAiBlE,KAAKyC,cAC5B,IAAKyB,EACH,MAAM,IAAIrC,EAAAA,EAEZ,OAAOqC,EAAS8B,QAAQ,CACtBC,OAAQ,gBACPgB,KAAKhF,EAAAA,EACV,CAKA,iBAAMQ,GACJ,MAAMyB,EAAWlE,KAAKF,QAAQ2C,cAK9B,OAJIyB,IACFlE,KAAK+D,UAAYG,GAGZlE,KAAK+D,SACd,CAKA,eAAMmD,GACJ,IAAI,QACFxG,GACEe,UAAUlB,OAAS,QAAsBC,IAAjBiB,UAAU,GAAmBA,UAAU,GAAK,CAAC,EACzE,MAAOyC,EAAUX,SAAiB4D,QAAQC,IAAI,CAACpH,KAAKyC,cAAezC,KAAK4D,eAGxE,OAAO,IAAIZ,EAAAA,EAAuBkB,EAAUxD,GAASwG,UAAU3D,EACjE,CAMA,kBAAM8D,GACJ,IAEE,GAAIrH,KAAKF,QAAQqD,iBAEhBmE,cAActH,KAAKkD,iBAAiBqE,QAAQvH,KAAK8D,oBAChD,OAAO,EAGT,UADuB9D,KAAKyC,cAE1B,MAAM,IAAIZ,EAAAA,EAIZ,cADsB7B,KAAK4D,YAE7B,CAAE,MAEA,OAAO,CACT,CACF,CAKA,iBAAM0C,CAAY5F,GAChB,MAAMwD,QAAiBlE,KAAKyC,cAC5B,IAAKyB,EACH,MAAM,IAAIrC,EAAAA,EAEZ,MAAM2F,EAAahE,EAAAA,SAAe9C,GAClC,UAEQwD,EAAS8B,QAAQ,CACrBC,OAAQ,6BACRwB,OAAQ,CAAC,CACP/G,QAAS8G,MAGb,MAAMtH,EAAQF,KAAKJ,OAAOqD,MAAKyE,GAAUA,EAAOhH,UAAYA,IAC5D,OAAIR,GAGG,CACLQ,QAASA,EACT8B,KAAM,SAASgF,IACfG,KAAM,GAAGH,IACTI,eAAgB,CACdpF,KAAM,QACNqF,SAAU,GACVC,OAAQ,OAEVC,IAAK,CAAC,IACN7H,MAAO,GACP8H,UAAW,GACXC,SAAS,EAEb,CAAE,MAAOtE,GAIP,MAAMzD,EAAQF,KAAKJ,OAAOqD,MAAKyE,GAAUA,EAAOhH,UAAYA,IAC5D,IAAKR,EACH,MAAM,IAAIyB,EAAAA,EAAwB,CAChCjB,UACAkB,YAAa5B,KAAKyD,KAKtB,GAAmB,OAAfE,EAAM1C,MAG2B,OAArC0C,GAAOzC,MAAMgH,eAAejH,KAC1B,IAaE,aAXMiD,EAAS8B,QAAQ,CACrBC,OAAQ,0BACRwB,OAAQ,CAAC,CACP/G,QAAS8G,EACTW,UAAWjI,EAAMsC,KACjBoF,eAAgB1H,EAAM0H,eACtBQ,SAASC,EAAAA,EAAAA,GAAqBnI,GAE9BoI,kBAAmBtI,KAAKC,qBAAqBC,OAG1CA,CACT,CAAE,MAAOqI,GAEP,GAAIvI,KAAK2G,2BAA2B4B,GAClC,MAAM,IAAIvG,EAAAA,EAAyB2B,GAIrC,MAAM,IAAInC,EAAAA,CACZ,CAEF,GAAIxB,KAAK2G,2BAA2BhD,GAClC,MAAM,IAAI3B,EAAAA,EAAyB2B,GAErC,MAAM,IAAI5B,EAAAA,EAAiB4B,EAC7B,CACF,CACA,oBAAMkC,GACJ,MAAM3B,QAAiBlE,KAAKyC,cACxByB,EAASsE,KACXtE,EAASsE,GAAG,kBAAmBxI,KAAK8G,mBACpC5C,EAASsE,GAAG,eAAgBxI,KAAK+G,gBACjC7C,EAASsE,GAAG,aAAcxI,KAAKgH,cAEnC,CACAL,0BAAAA,CAA2BhD,GACzB,OAAsB,OAAfA,EAAM1C,IACf,E","sources":["../node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/dist/WagmiConnector-2f14002d.browser.esm.js","../node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/dist/errors-9edc08c8.browser.esm.js","../node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/dist/normalizeChainId-1fb9aedf.browser.esm.js","../node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/evm/connectors/imtoken/dist/thirdweb-dev-wallets-evm-connectors-imtoken.browser.esm.js","../node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.browser.esm.js"],"sourcesContent":["import { defaultChains } from '@thirdweb-dev/chains';\nimport EventEmitter from 'eventemitter3';\n\nclass WagmiConnector extends EventEmitter {\n  /** Unique connector id */\n\n  /** Connector name */\n\n  /** Chains connector supports */\n\n  /** Options to use with connector */\n\n  /** Whether connector is usable */\n\n  constructor(_ref) {\n    let {\n      chains = defaultChains,\n      options\n    } = _ref;\n    super();\n    this.chains = chains;\n    this.options = options;\n  }\n  getBlockExplorerUrls(chain) {\n    const explorers = chain.explorers?.map(x => x.url) ?? [];\n    return explorers.length > 0 ? explorers : undefined;\n  }\n  isChainUnsupported(chainId) {\n    return !this.chains.some(x => x.chainId === chainId);\n  }\n  updateChains(chains) {\n    this.chains = chains;\n  }\n}\n\nexport { WagmiConnector as W };\n","import { _ as _defineProperty } from './defineProperty-350fc508.browser.esm.js';\n\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors per EIP-1474.\n * @see https://eips.ethereum.org/EIPS/eip-1474\n */\nclass RpcError extends Error {\n  constructor( /** Human-readable string */\n  message, options) {\n    const {\n      cause,\n      code,\n      data\n    } = options;\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error('\"message\" must be a nonempty string.');\n    }\n    super(`${message}. Cause: ${JSON.stringify(cause)}`);\n    this.cause = cause;\n    this.code = code;\n    this.data = data;\n  }\n}\n\n/**\n * @internal\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * @see https://eips.ethereum.org/EIPS/eip-1193\n */\nclass ProviderRpcError extends RpcError {\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   * `code` must be an integer in the `1000 <= 4999` range.\n   */\n  constructor( /** Human-readable string */\n  message, options) {\n    const {\n      cause,\n      code,\n      data\n    } = options;\n    if (!(Number.isInteger(code) && code >= 1000 && code <= 4999)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n    super(message, {\n      cause,\n      code,\n      data\n    });\n  }\n}\n\n/**\n * @internal\n */\nclass AddChainError extends Error {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"name\", \"AddChainError\");\n    _defineProperty(this, \"message\", \"Error adding chain\");\n  }\n}\n\n/**\n * @internal\n */\nclass ChainNotConfiguredError extends Error {\n  constructor(_ref) {\n    let {\n      chainId,\n      connectorId\n    } = _ref;\n    super(`Chain \"${chainId}\" not configured for connector \"${connectorId}\".`);\n    _defineProperty(this, \"name\", \"ChainNotConfigured\");\n  }\n}\nclass ConnectorNotFoundError extends Error {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"name\", \"ConnectorNotFoundError\");\n    _defineProperty(this, \"message\", \"Connector not found\");\n  }\n}\nclass ResourceUnavailableError extends RpcError {\n  constructor(cause) {\n    super(\"Resource unavailable\", {\n      cause,\n      code: -32002\n    });\n    _defineProperty(this, \"name\", \"ResourceUnavailable\");\n  }\n}\n/**\n * @internal\n */\nclass SwitchChainError extends ProviderRpcError {\n  constructor(cause) {\n    super(\"Error switching chain\", {\n      cause,\n      code: 4902\n    });\n    _defineProperty(this, \"name\", \"SwitchChainError\");\n  }\n}\n/**\n * @internal\n */\nclass UserRejectedRequestError extends ProviderRpcError {\n  constructor(cause) {\n    super(\"User rejected request\", {\n      cause,\n      code: 4001\n    });\n    _defineProperty(this, \"name\", \"UserRejectedRequestError\");\n  }\n}\n\n/**\n * @internal\n */\n// Ethers does not have an error type so we can use this for casting\n// https://github.com/ethers-io/ethers.js/blob/main/packages/logger/src.ts/index.ts#L268\n\nexport { AddChainError as A, ChainNotConfiguredError as C, ProviderRpcError as P, ResourceUnavailableError as R, SwitchChainError as S, UserRejectedRequestError as U, ConnectorNotFoundError as a };\n","/**\n * @internal\n */\nfunction normalizeChainId(chainId) {\n  if (typeof chainId === \"string\") {\n    return Number.parseInt(chainId, chainId.trim().substring(0, 2) === \"0x\" ? 16 : 10);\n  }\n  if (typeof chainId === \"bigint\") {\n    return Number(chainId);\n  }\n  return chainId;\n}\n\nexport { normalizeChainId as n };\n","import { InjectedConnector } from '../../injected/dist/thirdweb-dev-wallets-evm-connectors-injected.browser.esm.js';\nimport { a as assertWindowEthereum } from '../../../../dist/assertWindowEthereum-88295886.browser.esm.js';\nimport '../../../../dist/defineProperty-350fc508.browser.esm.js';\nimport '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\nimport '../../../../dist/errors-9edc08c8.browser.esm.js';\nimport '../../../../dist/url-a45219bd.browser.esm.js';\nimport 'ethers';\nimport '../../../../dist/normalizeChainId-1fb9aedf.browser.esm.js';\n\nclass ImTokenConnector extends InjectedConnector {\n  constructor(arg) {\n    const defaultOptions = {\n      name: \"imToken\",\n      getProvider() {\n        function getReady(ethereum) {\n          const isImToken = !!ethereum?.isImToken;\n          if (!isImToken) {\n            return;\n          }\n          return ethereum;\n        }\n        if (assertWindowEthereum(globalThis.window)) {\n          if (globalThis.window.ethereum?.providers) {\n            return globalThis.window.ethereum.providers.find(getReady);\n          }\n          return getReady(globalThis.window.ethereum);\n        }\n      }\n    };\n    const options = {\n      ...defaultOptions,\n      ...arg.options\n    };\n    super({\n      chains: arg.chains,\n      options,\n      connectorStorage: arg.connectorStorage\n    });\n  }\n}\n\nexport { ImTokenConnector };\n","import { _ as _defineProperty } from '../../../../dist/defineProperty-350fc508.browser.esm.js';\nimport { W as WagmiConnector } from '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\nimport { a as ConnectorNotFoundError, U as UserRejectedRequestError, R as ResourceUnavailableError, C as ChainNotConfiguredError, A as AddChainError, S as SwitchChainError } from '../../../../dist/errors-9edc08c8.browser.esm.js';\nimport { a as assertWindowEthereum } from '../../../../dist/assertWindowEthereum-88295886.browser.esm.js';\nimport { g as getValidPublicRPCUrl } from '../../../../dist/url-a45219bd.browser.esm.js';\nimport { utils, providers } from 'ethers';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-1fb9aedf.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\nfunction getInjectedName(ethereum) {\n  if (!ethereum) {\n    return \"Injected\";\n  }\n  const getName = provider => {\n    if (provider.isAvalanche) {\n      return \"Core Wallet\";\n    }\n    if (provider.isBitKeep) {\n      return \"BitKeep\";\n    }\n    if (provider.isBraveWallet) {\n      return \"Brave Wallet\";\n    }\n    if (provider.isCoinbaseWallet) {\n      return \"Coinbase Wallet\";\n    }\n    if (provider.isExodus) {\n      return \"Exodus\";\n    }\n    if (provider.isFrame) {\n      return \"Frame\";\n    }\n    if (provider.isKuCoinWallet) {\n      return \"KuCoin Wallet\";\n    }\n    if (provider.isMathWallet) {\n      return \"MathWallet\";\n    }\n    if (provider.isOneInchIOSWallet || provider.isOneInchAndroidWallet) {\n      return \"1inch Wallet\";\n    }\n    if (provider.isOpera) {\n      return \"Opera\";\n    }\n    if (provider.isPortal) {\n      return \"Ripio Portal\";\n    }\n    if (provider.isTally) {\n      return \"Tally\";\n    }\n    if (provider.isTokenPocket) {\n      return \"TokenPocket\";\n    }\n    if (provider.isTokenary) {\n      return \"Tokenary\";\n    }\n    if (provider.isTrust || provider.isTrustWallet) {\n      return \"Trust Wallet\";\n    }\n    if (provider.isMetaMask) {\n      return \"MetaMask\";\n    }\n    if (provider.isImToken) {\n      return \"imToken\";\n    }\n  };\n\n  // Some injected providers detect multiple other providers and create a list at `ethers.providers`\n  if (ethereum.providers?.length) {\n    // Deduplicate names using Set\n    // Coinbase Wallet puts multiple providers in `ethereum.providers`\n    const nameSet = new Set();\n    let unknownCount = 1;\n    for (const provider of ethereum.providers) {\n      let name = getName(provider);\n      if (!name) {\n        name = `Unknown Wallet #${unknownCount}`;\n        unknownCount += 1;\n      }\n      nameSet.add(name);\n    }\n    const names = [...nameSet];\n    if (names.length) {\n      return names;\n    }\n    return names[0] ?? \"Injected\";\n  }\n  return getName(ethereum) ?? \"Injected\";\n}\n\nclass InjectedConnector extends WagmiConnector {\n  constructor(arg) {\n    const defaultOptions = {\n      shimDisconnect: true,\n      getProvider: () => {\n        if (assertWindowEthereum(globalThis.window)) {\n          return globalThis.window.ethereum;\n        }\n      }\n    };\n    const options = {\n      ...defaultOptions,\n      ...arg.options\n    };\n    super({\n      chains: arg.chains,\n      options\n    });\n    /**\n     * Name of the injected connector\n     */\n    /**\n     * Whether the connector is ready to be used\n     *\n     * `true` if the injected provider is found\n     */\n    _defineProperty(this, \"shimDisconnectKey\", \"injected.shimDisconnect\");\n    /**\n     * handles the `accountsChanged` event from the provider\n     * * emits `change` event if connected to a different account\n     * * emits `disconnect` event if no accounts available\n     */\n    _defineProperty(this, \"onAccountsChanged\", async accounts => {\n      if (accounts.length === 0) {\n        this.emit(\"disconnect\");\n      } else {\n        this.emit(\"change\", {\n          account: utils.getAddress(accounts[0])\n        });\n      }\n    });\n    /**\n     * handles the `chainChanged` event from the provider\n     * * emits `change` event if connected to a different chain\n     */\n    _defineProperty(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    /**\n     * handles the `disconnect` event from the provider\n     * * emits `disconnect` event\n     */\n    _defineProperty(this, \"onDisconnect\", async error => {\n      // We need this as MetaMask can emit the \"disconnect\" event upon switching chains.\n      // If MetaMask emits a `code: 1013` error, wait for reconnection before disconnecting\n      // https://github.com/MetaMask/providers/pull/120\n      if (error.code === 1013) {\n        const provider = await this.getProvider();\n        if (provider) {\n          try {\n            const isAuthorized = await this.getAccount();\n            if (isAuthorized) {\n              return;\n            }\n          } catch {\n            // If we can't get the account anymore, continue with disconnect\n          }\n        }\n      }\n      this.emit(\"disconnect\");\n\n      // Remove `shimDisconnect` => it signals that wallet is disconnected\n      if (this.options.shimDisconnect) {\n        await this.connectorStorage.removeItem(this.shimDisconnectKey);\n      }\n    });\n    const _provider = options.getProvider();\n\n    // set the name of the connector\n    if (typeof options.name === \"string\") {\n      // if name is given, use that\n      this.name = options.name;\n    } else if (_provider) {\n      // if injected provider is detected, get name from it\n      const detectedName = getInjectedName(_provider);\n      if (options.name) {\n        this.name = options.name(detectedName);\n      } else {\n        if (typeof detectedName === \"string\") {\n          this.name = detectedName;\n        } else {\n          this.name = detectedName[0];\n        }\n      }\n    } else {\n      // else default to \"Injected\"\n      this.name = \"Injected\";\n    }\n    this.id = \"injected\";\n    this.ready = !!_provider;\n    this.connectorStorage = arg.connectorStorage;\n  }\n\n  /**\n   * * Connect to the injected provider\n   * * switch to the given chain if `chainId` is specified as an argument\n   */\n  async connect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      const provider = await this.getProvider();\n      if (!provider) {\n        throw new ConnectorNotFoundError();\n      }\n      this.setupListeners();\n\n      // emit \"connecting\" event\n      this.emit(\"message\", {\n        type: \"connecting\"\n      });\n\n      // request account addresses from injected provider\n      const accountAddresses = await provider.request({\n        method: \"eth_requestAccounts\"\n      });\n\n      // get the first account address\n      const firstAccountAddress = utils.getAddress(accountAddresses[0]);\n\n      // Switch to given chain if a chainId is specified\n      let connectedChainId = await this.getChainId();\n      // Check if currently connected chain is unsupported\n      // chainId is considered unsupported if chainId is not in the list of this.chains array\n      let isUnsupported = this.isChainUnsupported(connectedChainId);\n\n      // if chainId is specified and it is not the same as the currently connected chain\n      if (options.chainId && connectedChainId !== options.chainId) {\n        // switch to the given chain\n        try {\n          await this.switchChain(options.chainId);\n          // recalculate connectedChainId and isUnsupported\n          connectedChainId = options.chainId;\n          isUnsupported = this.isChainUnsupported(options.chainId);\n        } catch (e) {\n          console.error(`Could not switch to chain id: ${options.chainId}`, e);\n        }\n      }\n\n      // if shimDisconnect is enabled\n      if (this.options.shimDisconnect) {\n        // add the shim shimDisconnectKey => it signals that wallet is connected\n        await this.connectorStorage.setItem(this.shimDisconnectKey, \"true\");\n      }\n      const connectionInfo = {\n        account: firstAccountAddress,\n        chain: {\n          id: connectedChainId,\n          unsupported: isUnsupported\n        },\n        provider\n      };\n      this.emit(\"connect\", connectionInfo);\n      return connectionInfo;\n    } catch (error) {\n      if (this.isUserRejectedRequestError(error)) {\n        throw new UserRejectedRequestError(error);\n      }\n      if (error.code === -32002) {\n        throw new ResourceUnavailableError(error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * disconnect from the injected provider\n   */\n  async disconnect() {\n    // perform cleanup\n    const provider = await this.getProvider();\n    if (!provider?.removeListener) {\n      return;\n    }\n    provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n    provider.removeListener(\"chainChanged\", this.onChainChanged);\n    provider.removeListener(\"disconnect\", this.onDisconnect);\n\n    // if shimDisconnect is enabled\n    if (this.options.shimDisconnect) {\n      // Remove the shimDisconnectKey => it signals that wallet is disconnected\n      await this.connectorStorage.removeItem(this.shimDisconnectKey);\n    }\n  }\n\n  /**\n   * @returns The first account address from the injected provider\n   */\n  async getAccount() {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    const accounts = await provider.request({\n      method: \"eth_accounts\"\n    });\n\n    // return checksum address\n    // https://docs.ethers.org/v5/api/utils/address/#utils-getAddress\n    return utils.getAddress(accounts[0]);\n  }\n\n  /**\n   * @returns The `chainId` of the currently connected chain from injected provider normalized to a `number`\n   */\n  async getChainId() {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    return provider.request({\n      method: \"eth_chainId\"\n    }).then(normalizeChainId);\n  }\n\n  /**\n   * get the injected provider\n   */\n  async getProvider() {\n    const provider = this.options.getProvider();\n    if (provider) {\n      this._provider = provider;\n      // setting listeners\n    }\n    return this._provider;\n  }\n\n  /**\n   * get a `signer` for given `chainId`\n   */\n  async getSigner() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const [provider, account] = await Promise.all([this.getProvider(), this.getAccount()]);\n\n    // ethers.providers.Web3Provider\n    return new providers.Web3Provider(provider, chainId).getSigner(account);\n  }\n\n  /**\n   *\n   * @returns `true` if the connector is connected and address is available, else `false`\n   */\n  async isAuthorized() {\n    try {\n      // `false` if connector is disconnected\n      if (this.options.shimDisconnect &&\n      // If shim does not exist in storage, wallet is disconnected\n      !Boolean(await this.connectorStorage.getItem(this.shimDisconnectKey))) {\n        return false;\n      }\n      const provider = await this.getProvider();\n      if (!provider) {\n        throw new ConnectorNotFoundError();\n      }\n      // `false` if no account address available, else `true`\n      const account = await this.getAccount();\n      return !!account;\n    } catch {\n      // `false` if any error thrown\n      return false;\n    }\n  }\n\n  /**\n   * switch to given chain\n   */\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    const chainIdHex = utils.hexValue(chainId);\n    try {\n      // request provider to switch to given chainIdHex\n      await provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: chainIdHex\n        }]\n      });\n      const chain = this.chains.find(_chain => _chain.chainId === chainId);\n      if (chain) {\n        return chain;\n      }\n      return {\n        chainId: chainId,\n        name: `Chain ${chainIdHex}`,\n        slug: `${chainIdHex}`,\n        nativeCurrency: {\n          name: \"Ether\",\n          decimals: 18,\n          symbol: \"ETH\"\n        },\n        rpc: [\"\"],\n        chain: \"\",\n        shortName: \"\",\n        testnet: true\n      };\n    } catch (error) {\n      // if could not switch to given chainIdHex\n\n      // if tried to connect to a chain that is not configured\n      const chain = this.chains.find(_chain => _chain.chainId === chainId);\n      if (!chain) {\n        throw new ChainNotConfiguredError({\n          chainId,\n          connectorId: this.id\n        });\n      }\n\n      // if chain is not added to provider\n      if (error.code === 4902 ||\n      // Unwrapping for MetaMask Mobile\n      // https://github.com/MetaMask/metamask-mobile/issues/2944#issuecomment-976988719\n      error?.data?.originalError?.code === 4902) {\n        try {\n          // request provider to add chain\n          await provider.request({\n            method: \"wallet_addEthereumChain\",\n            params: [{\n              chainId: chainIdHex,\n              chainName: chain.name,\n              nativeCurrency: chain.nativeCurrency,\n              rpcUrls: getValidPublicRPCUrl(chain),\n              // no client id on purpose here\n              blockExplorerUrls: this.getBlockExplorerUrls(chain)\n            }]\n          });\n          return chain;\n        } catch (addError) {\n          // if user rejects request to add chain\n          if (this.isUserRejectedRequestError(addError)) {\n            throw new UserRejectedRequestError(error);\n          }\n\n          // else other error\n          throw new AddChainError();\n        }\n      }\n      if (this.isUserRejectedRequestError(error)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw new SwitchChainError(error);\n    }\n  }\n  async setupListeners() {\n    const provider = await this.getProvider();\n    if (provider.on) {\n      provider.on(\"accountsChanged\", this.onAccountsChanged);\n      provider.on(\"chainChanged\", this.onChainChanged);\n      provider.on(\"disconnect\", this.onDisconnect);\n    }\n  }\n  isUserRejectedRequestError(error) {\n    return error.code === 4001;\n  }\n}\n\nexport { InjectedConnector };\n"],"names":["WagmiConnector","EventEmitter","constructor","_ref","chains","defaultChains","options","super","this","getBlockExplorerUrls","chain","explorers","map","x","url","length","undefined","isChainUnsupported","chainId","some","updateChains","RpcError","Error","message","cause","code","data","Number","isInteger","JSON","stringify","ProviderRpcError","AddChainError","arguments","_defineProperty","ChainNotConfiguredError","connectorId","ConnectorNotFoundError","ResourceUnavailableError","SwitchChainError","UserRejectedRequestError","normalizeChainId","parseInt","trim","substring","ImTokenConnector","InjectedConnector","arg","name","getProvider","getReady","ethereum","isImToken","assertWindowEthereum","globalThis","window","providers","find","connectorStorage","shimDisconnect","async","accounts","emit","account","utils","id","unsupported","error","getAccount","removeItem","shimDisconnectKey","_provider","detectedName","getName","provider","isAvalanche","isBitKeep","isBraveWallet","isCoinbaseWallet","isExodus","isFrame","isKuCoinWallet","isMathWallet","isOneInchIOSWallet","isOneInchAndroidWallet","isOpera","isPortal","isTally","isTokenPocket","isTokenary","isTrust","isTrustWallet","isMetaMask","nameSet","Set","unknownCount","add","names","getInjectedName","ready","connect","setupListeners","type","accountAddresses","request","method","firstAccountAddress","connectedChainId","getChainId","isUnsupported","switchChain","e","console","setItem","connectionInfo","isUserRejectedRequestError","disconnect","removeListener","onAccountsChanged","onChainChanged","onDisconnect","then","getSigner","Promise","all","isAuthorized","Boolean","getItem","chainIdHex","params","_chain","slug","nativeCurrency","decimals","symbol","rpc","shortName","testnet","originalError","chainName","rpcUrls","getValidPublicRPCUrl","blockExplorerUrls","addError","on"],"sourceRoot":""}