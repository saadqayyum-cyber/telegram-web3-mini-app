{"version":3,"file":"static/js/3578.61bc5fe2.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/contract-interceptor-d7b164a7.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/contract-platform-fee-e756e68f.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/contract-sales-918c7cb8.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/erc-20-standard-1e9d9631.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/token-1e82c71a.browser.esm.js"],"sourcesContent":["/**\n * Allows overriding transaction behavior for this contract\n * @internal\n */\nclass ContractInterceptor {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * The next transaction executed will add/replace any overrides passed via the passed in hook.\n   * @remarks Overridden values will be applied to the next transaction executed.\n   * @example\n   * ```javascript\n   * contract.interceptor.overrideNextTransaction(() => ({\n   *   gasLimit: 3000000,\n   * }));\n   * ```\n   * @param hook - the hook to add or replace any CallOverrides (gas limit, gas price, nonce, from, value, etc...)\n   * @public\n   */\n  overrideNextTransaction(hook) {\n    this.contractWrapper.withTransactionOverride(hook);\n  }\n}\n\nexport { ContractInterceptor as C };\n","import { f as buildTransactionFunction, T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport { du as FEATURE_PLATFORM_FEE, bH as CommonPlatformFeeSchema } from './index-33cd3415.browser.esm.js';\n\n/**\n * Handle platform fees and recipients\n * @remarks Configure platform fees for a contract, which can be applied on certain paid transactions\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const feeInfo = await contract.platformFees.get();\n * await contract.platformFees.set({\n *   platform_fee_basis_points: 100, // 1% fee\n *   platform_fee_recipient: \"0x...\" // the fee recipient\n * })\n * ```\n * @public\n */\nclass ContractPlatformFee {\n  featureName = FEATURE_PLATFORM_FEE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the platform fee recipient and basis points\n   *\n   * @example\n   * ```javascript\n   * const feeInfo = await contract.platformFees.get();\n   * console.log(feeInfo.platform_fee_recipient);\n   * console.log(feeInfo.platform_fee_basis_points);\n   * ```\n   * @twfeature PlatformFee\n   */\n  async get() {\n    const [platformFeeRecipient, platformFeeBps] = await this.contractWrapper.read(\"getPlatformFeeInfo\", []);\n    return CommonPlatformFeeSchema.parseAsync({\n      platform_fee_recipient: platformFeeRecipient,\n      platform_fee_basis_points: platformFeeBps\n    });\n  }\n\n  /**\n   * Set the platform fee recipient and basis points\n   *\n   * @example\n   * ```javascript\n   * await contract.platformFees.set({\n   *   platform_fee_basis_points: 100, // 1% fee\n   *   platform_fee_recipient: \"0x...\" // the fee recipient\n   * })\n   * ```\n   *\n   * @param platformFeeInfo - the platform fee information\n   * @twfeature PlatformFee\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async platformFeeInfo => {\n    const parsed = await CommonPlatformFeeSchema.parseAsync(platformFeeInfo);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPlatformFeeInfo\",\n      args: [parsed.platform_fee_recipient, parsed.platform_fee_basis_points]\n    });\n  });\n}\n\nexport { ContractPlatformFee as C };\n","import { f as buildTransactionFunction, T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport { d7 as FEATURE_PRIMARY_SALE } from './index-33cd3415.browser.esm.js';\n\n/**\n * Handle primary sales recipients\n * @remarks Configure primary sale recipients for an entire contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const salesRecipient = await contract.sales.getRecipient();\n * await contract.sales.setRecipient(recipientWalletAddress);\n * ```\n * @public\n */\nclass ContractPrimarySale {\n  featureName = FEATURE_PRIMARY_SALE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the primary sale recipient\n   * @returns The wallet address.\n   * @example\n   * ```javascript\n   * const salesRecipient = await contract.sales.getRecipient();\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  async getRecipient() {\n    const result = await this.contractWrapper.read(\"primarySaleRecipient\", []);\n    return result;\n  }\n\n  /**\n   * Set the primary sale recipient\n   * @param recipient - the wallet address\n   * @example\n   * ```javascript\n   * await contract.sales.setRecipient(recipientWalletAddress);\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  setRecipient = /* @__PURE__ */buildTransactionFunction(async recipient => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPrimarySaleRecipient\",\n      args: [recipient]\n    });\n  });\n}\n\nexport { ContractPrimarySale as C };\n","import { f as buildTransactionFunction } from './transactions-72f9603c.browser.esm.js';\nimport { E as Erc20 } from './erc-20-9a18a51c.browser.esm.js';\n\n/**\n * Standard ERC20 Token functions\n * @remarks Basic functionality for a ERC20 contract that handles all unit transformation for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.token.transfer(walletAddress, amount);\n * ```\n * @public\n */\nclass StandardErc20 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc20 = new Erc20(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  /**\n   * @internal\n   */\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the token Metadata (name, symbol, etc...)\n   *\n   * @example\n   * ```javascript\n   * const token = await contract.get();\n   * ```\n   * @returns The token metadata\n   */\n  async get() {\n    return this.erc20.get();\n  }\n\n  /**\n   * Get Token Balance for the currently connected wallet\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * const balance = await contract.balance();\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   */\n  async balance() {\n    return await this.erc20.balance();\n  }\n\n  /**\n   * Get Token Balance\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   */\n  async balanceOf(address) {\n    return this.erc20.balanceOf(address);\n  }\n\n  /**\n   * The total supply for this token\n   * @remarks Get how much supply has been minted\n   * @example\n   * ```javascript\n   * const balance = await contract.totalSupply();\n   * ```\n   */\n  async totalSupply() {\n    return await this.erc20.totalSupply();\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of a 'spender' wallet over the connected wallet's funds - the allowance of a different address for a token is the amount of tokens that the `spender` wallet is allowed to spend on behalf of the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token allowance\n   * const spenderAddress = \"0x...\";\n   * const allowance = await contract.allowance(spenderAddress);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   */\n  async allowance(spender) {\n    return await this.erc20.allowance(spender);\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet who owns the funds\n   * const owner = \"{{wallet_address}}\";\n   * // Address of the wallet to check token allowance\n   * const spender = \"0x...\";\n   * const allowance = await contract.allowanceOf(owner, spender);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   */\n  async allowanceOf(owner, spender) {\n    return await this.erc20.allowanceOf(owner, spender);\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Transfer Tokens\n   *\n   * @remarks Transfer tokens from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The amount of tokens you want to send\n   * const amount = 0.1;\n   * await contract.transfer(toAddress, amount);\n   * ```\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction(async (to, amount) => {\n    return this.erc20.transfer.prepare(to, amount);\n  });\n\n  /**\n   * Transfer Tokens From Address\n   *\n   * @remarks Transfer tokens from one wallet to another\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const fromAddress = \"{{wallet_address}}\";\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The number of tokens you want to send\n   * const amount = 1.2\n   * // Note that the connected wallet must have approval to transfer the tokens of the fromAddress\n   * await contract.transferFrom(fromAddress, toAddress, amount);\n   * ```\n   */\n  transferFrom = /* @__PURE__ */buildTransactionFunction(async (from, to, amount) => {\n    return this.erc20.transferFrom.prepare(from, to, amount);\n  });\n\n  /**\n   * Allows the specified `spender` wallet to transfer the given `amount` of tokens to another wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to allow transfers from\n   * const spenderAddress = \"0x...\";\n   * // The number of tokens to give as allowance\n   * const amount = 100\n   * await contract.setAllowance(spenderAddress, amount);\n   * ```\n   */\n  setAllowance = /* @__PURE__ */buildTransactionFunction(async (spender, amount) => {\n    return this.erc20.setAllowance.prepare(spender, amount);\n  });\n\n  /**\n   * Transfer Tokens To Many Wallets\n   *\n   * @remarks Mint tokens from the connected wallet to many wallets\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 100, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 100,\n   *  }\n   * ]\n   *\n   * await contract.transferBatch(data);\n   * ```\n   */\n  transferBatch = /* @__PURE__ */buildTransactionFunction(async args => {\n    return this.erc20.transferBatch.prepare(args);\n  });\n}\n\nexport { StandardErc20 as S };\n","import { constants, BigNumber } from 'ethers';\nimport { dG as NFT_BASE_CONTRACT_ROLES, cs as ContractWrapper, bj as AbiSchema, cb as TokenErc20ContractSchema, aL as resolveAddress, H as getRoleHash } from './index-33cd3415.browser.esm.js';\nimport { f as buildTransactionFunction, T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport { C as ContractMetadata, b as ContractAppURI, a as ContractEvents, G as GasCostEstimator } from './contract-appuri-5c40af52.browser.esm.js';\nimport { a as fetchCurrencyValue, C as ContractEncoder } from './fetchCurrencyValue-32d08b05.browser.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\nimport { C as ContractPlatformFee } from './contract-platform-fee-e756e68f.browser.esm.js';\nimport { C as ContractRoles } from './contract-roles-71988d2e.browser.esm.js';\nimport { C as ContractPrimarySale } from './contract-sales-918c7cb8.browser.esm.js';\nimport { a as Erc20SignatureMintable } from './erc-20-9a18a51c.browser.esm.js';\nimport { S as StandardErc20 } from './erc-20-standard-1e9d9631.browser.esm.js';\nimport 'zod';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport '@thirdweb-dev/storage';\nimport './assertEnabled-d1700f0b.browser.esm.js';\nimport './drop-claim-conditions-e6f2abbf.browser.esm.js';\nimport 'fast-deep-equal';\nimport './signature-d3ea643d.browser.esm.js';\nimport './normalizePriceValue-9851c0eb.browser.esm.js';\nimport '@thirdweb-dev/merkletree';\nimport './setErc20Allowance-7f76f677.browser.esm.js';\nimport 'uuid';\n\n/**\n * Manages history for Token contracts\n * @public\n */\nclass TokenERC20History {\n  constructor(contractWrapper, events) {\n    this.contractWrapper = contractWrapper;\n    this.events = events;\n  }\n\n  /**\n   * Get all holder balances\n   *\n   * @remarks Lets you get all token holders and their corresponding balances\n   * @returns  A JSON object of all token holders and their corresponding balances\n   * @example\n   * ```javascript\n   * const allHolderBalances = await contract.history.getAllHolderBalances();\n   * ```\n   */\n  async getAllHolderBalances() {\n    const a = await this.events.getEvents(\"Transfer\");\n    const txns = a.map(b => b.data);\n    const balances = {};\n    txns.forEach(item => {\n      const from = item?.from;\n      const to = item?.to;\n      const amount = item?.value;\n      if (!(from === constants.AddressZero)) {\n        if (!(from in balances)) {\n          balances[from] = BigNumber.from(0);\n        }\n        balances[from] = balances[from].sub(amount);\n      }\n      if (!(to === constants.AddressZero)) {\n        if (!(to in balances)) {\n          balances[to] = BigNumber.from(0);\n        }\n        balances[to] = balances[to].add(amount);\n      }\n    });\n    const entries = Object.entries(balances);\n    const results = await Promise.all(entries.map(_ref => {\n      let [, value] = _ref;\n      return fetchCurrencyValue(this.contractWrapper.getProvider(), this.contractWrapper.address, value);\n    }));\n    return entries.map((_ref2, index) => {\n      let [addr] = _ref2;\n      return {\n        holder: addr,\n        balance: results[index]\n      };\n    });\n  }\n}\n\n/**\n * Create a standard crypto token or cryptocurrency.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"token\");\n * ```\n *\n * @internal\n * @deprecated use contract.erc20 instead\n */\nclass Token extends StandardErc20 {\n  static contractRoles = NFT_BASE_CONTRACT_ROLES;\n\n  /**\n   * Signature Minting\n   * @remarks Generate tokens that can be minted only with your own signature, attaching your own set of mint conditions.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the tokens\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, TokenErc20ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Token.contractRoles);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.history = new TokenERC20History(this.contractWrapper, this.events);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.signature = new Erc20SignatureMintable(this.contractWrapper, this.roles);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get your wallet voting power for the current checkpoints\n   *\n   * @returns The amount of voting power in tokens\n   */\n  async getVoteBalance() {\n    return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress());\n  }\n  async getVoteBalanceOf(account) {\n    return await this.erc20.getValue(await this.contractWrapper.read(\"getVotes\", [account]));\n  }\n\n  /**\n   * Get your voting delegatee address\n   *\n   * @returns The address of your vote delegatee\n   */\n  async getDelegation() {\n    return await this.getDelegationOf(await this.contractWrapper.getSignerAddress());\n  }\n\n  /**\n   * Get a specific address voting delegatee address\n   *\n   * @returns The address of your vote delegatee\n   */\n  async getDelegationOf(account) {\n    return await this.contractWrapper.read(\"delegates\", [await resolveAddress(account)]);\n  }\n\n  /**\n   * Get whether users can transfer tokens from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [getRoleHash(\"transfer\"), constants.AddressZero]);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Mint Tokens for the connected wallet\n   *\n   * @remarks See {@link Token.mintTo}\n   */\n  mint = /* @__PURE__ */buildTransactionFunction(async amount => {\n    return this.erc20.mint.prepare(amount);\n  });\n\n  /**\n   * Mint Tokens\n   *\n   * @remarks Mint tokens to a specified address.\n   *\n   * @example\n   * ```javascript\n   * const toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\n   * const amount = \"1.5\"; // The amount of this token you want to mint\n   *\n   * await contract.mintTo(toAddress, amount);\n   * ```\n   */\n  mintTo = /* @__PURE__ */buildTransactionFunction(async (to, amount) => {\n    return this.erc20.mintTo.prepare(to, amount);\n  });\n\n  /**\n   * Construct a mint transaction without executing it.\n   * This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param receiver - Address you want to send the token to\n   * @param amount - The amount of tokens you want to mint\n   *\n   * @deprecated Use `contract.mint.prepare(...args)` instead\n   */\n  async getMintTransaction(to, amount) {\n    return this.erc20.getMintTransaction(to, amount);\n  }\n\n  /**\n   * Mint Tokens To Many Wallets\n   *\n   * @remarks Mint tokens to many wallets in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 0.2, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 1.4,\n   *  }\n   * ]\n   *\n   * await contract.mintBatchTo(data);\n   * ```\n   */\n  mintBatchTo = /* @__PURE__ */buildTransactionFunction(async args => {\n    return this.erc20.mintBatchTo.prepare(args);\n  });\n\n  /**\n   * Lets you delegate your voting power to the delegateeAddress\n   *\n   * @param delegateeAddress - delegatee wallet address\n   * @alpha\n   */\n  delegateTo = /* @__PURE__ */buildTransactionFunction(async delegateeAddress => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"delegate\",\n      args: [await resolveAddress(delegateeAddress)]\n    });\n  });\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnTokens(amount);\n   * ```\n   */\n  burn = /* @__PURE__ */buildTransactionFunction(amount => {\n    return this.erc20.burn.prepare(amount);\n  });\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the specified wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const holderAddress = \"{{wallet_address}}\";\n   *\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnFrom(holderAddress, amount);\n   * ```\n   */\n  burnFrom = /* @__PURE__ */buildTransactionFunction(async (holder, amount) => {\n    return this.erc20.burnFrom.prepare(holder, amount);\n  });\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { Token };\n"],"names":["ContractInterceptor","constructor","contractWrapper","this","overrideNextTransaction","hook","withTransactionOverride","ContractPlatformFee","featureName","FEATURE_PLATFORM_FEE","name","get","platformFeeRecipient","platformFeeBps","read","CommonPlatformFeeSchema","parseAsync","platform_fee_recipient","platform_fee_basis_points","set","buildTransactionFunction","async","parsed","platformFeeInfo","Transaction","fromContractWrapper","method","args","ContractPrimarySale","FEATURE_PRIMARY_SALE","getRecipient","setRecipient","recipient","StandardErc20","chainId","_chainId","storage","erc20","Erc20","onNetworkUpdated","network","updateSignerOrProvider","getAddress","address","balance","balanceOf","totalSupply","allowance","spender","allowanceOf","owner","transfer","to","amount","prepare","transferFrom","from","setAllowance","transferBatch","TokenERC20History","events","getAllHolderBalances","txns","getEvents","map","b","data","balances","forEach","item","value","constants","BigNumber","sub","add","entries","Object","results","Promise","all","_ref","fetchCurrencyValue","getProvider","_ref2","index","addr","holder","Token","static","NFT_BASE_CONTRACT_ROLES","options","arguments","length","undefined","abi","super","ContractWrapper","AbiSchema","parse","metadata","ContractMetadata","TokenErc20ContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","sales","ContractEvents","history","encoder","ContractEncoder","estimator","GasCostEstimator","platformFees","interceptor","signature","Erc20SignatureMintable","getVoteBalance","getVoteBalanceOf","getSignerAddress","account","getValue","getDelegation","getDelegationOf","resolveAddress","isTransferRestricted","getRoleHash","mint","mintTo","getMintTransaction","mintBatchTo","delegateTo","delegateeAddress","burn","burnFrom","overrides","call","functionName"],"sourceRoot":""}